{
  "log": {
    "version": "1.2",
    "creator": {
      "name": "WebInspector",
      "version": "537.36"
    },
    "pages": [
      {
        "startedDateTime": "2017-06-28T09:37:40.650Z",
        "id": "page_1",
        "title": "https://h2o.examp1e.net/",
        "pageTimings": {
          "onContentLoad": 934.0139999985695,
          "onLoad": 1350.8640000072774
        }
      }
    ],
    "entries": [
      {
        "startedDateTime": "2017-06-28T09:37:40.650Z",
        "time": 85.17600002232939,
        "request": {
          "method": "GET",
          "url": "https://h2o.examp1e.net/",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": ":path",
              "value": "/"
            },
            {
              "name": "pragma",
              "value": "no-cache"
            },
            {
              "name": "accept-encoding",
              "value": "gzip, deflate, sdch, br"
            },
            {
              "name": "accept-language",
              "value": "en-CA,en;q=0.8,en-US;q=0.6,de;q=0.4,en-GB;q=0.2,ko;q=0.2"
            },
            {
              "name": "upgrade-insecure-requests",
              "value": "1"
            },
            {
              "name": "user-agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36"
            },
            {
              "name": "accept",
              "value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8"
            },
            {
              "name": "cache-control",
              "value": "no-cache"
            },
            {
              "name": ":authority",
              "value": "h2o.examp1e.net"
            },
            {
              "name": "cookie",
              "value": "h2o_casper=AmgAAAAAAAAAAAAY1oiCMAAAApA"
            },
            {
              "name": ":scheme",
              "value": "https"
            },
            {
              "name": "referer",
              "value": "https://www.google.co.kr/"
            },
            {
              "name": ":method",
              "value": "GET"
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "h2o_casper",
              "value": "AmgAAAAAAAAAAAAY1oiCMAAAApA",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "date",
              "value": "Wed, 28 Jun 2017 09:37:40 GMT"
            },
            {
              "name": "last-modified",
              "value": "Sun, 23 Apr 2017 01:40:15 GMT"
            },
            {
              "name": "server",
              "value": "h2o/2.2.0-beta2"
            },
            {
              "name": "etag",
              "value": "\"58fc05ff-16d8\""
            },
            {
              "name": "content-type",
              "value": "text/html"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "cache-control",
              "value": "no-cache"
            },
            {
              "name": "set-cookie",
              "value": "h2o_casper=AmgAAAAAAAAAAAAY1oiCMAAAApA; Path=/; Expires=Tue, 01 Jan 2030 00:00:00 GMT; Secure"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "link",
              "value": "</search/jquery-1.9.1.min.js>; rel=preload"
            },
            {
              "name": "link",
              "value": "</search/oktavia-jquery-ui.js>; rel=preload"
            },
            {
              "name": "link",
              "value": "</search/oktavia-english-search.js>; rel=preload"
            },
            {
              "name": "link",
              "value": "</assets/style.css>; rel=preload"
            },
            {
              "name": "link",
              "value": "</assets/searchstyle.css>; rel=preload"
            },
            {
              "name": "content-length",
              "value": "5848"
            }
          ],
          "cookies": [
            {
              "name": "h2o_casper",
              "value": "AmgAAAAAAAAAAAAY1oiCMAAAApA",
              "path": "/",
              "expires": "2030-01-01T00:00:00.000Z",
              "httpOnly": false,
              "secure": true
            }
          ],
          "content": {
            "size": 5848,
            "mimeType": "text/html",
            "text": "<!DOCTYPE html>\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<link rel=\"canonical\" href=\"./\" />\n<meta name=\"viewport\" content=\"width=device-width,initial-scale=1,user-scalable=no\" />\n\n<!-- oktavia -->\n<link rel=\"stylesheet\" href=\"assets/searchstyle.css\" type=\"text/css\" />\n<script src=\"search/jquery-1.9.1.min.js\"></script>\n<script src=\"search/oktavia-jquery-ui.js\"></script>\n<script src=\"search/oktavia-english-search.js\"></script>\n<!-- /oktavia -->\n\n<link rel=\"stylesheet\" href=\"assets/style.css\" type=\"text/css\" />\n\n<title>H2O - the optimized HTTP/2 server</title>\n</head>\n<body>\n<div id=\"body\">\n<div id=\"top\">\n\n<h1>\n<a href=\"index.html\">H2O</a>\n<iframe align=\"right\" valign=\"baseline\" src=\"https://ghbtns.com/github-btn.html?user=h2o&repo=h2o&type=star&count=true\" frameborder=\"0\" scrolling=\"0\" width=\"100px\" height=\"30px\" style=\"padding-top: 30px\"></iframe>\n</h1>\n<p class=\"description\">the optimized HTTP/1.x, HTTP/2 server</p>\n\n<!-- oktavia -->\n<form id=\"searchform\">\n<input class=\"search\" type=\"search\" name=\"search\" id=\"search\" results=\"5\" value=\"\" placeholder=\"Search\" />\n<div id=\"searchresult_box\">\n<div id=\"close_search_box\">&times;</div>\n<div id=\"searchresult_summary\"></div>\n<div id=\"searchresult\"></div>\n<div id=\"searchresult_nav\"></div>\n<span class=\"pr\">Powered by <a href=\"https://github.com/shibukawa/oktavia\">Oktavia</a></span>\n</div>\n</form>\n<!-- /oktavia -->\n\n</div>\n\n<table id=\"menu\">\n<tr>\n<td class=\"selected\">Top</td>\n<td><a href=\"install.html\">Install</a></td>\n<td><a href=\"configure.html\">Configure</a></td>\n<td><a href=\"faq.html\">FAQ</a></td>\n<td><a href=\"http://blog.kazuhooku.com/search/label/H2O\" target=\"_blank\">Blog</a></td>\n<td><a href=\"http://github.com/h2o/h2o/\" target=\"_blank\">Source</a></td>\n</tr>\n</table>\n\n<div id=\"main\">\n\n\n\n<div style=\"margin-top: 3em;\">\n<p>\nH2O is a new generation HTTP server that <b>provides quicker response to users with less CPU utilization</b> when compared to older generation of web servers.\nDesigned from ground-up, the server takes full advantage of <a href=\"https://tools.ietf.org/html/rfc7540\">HTTP/2</a> features including <a href=\"configure/http2_directives.html#prioritization\">prioritized content serving</a> and <a href=\"configure/http2_directives.html#server-push\">server push</a>, promising outstanding experience to the visitors of your web site.\n<div align=\"center\">\n<a href=\"assets/8mbps100msec-nginx195-h2o150.png\" target=\"_blank\"><img src=\"assets/8mbps100msec-nginx195-h2o150.png\" width=\"333\" height=\"250\"></a>\n<a href=\"assets/staticfile612-nginx1910-h2o170.png\" target=\"_blank\"><img src=\"assets/staticfile612-nginx1910-h2o170.png\" width=\"200\" height=\"250\"></a>\n</div>\nExplanation of the benchmark charts can be found in the <a href=\"benchmarks.html\">benchmarks</a> page.\n<p>\n\n</p>\n</div>\n\n<h3 id=\"key-features\">Key Features</h3>\n\n<ul>\n<li>HTTP/1.0, HTTP/1.1\n<li><a href=\"configure/http2_directives.html\">HTTP/2</a>\n<ul>\n<li>full support for dependency and weight-based prioritization with <a href=\"configure/http2_directives.html#http2-reprioritize-blocking-assets\">server-side tweaks</a></li>\n<li><a href=\"configure/http2_directives.html#http2-casper\">cache-aware server push</a></li>\n</ul>\n</li>\n<li>TCP Fast Open\n<li><a href=\"configure/base_directives.html#listen-ssl\">TLS</a>\n<ul>\n<li>session resumption (standalone &amp; memcached)\n<li>session tickets with automatic key rollover\n<li>automatic OCSP stapling\n<li>forward secrecy &amp; fast AEAD ciphers<sup><a href=\"#note_1\" id=\"#cite_1\" title=\"chacha20-poly1305: see Do the ChaCha: better mobile performance with cryptography\">1</sup></a></sup></li>\n<li><a href=\"configure/base_directives.html#neverbleed\">private key protection using privilege separation</a>\n</ul>\n</li>\n<li><a href=\"configure/file_directives.html\">static file serving</a>\n<li><a href=\"configure/fastcgi_directives.html\">FastCGI</a>\n<li><a href=\"configure/proxy_directives.html\">reverse proxy</a>\n<li><a href=\"configure/mruby.html\">scriptable using mruby</a> (Rack-based)\n<li>graceful restart and self-upgrade\n</ul>\n\n<h3 id=\"news\">News</h3>\n\n<ul>\n<li>Version <a href=\"https://github.com/h2o/h2o/releases/tag/v2.2.1\">2.2.1</a> is now available (Apr 22 2017)</li>\n<li>Version <a href=\"https://github.com/h2o/h2o/releases/tag/v2.2.0\">2.2.0</a> is now available (Apr 5 2017)</li>\n<li>Version <a href=\"https://github.com/h2o/h2o/releases/tag/v2.1.0\">2.1.0</a> is now available (Jan 17 2017)</li>\n<li>Version <a href=\"https://github.com/h2o/h2o/releases/tag/v2.0.6\">2.0.6</a> is now available (Jan 5 2017)</li>\n<li>Version <a href=\"https://github.com/h2o/h2o/releases/tag/v2.0.5\">2.0.5</a> and <a href=\"https://github.com/h2o/h2o/releases/tag/v2.1.0-beta4\">2.1.0-beta4</a> have been released with <a href=\"https://github.com/h2o/h2o/issues/1144\">a vulnerability fix for CVE-2016-4864</a> (Dec 21 2016)</li>\n</ul>\n\n<p>\nList of all the vulnerabilities having been fixed can be found <a href=\"https://github.com/h2o/h2o/issues?utf8=%E2%9C%93&q=label%3Avulnerability\">here</a>.\n</p>\n\n\n\n<div class=\"notes\">\n<h3>Notes:</h3>\n<ol>\n<li id=\"note_1\">chacha20-poly1305: see <a href=\"https://blog.cloudflare.com/do-the-chacha-better-mobile-performance-with-cryptography/\">Do the ChaCha: better mobile performance with cryptography</a></li>\n</ol>\n</div>\n\n</div>\n<div id=\"footer\">\n<p>\nCopyright &copy; 2015 <a href=\"http://dena.com/intl/\">DeNA Co., Ltd.</a> et al.\n</p>\n</div>\n<script type=\"text/javascript\">\n(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');\nga('create', 'UA-19422636-3', 'auto');\nga('send', 'pageview');\n</script>\n</body>\n</html>\n"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 5910
        },
        "cache": {},
        "timings": {
          "blocked": 0.430000014603138,
          "dns": -1,
          "connect": -1,
          "send": 0.13800000306218901,
          "wait": 81.52700000209737,
          "receive": 3.0810000025666966,
          "ssl": -1
        },
        "serverIPAddress": "133.242.206.244",
        "connection": "693217",
        "pageref": "page_1"
      },
      {
        "startedDateTime": "2017-06-28T09:37:40.741Z",
        "time": 366.6720000037458,
        "request": {
          "method": "GET",
          "url": "https://h2o.examp1e.net/search/jquery-1.9.1.min.js",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": ":path",
              "value": "/search/jquery-1.9.1.min.js"
            },
            {
              "name": "pragma",
              "value": "no-cache"
            },
            {
              "name": "accept-encoding",
              "value": "gzip, deflate, sdch, br"
            },
            {
              "name": "accept-language",
              "value": "en-CA,en;q=0.8,en-US;q=0.6,de;q=0.4,en-GB;q=0.2,ko;q=0.2"
            },
            {
              "name": "user-agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36"
            },
            {
              "name": "accept",
              "value": "*/*"
            },
            {
              "name": "cache-control",
              "value": "no-cache"
            },
            {
              "name": ":authority",
              "value": "h2o.examp1e.net"
            },
            {
              "name": "cookie",
              "value": "h2o_casper=AmgAAAAAAAAAAAAY1oiCMAAAApA"
            },
            {
              "name": ":scheme",
              "value": "https"
            },
            {
              "name": "referer",
              "value": "https://h2o.examp1e.net/"
            },
            {
              "name": ":method",
              "value": "GET"
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "h2o_casper",
              "value": "AmgAAAAAAAAAAAAY1oiCMAAAApA",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "date",
              "value": "Wed, 28 Jun 2017 09:37:40 GMT"
            },
            {
              "name": "last-modified",
              "value": "Thu, 14 May 2015 04:10:14 GMT"
            },
            {
              "name": "server",
              "value": "h2o/2.2.0-beta2"
            },
            {
              "name": "etag",
              "value": "\"55542026-169d5\""
            },
            {
              "name": "content-type",
              "value": "application/javascript"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "set-cookie",
              "value": "h2o_casper=AmgAAAAAAAAAAAAY1oiCMAAAApA; Path=/; Expires=Tue, 01 Jan 2030 00:00:00 GMT; Secure"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "content-length",
              "value": "92629"
            }
          ],
          "cookies": [
            {
              "name": "h2o_casper",
              "value": "AmgAAAAAAAAAAAAY1oiCMAAAApA",
              "path": "/",
              "expires": "2030-01-01T00:00:00.000Z",
              "httpOnly": false,
              "secure": true
            }
          ],
          "content": {
            "size": 92629,
            "mimeType": "application/javascript",
            "text": "/*! jQuery v1.9.1 | (c) 2005, 2012 jQuery Foundation, Inc. | jquery.org/license\n//@ sourceMappingURL=jquery.min.map\n*/(function(e,t){var n,r,i=typeof t,o=e.document,a=e.location,s=e.jQuery,u=e.$,l={},c=[],p=\"1.9.1\",f=c.concat,d=c.push,h=c.slice,g=c.indexOf,m=l.toString,y=l.hasOwnProperty,v=p.trim,b=function(e,t){return new b.fn.init(e,t,r)},x=/[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source,w=/\\S+/g,T=/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,N=/^(?:(<[\\w\\W]+>)[^>]*|#([\\w-]*))$/,C=/^<(\\w+)\\s*\\/?>(?:<\\/\\1>|)$/,k=/^[\\],:{}\\s]*$/,E=/(?:^|:|,)(?:\\s*\\[)+/g,S=/\\\\(?:[\"\\\\\\/bfnrt]|u[\\da-fA-F]{4})/g,A=/\"[^\"\\\\\\r\\n]*\"|true|false|null|-?(?:\\d+\\.|)\\d+(?:[eE][+-]?\\d+|)/g,j=/^-ms-/,D=/-([\\da-z])/gi,L=function(e,t){return t.toUpperCase()},H=function(e){(o.addEventListener||\"load\"===e.type||\"complete\"===o.readyState)&&(q(),b.ready())},q=function(){o.addEventListener?(o.removeEventListener(\"DOMContentLoaded\",H,!1),e.removeEventListener(\"load\",H,!1)):(o.detachEvent(\"onreadystatechange\",H),e.detachEvent(\"onload\",H))};b.fn=b.prototype={jquery:p,constructor:b,init:function(e,n,r){var i,a;if(!e)return this;if(\"string\"==typeof e){if(i=\"<\"===e.charAt(0)&&\">\"===e.charAt(e.length-1)&&e.length>=3?[null,e,null]:N.exec(e),!i||!i[1]&&n)return!n||n.jquery?(n||r).find(e):this.constructor(n).find(e);if(i[1]){if(n=n instanceof b?n[0]:n,b.merge(this,b.parseHTML(i[1],n&&n.nodeType?n.ownerDocument||n:o,!0)),C.test(i[1])&&b.isPlainObject(n))for(i in n)b.isFunction(this[i])?this[i](n[i]):this.attr(i,n[i]);return this}if(a=o.getElementById(i[2]),a&&a.parentNode){if(a.id!==i[2])return r.find(e);this.length=1,this[0]=a}return this.context=o,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):b.isFunction(e)?r.ready(e):(e.selector!==t&&(this.selector=e.selector,this.context=e.context),b.makeArray(e,this))},selector:\"\",length:0,size:function(){return this.length},toArray:function(){return h.call(this)},get:function(e){return null==e?this.toArray():0>e?this[this.length+e]:this[e]},pushStack:function(e){var t=b.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e,t){return b.each(this,e,t)},ready:function(e){return b.ready.promise().done(e),this},slice:function(){return this.pushStack(h.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(0>e?t:0);return this.pushStack(n>=0&&t>n?[this[n]]:[])},map:function(e){return this.pushStack(b.map(this,function(t,n){return e.call(t,n,t)}))},end:function(){return this.prevObject||this.constructor(null)},push:d,sort:[].sort,splice:[].splice},b.fn.init.prototype=b.fn,b.extend=b.fn.extend=function(){var e,n,r,i,o,a,s=arguments[0]||{},u=1,l=arguments.length,c=!1;for(\"boolean\"==typeof s&&(c=s,s=arguments[1]||{},u=2),\"object\"==typeof s||b.isFunction(s)||(s={}),l===u&&(s=this,--u);l>u;u++)if(null!=(o=arguments[u]))for(i in o)e=s[i],r=o[i],s!==r&&(c&&r&&(b.isPlainObject(r)||(n=b.isArray(r)))?(n?(n=!1,a=e&&b.isArray(e)?e:[]):a=e&&b.isPlainObject(e)?e:{},s[i]=b.extend(c,a,r)):r!==t&&(s[i]=r));return s},b.extend({noConflict:function(t){return e.$===b&&(e.$=u),t&&e.jQuery===b&&(e.jQuery=s),b},isReady:!1,readyWait:1,holdReady:function(e){e?b.readyWait++:b.ready(!0)},ready:function(e){if(e===!0?!--b.readyWait:!b.isReady){if(!o.body)return setTimeout(b.ready);b.isReady=!0,e!==!0&&--b.readyWait>0||(n.resolveWith(o,[b]),b.fn.trigger&&b(o).trigger(\"ready\").off(\"ready\"))}},isFunction:function(e){return\"function\"===b.type(e)},isArray:Array.isArray||function(e){return\"array\"===b.type(e)},isWindow:function(e){return null!=e&&e==e.window},isNumeric:function(e){return!isNaN(parseFloat(e))&&isFinite(e)},type:function(e){return null==e?e+\"\":\"object\"==typeof e||\"function\"==typeof e?l[m.call(e)]||\"object\":typeof e},isPlainObject:function(e){if(!e||\"object\"!==b.type(e)||e.nodeType||b.isWindow(e))return!1;try{if(e.constructor&&!y.call(e,\"constructor\")&&!y.call(e.constructor.prototype,\"isPrototypeOf\"))return!1}catch(n){return!1}var r;for(r in e);return r===t||y.call(e,r)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},error:function(e){throw Error(e)},parseHTML:function(e,t,n){if(!e||\"string\"!=typeof e)return null;\"boolean\"==typeof t&&(n=t,t=!1),t=t||o;var r=C.exec(e),i=!n&&[];return r?[t.createElement(r[1])]:(r=b.buildFragment([e],t,i),i&&b(i).remove(),b.merge([],r.childNodes))},parseJSON:function(n){return e.JSON&&e.JSON.parse?e.JSON.parse(n):null===n?n:\"string\"==typeof n&&(n=b.trim(n),n&&k.test(n.replace(S,\"@\").replace(A,\"]\").replace(E,\"\")))?Function(\"return \"+n)():(b.error(\"Invalid JSON: \"+n),t)},parseXML:function(n){var r,i;if(!n||\"string\"!=typeof n)return null;try{e.DOMParser?(i=new DOMParser,r=i.parseFromString(n,\"text/xml\")):(r=new ActiveXObject(\"Microsoft.XMLDOM\"),r.async=\"false\",r.loadXML(n))}catch(o){r=t}return r&&r.documentElement&&!r.getElementsByTagName(\"parsererror\").length||b.error(\"Invalid XML: \"+n),r},noop:function(){},globalEval:function(t){t&&b.trim(t)&&(e.execScript||function(t){e.eval.call(e,t)})(t)},camelCase:function(e){return e.replace(j,\"ms-\").replace(D,L)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t,n){var r,i=0,o=e.length,a=M(e);if(n){if(a){for(;o>i;i++)if(r=t.apply(e[i],n),r===!1)break}else for(i in e)if(r=t.apply(e[i],n),r===!1)break}else if(a){for(;o>i;i++)if(r=t.call(e[i],i,e[i]),r===!1)break}else for(i in e)if(r=t.call(e[i],i,e[i]),r===!1)break;return e},trim:v&&!v.call(\"\\ufeff\\u00a0\")?function(e){return null==e?\"\":v.call(e)}:function(e){return null==e?\"\":(e+\"\").replace(T,\"\")},makeArray:function(e,t){var n=t||[];return null!=e&&(M(Object(e))?b.merge(n,\"string\"==typeof e?[e]:e):d.call(n,e)),n},inArray:function(e,t,n){var r;if(t){if(g)return g.call(t,e,n);for(r=t.length,n=n?0>n?Math.max(0,r+n):n:0;r>n;n++)if(n in t&&t[n]===e)return n}return-1},merge:function(e,n){var r=n.length,i=e.length,o=0;if(\"number\"==typeof r)for(;r>o;o++)e[i++]=n[o];else while(n[o]!==t)e[i++]=n[o++];return e.length=i,e},grep:function(e,t,n){var r,i=[],o=0,a=e.length;for(n=!!n;a>o;o++)r=!!t(e[o],o),n!==r&&i.push(e[o]);return i},map:function(e,t,n){var r,i=0,o=e.length,a=M(e),s=[];if(a)for(;o>i;i++)r=t(e[i],i,n),null!=r&&(s[s.length]=r);else for(i in e)r=t(e[i],i,n),null!=r&&(s[s.length]=r);return f.apply([],s)},guid:1,proxy:function(e,n){var r,i,o;return\"string\"==typeof n&&(o=e[n],n=e,e=o),b.isFunction(e)?(r=h.call(arguments,2),i=function(){return e.apply(n||this,r.concat(h.call(arguments)))},i.guid=e.guid=e.guid||b.guid++,i):t},access:function(e,n,r,i,o,a,s){var u=0,l=e.length,c=null==r;if(\"object\"===b.type(r)){o=!0;for(u in r)b.access(e,n,u,r[u],!0,a,s)}else if(i!==t&&(o=!0,b.isFunction(i)||(s=!0),c&&(s?(n.call(e,i),n=null):(c=n,n=function(e,t,n){return c.call(b(e),n)})),n))for(;l>u;u++)n(e[u],r,s?i:i.call(e[u],u,n(e[u],r)));return o?e:c?n.call(e):l?n(e[0],r):a},now:function(){return(new Date).getTime()}}),b.ready.promise=function(t){if(!n)if(n=b.Deferred(),\"complete\"===o.readyState)setTimeout(b.ready);else if(o.addEventListener)o.addEventListener(\"DOMContentLoaded\",H,!1),e.addEventListener(\"load\",H,!1);else{o.attachEvent(\"onreadystatechange\",H),e.attachEvent(\"onload\",H);var r=!1;try{r=null==e.frameElement&&o.documentElement}catch(i){}r&&r.doScroll&&function a(){if(!b.isReady){try{r.doScroll(\"left\")}catch(e){return setTimeout(a,50)}q(),b.ready()}}()}return n.promise(t)},b.each(\"Boolean Number String Function Array Date RegExp Object Error\".split(\" \"),function(e,t){l[\"[object \"+t+\"]\"]=t.toLowerCase()});function M(e){var t=e.length,n=b.type(e);return b.isWindow(e)?!1:1===e.nodeType&&t?!0:\"array\"===n||\"function\"!==n&&(0===t||\"number\"==typeof t&&t>0&&t-1 in e)}r=b(o);var _={};function F(e){var t=_[e]={};return b.each(e.match(w)||[],function(e,n){t[n]=!0}),t}b.Callbacks=function(e){e=\"string\"==typeof e?_[e]||F(e):b.extend({},e);var n,r,i,o,a,s,u=[],l=!e.once&&[],c=function(t){for(r=e.memory&&t,i=!0,a=s||0,s=0,o=u.length,n=!0;u&&o>a;a++)if(u[a].apply(t[0],t[1])===!1&&e.stopOnFalse){r=!1;break}n=!1,u&&(l?l.length&&c(l.shift()):r?u=[]:p.disable())},p={add:function(){if(u){var t=u.length;(function i(t){b.each(t,function(t,n){var r=b.type(n);\"function\"===r?e.unique&&p.has(n)||u.push(n):n&&n.length&&\"string\"!==r&&i(n)})})(arguments),n?o=u.length:r&&(s=t,c(r))}return this},remove:function(){return u&&b.each(arguments,function(e,t){var r;while((r=b.inArray(t,u,r))>-1)u.splice(r,1),n&&(o>=r&&o--,a>=r&&a--)}),this},has:function(e){return e?b.inArray(e,u)>-1:!(!u||!u.length)},empty:function(){return u=[],this},disable:function(){return u=l=r=t,this},disabled:function(){return!u},lock:function(){return l=t,r||p.disable(),this},locked:function(){return!l},fireWith:function(e,t){return t=t||[],t=[e,t.slice?t.slice():t],!u||i&&!l||(n?l.push(t):c(t)),this},fire:function(){return p.fireWith(this,arguments),this},fired:function(){return!!i}};return p},b.extend({Deferred:function(e){var t=[[\"resolve\",\"done\",b.Callbacks(\"once memory\"),\"resolved\"],[\"reject\",\"fail\",b.Callbacks(\"once memory\"),\"rejected\"],[\"notify\",\"progress\",b.Callbacks(\"memory\")]],n=\"pending\",r={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},then:function(){var e=arguments;return b.Deferred(function(n){b.each(t,function(t,o){var a=o[0],s=b.isFunction(e[t])&&e[t];i[o[1]](function(){var e=s&&s.apply(this,arguments);e&&b.isFunction(e.promise)?e.promise().done(n.resolve).fail(n.reject).progress(n.notify):n[a+\"With\"](this===r?n.promise():this,s?[e]:arguments)})}),e=null}).promise()},promise:function(e){return null!=e?b.extend(e,r):r}},i={};return r.pipe=r.then,b.each(t,function(e,o){var a=o[2],s=o[3];r[o[1]]=a.add,s&&a.add(function(){n=s},t[1^e][2].disable,t[2][2].lock),i[o[0]]=function(){return i[o[0]+\"With\"](this===i?r:this,arguments),this},i[o[0]+\"With\"]=a.fireWith}),r.promise(i),e&&e.call(i,i),i},when:function(e){var t=0,n=h.call(arguments),r=n.length,i=1!==r||e&&b.isFunction(e.promise)?r:0,o=1===i?e:b.Deferred(),a=function(e,t,n){return function(r){t[e]=this,n[e]=arguments.length>1?h.call(arguments):r,n===s?o.notifyWith(t,n):--i||o.resolveWith(t,n)}},s,u,l;if(r>1)for(s=Array(r),u=Array(r),l=Array(r);r>t;t++)n[t]&&b.isFunction(n[t].promise)?n[t].promise().done(a(t,l,n)).fail(o.reject).progress(a(t,u,s)):--i;return i||o.resolveWith(l,n),o.promise()}}),b.support=function(){var t,n,r,a,s,u,l,c,p,f,d=o.createElement(\"div\");if(d.setAttribute(\"className\",\"t\"),d.innerHTML=\"  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>\",n=d.getElementsByTagName(\"*\"),r=d.getElementsByTagName(\"a\")[0],!n||!r||!n.length)return{};s=o.createElement(\"select\"),l=s.appendChild(o.createElement(\"option\")),a=d.getElementsByTagName(\"input\")[0],r.style.cssText=\"top:1px;float:left;opacity:.5\",t={getSetAttribute:\"t\"!==d.className,leadingWhitespace:3===d.firstChild.nodeType,tbody:!d.getElementsByTagName(\"tbody\").length,htmlSerialize:!!d.getElementsByTagName(\"link\").length,style:/top/.test(r.getAttribute(\"style\")),hrefNormalized:\"/a\"===r.getAttribute(\"href\"),opacity:/^0.5/.test(r.style.opacity),cssFloat:!!r.style.cssFloat,checkOn:!!a.value,optSelected:l.selected,enctype:!!o.createElement(\"form\").enctype,html5Clone:\"<:nav></:nav>\"!==o.createElement(\"nav\").cloneNode(!0).outerHTML,boxModel:\"CSS1Compat\"===o.compatMode,deleteExpando:!0,noCloneEvent:!0,inlineBlockNeedsLayout:!1,shrinkWrapBlocks:!1,reliableMarginRight:!0,boxSizingReliable:!0,pixelPosition:!1},a.checked=!0,t.noCloneChecked=a.cloneNode(!0).checked,s.disabled=!0,t.optDisabled=!l.disabled;try{delete d.test}catch(h){t.deleteExpando=!1}a=o.createElement(\"input\"),a.setAttribute(\"value\",\"\"),t.input=\"\"===a.getAttribute(\"value\"),a.value=\"t\",a.setAttribute(\"type\",\"radio\"),t.radioValue=\"t\"===a.value,a.setAttribute(\"checked\",\"t\"),a.setAttribute(\"name\",\"t\"),u=o.createDocumentFragment(),u.appendChild(a),t.appendChecked=a.checked,t.checkClone=u.cloneNode(!0).cloneNode(!0).lastChild.checked,d.attachEvent&&(d.attachEvent(\"onclick\",function(){t.noCloneEvent=!1}),d.cloneNode(!0).click());for(f in{submit:!0,change:!0,focusin:!0})d.setAttribute(c=\"on\"+f,\"t\"),t[f+\"Bubbles\"]=c in e||d.attributes[c].expando===!1;return d.style.backgroundClip=\"content-box\",d.cloneNode(!0).style.backgroundClip=\"\",t.clearCloneStyle=\"content-box\"===d.style.backgroundClip,b(function(){var n,r,a,s=\"padding:0;margin:0;border:0;display:block;box-sizing:content-box;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;\",u=o.getElementsByTagName(\"body\")[0];u&&(n=o.createElement(\"div\"),n.style.cssText=\"border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px\",u.appendChild(n).appendChild(d),d.innerHTML=\"<table><tr><td></td><td>t</td></tr></table>\",a=d.getElementsByTagName(\"td\"),a[0].style.cssText=\"padding:0;margin:0;border:0;display:none\",p=0===a[0].offsetHeight,a[0].style.display=\"\",a[1].style.display=\"none\",t.reliableHiddenOffsets=p&&0===a[0].offsetHeight,d.innerHTML=\"\",d.style.cssText=\"box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;\",t.boxSizing=4===d.offsetWidth,t.doesNotIncludeMarginInBodyOffset=1!==u.offsetTop,e.getComputedStyle&&(t.pixelPosition=\"1%\"!==(e.getComputedStyle(d,null)||{}).top,t.boxSizingReliable=\"4px\"===(e.getComputedStyle(d,null)||{width:\"4px\"}).width,r=d.appendChild(o.createElement(\"div\")),r.style.cssText=d.style.cssText=s,r.style.marginRight=r.style.width=\"0\",d.style.width=\"1px\",t.reliableMarginRight=!parseFloat((e.getComputedStyle(r,null)||{}).marginRight)),typeof d.style.zoom!==i&&(d.innerHTML=\"\",d.style.cssText=s+\"width:1px;padding:1px;display:inline;zoom:1\",t.inlineBlockNeedsLayout=3===d.offsetWidth,d.style.display=\"block\",d.innerHTML=\"<div></div>\",d.firstChild.style.width=\"5px\",t.shrinkWrapBlocks=3!==d.offsetWidth,t.inlineBlockNeedsLayout&&(u.style.zoom=1)),u.removeChild(n),n=d=a=r=null)}),n=s=u=l=r=a=null,t}();var O=/(?:\\{[\\s\\S]*\\}|\\[[\\s\\S]*\\])$/,B=/([A-Z])/g;function P(e,n,r,i){if(b.acceptData(e)){var o,a,s=b.expando,u=\"string\"==typeof n,l=e.nodeType,p=l?b.cache:e,f=l?e[s]:e[s]&&s;if(f&&p[f]&&(i||p[f].data)||!u||r!==t)return f||(l?e[s]=f=c.pop()||b.guid++:f=s),p[f]||(p[f]={},l||(p[f].toJSON=b.noop)),(\"object\"==typeof n||\"function\"==typeof n)&&(i?p[f]=b.extend(p[f],n):p[f].data=b.extend(p[f].data,n)),o=p[f],i||(o.data||(o.data={}),o=o.data),r!==t&&(o[b.camelCase(n)]=r),u?(a=o[n],null==a&&(a=o[b.camelCase(n)])):a=o,a}}function R(e,t,n){if(b.acceptData(e)){var r,i,o,a=e.nodeType,s=a?b.cache:e,u=a?e[b.expando]:b.expando;if(s[u]){if(t&&(o=n?s[u]:s[u].data)){b.isArray(t)?t=t.concat(b.map(t,b.camelCase)):t in o?t=[t]:(t=b.camelCase(t),t=t in o?[t]:t.split(\" \"));for(r=0,i=t.length;i>r;r++)delete o[t[r]];if(!(n?$:b.isEmptyObject)(o))return}(n||(delete s[u].data,$(s[u])))&&(a?b.cleanData([e],!0):b.support.deleteExpando||s!=s.window?delete s[u]:s[u]=null)}}}b.extend({cache:{},expando:\"jQuery\"+(p+Math.random()).replace(/\\D/g,\"\"),noData:{embed:!0,object:\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\",applet:!0},hasData:function(e){return e=e.nodeType?b.cache[e[b.expando]]:e[b.expando],!!e&&!$(e)},data:function(e,t,n){return P(e,t,n)},removeData:function(e,t){return R(e,t)},_data:function(e,t,n){return P(e,t,n,!0)},_removeData:function(e,t){return R(e,t,!0)},acceptData:function(e){if(e.nodeType&&1!==e.nodeType&&9!==e.nodeType)return!1;var t=e.nodeName&&b.noData[e.nodeName.toLowerCase()];return!t||t!==!0&&e.getAttribute(\"classid\")===t}}),b.fn.extend({data:function(e,n){var r,i,o=this[0],a=0,s=null;if(e===t){if(this.length&&(s=b.data(o),1===o.nodeType&&!b._data(o,\"parsedAttrs\"))){for(r=o.attributes;r.length>a;a++)i=r[a].name,i.indexOf(\"data-\")||(i=b.camelCase(i.slice(5)),W(o,i,s[i]));b._data(o,\"parsedAttrs\",!0)}return s}return\"object\"==typeof e?this.each(function(){b.data(this,e)}):b.access(this,function(n){return n===t?o?W(o,e,b.data(o,e)):null:(this.each(function(){b.data(this,e,n)}),t)},null,n,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){b.removeData(this,e)})}});function W(e,n,r){if(r===t&&1===e.nodeType){var i=\"data-\"+n.replace(B,\"-$1\").toLowerCase();if(r=e.getAttribute(i),\"string\"==typeof r){try{r=\"true\"===r?!0:\"false\"===r?!1:\"null\"===r?null:+r+\"\"===r?+r:O.test(r)?b.parseJSON(r):r}catch(o){}b.data(e,n,r)}else r=t}return r}function $(e){var t;for(t in e)if((\"data\"!==t||!b.isEmptyObject(e[t]))&&\"toJSON\"!==t)return!1;return!0}b.extend({queue:function(e,n,r){var i;return e?(n=(n||\"fx\")+\"queue\",i=b._data(e,n),r&&(!i||b.isArray(r)?i=b._data(e,n,b.makeArray(r)):i.push(r)),i||[]):t},dequeue:function(e,t){t=t||\"fx\";var n=b.queue(e,t),r=n.length,i=n.shift(),o=b._queueHooks(e,t),a=function(){b.dequeue(e,t)};\"inprogress\"===i&&(i=n.shift(),r--),o.cur=i,i&&(\"fx\"===t&&n.unshift(\"inprogress\"),delete o.stop,i.call(e,a,o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+\"queueHooks\";return b._data(e,n)||b._data(e,n,{empty:b.Callbacks(\"once memory\").add(function(){b._removeData(e,t+\"queue\"),b._removeData(e,n)})})}}),b.fn.extend({queue:function(e,n){var r=2;return\"string\"!=typeof e&&(n=e,e=\"fx\",r--),r>arguments.length?b.queue(this[0],e):n===t?this:this.each(function(){var t=b.queue(this,e,n);b._queueHooks(this,e),\"fx\"===e&&\"inprogress\"!==t[0]&&b.dequeue(this,e)})},dequeue:function(e){return this.each(function(){b.dequeue(this,e)})},delay:function(e,t){return e=b.fx?b.fx.speeds[e]||e:e,t=t||\"fx\",this.queue(t,function(t,n){var r=setTimeout(t,e);n.stop=function(){clearTimeout(r)}})},clearQueue:function(e){return this.queue(e||\"fx\",[])},promise:function(e,n){var r,i=1,o=b.Deferred(),a=this,s=this.length,u=function(){--i||o.resolveWith(a,[a])};\"string\"!=typeof e&&(n=e,e=t),e=e||\"fx\";while(s--)r=b._data(a[s],e+\"queueHooks\"),r&&r.empty&&(i++,r.empty.add(u));return u(),o.promise(n)}});var I,z,X=/[\\t\\r\\n]/g,U=/\\r/g,V=/^(?:input|select|textarea|button|object)$/i,Y=/^(?:a|area)$/i,J=/^(?:checked|selected|autofocus|autoplay|async|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped)$/i,G=/^(?:checked|selected)$/i,Q=b.support.getSetAttribute,K=b.support.input;b.fn.extend({attr:function(e,t){return b.access(this,b.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){b.removeAttr(this,e)})},prop:function(e,t){return b.access(this,b.prop,e,t,arguments.length>1)},removeProp:function(e){return e=b.propFix[e]||e,this.each(function(){try{this[e]=t,delete this[e]}catch(n){}})},addClass:function(e){var t,n,r,i,o,a=0,s=this.length,u=\"string\"==typeof e&&e;if(b.isFunction(e))return this.each(function(t){b(this).addClass(e.call(this,t,this.className))});if(u)for(t=(e||\"\").match(w)||[];s>a;a++)if(n=this[a],r=1===n.nodeType&&(n.className?(\" \"+n.className+\" \").replace(X,\" \"):\" \")){o=0;while(i=t[o++])0>r.indexOf(\" \"+i+\" \")&&(r+=i+\" \");n.className=b.trim(r)}return this},removeClass:function(e){var t,n,r,i,o,a=0,s=this.length,u=0===arguments.length||\"string\"==typeof e&&e;if(b.isFunction(e))return this.each(function(t){b(this).removeClass(e.call(this,t,this.className))});if(u)for(t=(e||\"\").match(w)||[];s>a;a++)if(n=this[a],r=1===n.nodeType&&(n.className?(\" \"+n.className+\" \").replace(X,\" \"):\"\")){o=0;while(i=t[o++])while(r.indexOf(\" \"+i+\" \")>=0)r=r.replace(\" \"+i+\" \",\" \");n.className=e?b.trim(r):\"\"}return this},toggleClass:function(e,t){var n=typeof e,r=\"boolean\"==typeof t;return b.isFunction(e)?this.each(function(n){b(this).toggleClass(e.call(this,n,this.className,t),t)}):this.each(function(){if(\"string\"===n){var o,a=0,s=b(this),u=t,l=e.match(w)||[];while(o=l[a++])u=r?u:!s.hasClass(o),s[u?\"addClass\":\"removeClass\"](o)}else(n===i||\"boolean\"===n)&&(this.className&&b._data(this,\"__className__\",this.className),this.className=this.className||e===!1?\"\":b._data(this,\"__className__\")||\"\")})},hasClass:function(e){var t=\" \"+e+\" \",n=0,r=this.length;for(;r>n;n++)if(1===this[n].nodeType&&(\" \"+this[n].className+\" \").replace(X,\" \").indexOf(t)>=0)return!0;return!1},val:function(e){var n,r,i,o=this[0];{if(arguments.length)return i=b.isFunction(e),this.each(function(n){var o,a=b(this);1===this.nodeType&&(o=i?e.call(this,n,a.val()):e,null==o?o=\"\":\"number\"==typeof o?o+=\"\":b.isArray(o)&&(o=b.map(o,function(e){return null==e?\"\":e+\"\"})),r=b.valHooks[this.type]||b.valHooks[this.nodeName.toLowerCase()],r&&\"set\"in r&&r.set(this,o,\"value\")!==t||(this.value=o))});if(o)return r=b.valHooks[o.type]||b.valHooks[o.nodeName.toLowerCase()],r&&\"get\"in r&&(n=r.get(o,\"value\"))!==t?n:(n=o.value,\"string\"==typeof n?n.replace(U,\"\"):null==n?\"\":n)}}}),b.extend({valHooks:{option:{get:function(e){var t=e.attributes.value;return!t||t.specified?e.value:e.text}},select:{get:function(e){var t,n,r=e.options,i=e.selectedIndex,o=\"select-one\"===e.type||0>i,a=o?null:[],s=o?i+1:r.length,u=0>i?s:o?i:0;for(;s>u;u++)if(n=r[u],!(!n.selected&&u!==i||(b.support.optDisabled?n.disabled:null!==n.getAttribute(\"disabled\"))||n.parentNode.disabled&&b.nodeName(n.parentNode,\"optgroup\"))){if(t=b(n).val(),o)return t;a.push(t)}return a},set:function(e,t){var n=b.makeArray(t);return b(e).find(\"option\").each(function(){this.selected=b.inArray(b(this).val(),n)>=0}),n.length||(e.selectedIndex=-1),n}}},attr:function(e,n,r){var o,a,s,u=e.nodeType;if(e&&3!==u&&8!==u&&2!==u)return typeof e.getAttribute===i?b.prop(e,n,r):(a=1!==u||!b.isXMLDoc(e),a&&(n=n.toLowerCase(),o=b.attrHooks[n]||(J.test(n)?z:I)),r===t?o&&a&&\"get\"in o&&null!==(s=o.get(e,n))?s:(typeof e.getAttribute!==i&&(s=e.getAttribute(n)),null==s?t:s):null!==r?o&&a&&\"set\"in o&&(s=o.set(e,r,n))!==t?s:(e.setAttribute(n,r+\"\"),r):(b.removeAttr(e,n),t))},removeAttr:function(e,t){var n,r,i=0,o=t&&t.match(w);if(o&&1===e.nodeType)while(n=o[i++])r=b.propFix[n]||n,J.test(n)?!Q&&G.test(n)?e[b.camelCase(\"default-\"+n)]=e[r]=!1:e[r]=!1:b.attr(e,n,\"\"),e.removeAttribute(Q?n:r)},attrHooks:{type:{set:function(e,t){if(!b.support.radioValue&&\"radio\"===t&&b.nodeName(e,\"input\")){var n=e.value;return e.setAttribute(\"type\",t),n&&(e.value=n),t}}}},propFix:{tabindex:\"tabIndex\",readonly:\"readOnly\",\"for\":\"htmlFor\",\"class\":\"className\",maxlength:\"maxLength\",cellspacing:\"cellSpacing\",cellpadding:\"cellPadding\",rowspan:\"rowSpan\",colspan:\"colSpan\",usemap:\"useMap\",frameborder:\"frameBorder\",contenteditable:\"contentEditable\"},prop:function(e,n,r){var i,o,a,s=e.nodeType;if(e&&3!==s&&8!==s&&2!==s)return a=1!==s||!b.isXMLDoc(e),a&&(n=b.propFix[n]||n,o=b.propHooks[n]),r!==t?o&&\"set\"in o&&(i=o.set(e,r,n))!==t?i:e[n]=r:o&&\"get\"in o&&null!==(i=o.get(e,n))?i:e[n]},propHooks:{tabIndex:{get:function(e){var n=e.getAttributeNode(\"tabindex\");return n&&n.specified?parseInt(n.value,10):V.test(e.nodeName)||Y.test(e.nodeName)&&e.href?0:t}}}}),z={get:function(e,n){var r=b.prop(e,n),i=\"boolean\"==typeof r&&e.getAttribute(n),o=\"boolean\"==typeof r?K&&Q?null!=i:G.test(n)?e[b.camelCase(\"default-\"+n)]:!!i:e.getAttributeNode(n);return o&&o.value!==!1?n.toLowerCase():t},set:function(e,t,n){return t===!1?b.removeAttr(e,n):K&&Q||!G.test(n)?e.setAttribute(!Q&&b.propFix[n]||n,n):e[b.camelCase(\"default-\"+n)]=e[n]=!0,n}},K&&Q||(b.attrHooks.value={get:function(e,n){var r=e.getAttributeNode(n);return b.nodeName(e,\"input\")?e.defaultValue:r&&r.specified?r.value:t},set:function(e,n,r){return b.nodeName(e,\"input\")?(e.defaultValue=n,t):I&&I.set(e,n,r)}}),Q||(I=b.valHooks.button={get:function(e,n){var r=e.getAttributeNode(n);return r&&(\"id\"===n||\"name\"===n||\"coords\"===n?\"\"!==r.value:r.specified)?r.value:t},set:function(e,n,r){var i=e.getAttributeNode(r);return i||e.setAttributeNode(i=e.ownerDocument.createAttribute(r)),i.value=n+=\"\",\"value\"===r||n===e.getAttribute(r)?n:t}},b.attrHooks.contenteditable={get:I.get,set:function(e,t,n){I.set(e,\"\"===t?!1:t,n)}},b.each([\"width\",\"height\"],function(e,n){b.attrHooks[n]=b.extend(b.attrHooks[n],{set:function(e,r){return\"\"===r?(e.setAttribute(n,\"auto\"),r):t}})})),b.support.hrefNormalized||(b.each([\"href\",\"src\",\"width\",\"height\"],function(e,n){b.attrHooks[n]=b.extend(b.attrHooks[n],{get:function(e){var r=e.getAttribute(n,2);return null==r?t:r}})}),b.each([\"href\",\"src\"],function(e,t){b.propHooks[t]={get:function(e){return e.getAttribute(t,4)}}})),b.support.style||(b.attrHooks.style={get:function(e){return e.style.cssText||t},set:function(e,t){return e.style.cssText=t+\"\"}}),b.support.optSelected||(b.propHooks.selected=b.extend(b.propHooks.selected,{get:function(e){var t=e.parentNode;return t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex),null}})),b.support.enctype||(b.propFix.enctype=\"encoding\"),b.support.checkOn||b.each([\"radio\",\"checkbox\"],function(){b.valHooks[this]={get:function(e){return null===e.getAttribute(\"value\")?\"on\":e.value}}}),b.each([\"radio\",\"checkbox\"],function(){b.valHooks[this]=b.extend(b.valHooks[this],{set:function(e,n){return b.isArray(n)?e.checked=b.inArray(b(e).val(),n)>=0:t}})});var Z=/^(?:input|select|textarea)$/i,et=/^key/,tt=/^(?:mouse|contextmenu)|click/,nt=/^(?:focusinfocus|focusoutblur)$/,rt=/^([^.]*)(?:\\.(.+)|)$/;function it(){return!0}function ot(){return!1}b.event={global:{},add:function(e,n,r,o,a){var s,u,l,c,p,f,d,h,g,m,y,v=b._data(e);if(v){r.handler&&(c=r,r=c.handler,a=c.selector),r.guid||(r.guid=b.guid++),(u=v.events)||(u=v.events={}),(f=v.handle)||(f=v.handle=function(e){return typeof b===i||e&&b.event.triggered===e.type?t:b.event.dispatch.apply(f.elem,arguments)},f.elem=e),n=(n||\"\").match(w)||[\"\"],l=n.length;while(l--)s=rt.exec(n[l])||[],g=y=s[1],m=(s[2]||\"\").split(\".\").sort(),p=b.event.special[g]||{},g=(a?p.delegateType:p.bindType)||g,p=b.event.special[g]||{},d=b.extend({type:g,origType:y,data:o,handler:r,guid:r.guid,selector:a,needsContext:a&&b.expr.match.needsContext.test(a),namespace:m.join(\".\")},c),(h=u[g])||(h=u[g]=[],h.delegateCount=0,p.setup&&p.setup.call(e,o,m,f)!==!1||(e.addEventListener?e.addEventListener(g,f,!1):e.attachEvent&&e.attachEvent(\"on\"+g,f))),p.add&&(p.add.call(e,d),d.handler.guid||(d.handler.guid=r.guid)),a?h.splice(h.delegateCount++,0,d):h.push(d),b.event.global[g]=!0;e=null}},remove:function(e,t,n,r,i){var o,a,s,u,l,c,p,f,d,h,g,m=b.hasData(e)&&b._data(e);if(m&&(c=m.events)){t=(t||\"\").match(w)||[\"\"],l=t.length;while(l--)if(s=rt.exec(t[l])||[],d=g=s[1],h=(s[2]||\"\").split(\".\").sort(),d){p=b.event.special[d]||{},d=(r?p.delegateType:p.bindType)||d,f=c[d]||[],s=s[2]&&RegExp(\"(^|\\\\.)\"+h.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"),u=o=f.length;while(o--)a=f[o],!i&&g!==a.origType||n&&n.guid!==a.guid||s&&!s.test(a.namespace)||r&&r!==a.selector&&(\"**\"!==r||!a.selector)||(f.splice(o,1),a.selector&&f.delegateCount--,p.remove&&p.remove.call(e,a));u&&!f.length&&(p.teardown&&p.teardown.call(e,h,m.handle)!==!1||b.removeEvent(e,d,m.handle),delete c[d])}else for(d in c)b.event.remove(e,d+t[l],n,r,!0);b.isEmptyObject(c)&&(delete m.handle,b._removeData(e,\"events\"))}},trigger:function(n,r,i,a){var s,u,l,c,p,f,d,h=[i||o],g=y.call(n,\"type\")?n.type:n,m=y.call(n,\"namespace\")?n.namespace.split(\".\"):[];if(l=f=i=i||o,3!==i.nodeType&&8!==i.nodeType&&!nt.test(g+b.event.triggered)&&(g.indexOf(\".\")>=0&&(m=g.split(\".\"),g=m.shift(),m.sort()),u=0>g.indexOf(\":\")&&\"on\"+g,n=n[b.expando]?n:new b.Event(g,\"object\"==typeof n&&n),n.isTrigger=!0,n.namespace=m.join(\".\"),n.namespace_re=n.namespace?RegExp(\"(^|\\\\.)\"+m.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"):null,n.result=t,n.target||(n.target=i),r=null==r?[n]:b.makeArray(r,[n]),p=b.event.special[g]||{},a||!p.trigger||p.trigger.apply(i,r)!==!1)){if(!a&&!p.noBubble&&!b.isWindow(i)){for(c=p.delegateType||g,nt.test(c+g)||(l=l.parentNode);l;l=l.parentNode)h.push(l),f=l;f===(i.ownerDocument||o)&&h.push(f.defaultView||f.parentWindow||e)}d=0;while((l=h[d++])&&!n.isPropagationStopped())n.type=d>1?c:p.bindType||g,s=(b._data(l,\"events\")||{})[n.type]&&b._data(l,\"handle\"),s&&s.apply(l,r),s=u&&l[u],s&&b.acceptData(l)&&s.apply&&s.apply(l,r)===!1&&n.preventDefault();if(n.type=g,!(a||n.isDefaultPrevented()||p._default&&p._default.apply(i.ownerDocument,r)!==!1||\"click\"===g&&b.nodeName(i,\"a\")||!b.acceptData(i)||!u||!i[g]||b.isWindow(i))){f=i[u],f&&(i[u]=null),b.event.triggered=g;try{i[g]()}catch(v){}b.event.triggered=t,f&&(i[u]=f)}return n.result}},dispatch:function(e){e=b.event.fix(e);var n,r,i,o,a,s=[],u=h.call(arguments),l=(b._data(this,\"events\")||{})[e.type]||[],c=b.event.special[e.type]||{};if(u[0]=e,e.delegateTarget=this,!c.preDispatch||c.preDispatch.call(this,e)!==!1){s=b.event.handlers.call(this,e,l),n=0;while((o=s[n++])&&!e.isPropagationStopped()){e.currentTarget=o.elem,a=0;while((i=o.handlers[a++])&&!e.isImmediatePropagationStopped())(!e.namespace_re||e.namespace_re.test(i.namespace))&&(e.handleObj=i,e.data=i.data,r=((b.event.special[i.origType]||{}).handle||i.handler).apply(o.elem,u),r!==t&&(e.result=r)===!1&&(e.preventDefault(),e.stopPropagation()))}return c.postDispatch&&c.postDispatch.call(this,e),e.result}},handlers:function(e,n){var r,i,o,a,s=[],u=n.delegateCount,l=e.target;if(u&&l.nodeType&&(!e.button||\"click\"!==e.type))for(;l!=this;l=l.parentNode||this)if(1===l.nodeType&&(l.disabled!==!0||\"click\"!==e.type)){for(o=[],a=0;u>a;a++)i=n[a],r=i.selector+\" \",o[r]===t&&(o[r]=i.needsContext?b(r,this).index(l)>=0:b.find(r,this,null,[l]).length),o[r]&&o.push(i);o.length&&s.push({elem:l,handlers:o})}return n.length>u&&s.push({elem:this,handlers:n.slice(u)}),s},fix:function(e){if(e[b.expando])return e;var t,n,r,i=e.type,a=e,s=this.fixHooks[i];s||(this.fixHooks[i]=s=tt.test(i)?this.mouseHooks:et.test(i)?this.keyHooks:{}),r=s.props?this.props.concat(s.props):this.props,e=new b.Event(a),t=r.length;while(t--)n=r[t],e[n]=a[n];return e.target||(e.target=a.srcElement||o),3===e.target.nodeType&&(e.target=e.target.parentNode),e.metaKey=!!e.metaKey,s.filter?s.filter(e,a):e},props:\"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which\".split(\" \"),fixHooks:{},keyHooks:{props:\"char charCode key keyCode\".split(\" \"),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:\"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement\".split(\" \"),filter:function(e,n){var r,i,a,s=n.button,u=n.fromElement;return null==e.pageX&&null!=n.clientX&&(i=e.target.ownerDocument||o,a=i.documentElement,r=i.body,e.pageX=n.clientX+(a&&a.scrollLeft||r&&r.scrollLeft||0)-(a&&a.clientLeft||r&&r.clientLeft||0),e.pageY=n.clientY+(a&&a.scrollTop||r&&r.scrollTop||0)-(a&&a.clientTop||r&&r.clientTop||0)),!e.relatedTarget&&u&&(e.relatedTarget=u===e.target?n.toElement:u),e.which||s===t||(e.which=1&s?1:2&s?3:4&s?2:0),e}},special:{load:{noBubble:!0},click:{trigger:function(){return b.nodeName(this,\"input\")&&\"checkbox\"===this.type&&this.click?(this.click(),!1):t}},focus:{trigger:function(){if(this!==o.activeElement&&this.focus)try{return this.focus(),!1}catch(e){}},delegateType:\"focusin\"},blur:{trigger:function(){return this===o.activeElement&&this.blur?(this.blur(),!1):t},delegateType:\"focusout\"},beforeunload:{postDispatch:function(e){e.result!==t&&(e.originalEvent.returnValue=e.result)}}},simulate:function(e,t,n,r){var i=b.extend(new b.Event,n,{type:e,isSimulated:!0,originalEvent:{}});r?b.event.trigger(i,null,t):b.event.dispatch.call(t,i),i.isDefaultPrevented()&&n.preventDefault()}},b.removeEvent=o.removeEventListener?function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n,!1)}:function(e,t,n){var r=\"on\"+t;e.detachEvent&&(typeof e[r]===i&&(e[r]=null),e.detachEvent(r,n))},b.Event=function(e,n){return this instanceof b.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||e.returnValue===!1||e.getPreventDefault&&e.getPreventDefault()?it:ot):this.type=e,n&&b.extend(this,n),this.timeStamp=e&&e.timeStamp||b.now(),this[b.expando]=!0,t):new b.Event(e,n)},b.Event.prototype={isDefaultPrevented:ot,isPropagationStopped:ot,isImmediatePropagationStopped:ot,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=it,e&&(e.preventDefault?e.preventDefault():e.returnValue=!1)},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=it,e&&(e.stopPropagation&&e.stopPropagation(),e.cancelBubble=!0)},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=it,this.stopPropagation()}},b.each({mouseenter:\"mouseover\",mouseleave:\"mouseout\"},function(e,t){b.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;\nreturn(!i||i!==r&&!b.contains(r,i))&&(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),b.support.submitBubbles||(b.event.special.submit={setup:function(){return b.nodeName(this,\"form\")?!1:(b.event.add(this,\"click._submit keypress._submit\",function(e){var n=e.target,r=b.nodeName(n,\"input\")||b.nodeName(n,\"button\")?n.form:t;r&&!b._data(r,\"submitBubbles\")&&(b.event.add(r,\"submit._submit\",function(e){e._submit_bubble=!0}),b._data(r,\"submitBubbles\",!0))}),t)},postDispatch:function(e){e._submit_bubble&&(delete e._submit_bubble,this.parentNode&&!e.isTrigger&&b.event.simulate(\"submit\",this.parentNode,e,!0))},teardown:function(){return b.nodeName(this,\"form\")?!1:(b.event.remove(this,\"._submit\"),t)}}),b.support.changeBubbles||(b.event.special.change={setup:function(){return Z.test(this.nodeName)?((\"checkbox\"===this.type||\"radio\"===this.type)&&(b.event.add(this,\"propertychange._change\",function(e){\"checked\"===e.originalEvent.propertyName&&(this._just_changed=!0)}),b.event.add(this,\"click._change\",function(e){this._just_changed&&!e.isTrigger&&(this._just_changed=!1),b.event.simulate(\"change\",this,e,!0)})),!1):(b.event.add(this,\"beforeactivate._change\",function(e){var t=e.target;Z.test(t.nodeName)&&!b._data(t,\"changeBubbles\")&&(b.event.add(t,\"change._change\",function(e){!this.parentNode||e.isSimulated||e.isTrigger||b.event.simulate(\"change\",this.parentNode,e,!0)}),b._data(t,\"changeBubbles\",!0))}),t)},handle:function(e){var n=e.target;return this!==n||e.isSimulated||e.isTrigger||\"radio\"!==n.type&&\"checkbox\"!==n.type?e.handleObj.handler.apply(this,arguments):t},teardown:function(){return b.event.remove(this,\"._change\"),!Z.test(this.nodeName)}}),b.support.focusinBubbles||b.each({focus:\"focusin\",blur:\"focusout\"},function(e,t){var n=0,r=function(e){b.event.simulate(t,e.target,b.event.fix(e),!0)};b.event.special[t]={setup:function(){0===n++&&o.addEventListener(e,r,!0)},teardown:function(){0===--n&&o.removeEventListener(e,r,!0)}}}),b.fn.extend({on:function(e,n,r,i,o){var a,s;if(\"object\"==typeof e){\"string\"!=typeof n&&(r=r||n,n=t);for(a in e)this.on(a,n,r,e[a],o);return this}if(null==r&&null==i?(i=n,r=n=t):null==i&&(\"string\"==typeof n?(i=r,r=t):(i=r,r=n,n=t)),i===!1)i=ot;else if(!i)return this;return 1===o&&(s=i,i=function(e){return b().off(e),s.apply(this,arguments)},i.guid=s.guid||(s.guid=b.guid++)),this.each(function(){b.event.add(this,e,i,r,n)})},one:function(e,t,n,r){return this.on(e,t,n,r,1)},off:function(e,n,r){var i,o;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,b(e.delegateTarget).off(i.namespace?i.origType+\".\"+i.namespace:i.origType,i.selector,i.handler),this;if(\"object\"==typeof e){for(o in e)this.off(o,n,e[o]);return this}return(n===!1||\"function\"==typeof n)&&(r=n,n=t),r===!1&&(r=ot),this.each(function(){b.event.remove(this,e,r,n)})},bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,\"**\"):this.off(t,e||\"**\",n)},trigger:function(e,t){return this.each(function(){b.event.trigger(e,t,this)})},triggerHandler:function(e,n){var r=this[0];return r?b.event.trigger(e,n,r,!0):t}}),function(e,t){var n,r,i,o,a,s,u,l,c,p,f,d,h,g,m,y,v,x=\"sizzle\"+-new Date,w=e.document,T={},N=0,C=0,k=it(),E=it(),S=it(),A=typeof t,j=1<<31,D=[],L=D.pop,H=D.push,q=D.slice,M=D.indexOf||function(e){var t=0,n=this.length;for(;n>t;t++)if(this[t]===e)return t;return-1},_=\"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",F=\"(?:\\\\\\\\.|[\\\\w-]|[^\\\\x00-\\\\xa0])+\",O=F.replace(\"w\",\"w#\"),B=\"([*^$|!~]?=)\",P=\"\\\\[\"+_+\"*(\"+F+\")\"+_+\"*(?:\"+B+_+\"*(?:(['\\\"])((?:\\\\\\\\.|[^\\\\\\\\])*?)\\\\3|(\"+O+\")|)|)\"+_+\"*\\\\]\",R=\":(\"+F+\")(?:\\\\(((['\\\"])((?:\\\\\\\\.|[^\\\\\\\\])*?)\\\\3|((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\"+P.replace(3,8)+\")*)|.*)\\\\)|)\",W=RegExp(\"^\"+_+\"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\"+_+\"+$\",\"g\"),$=RegExp(\"^\"+_+\"*,\"+_+\"*\"),I=RegExp(\"^\"+_+\"*([\\\\x20\\\\t\\\\r\\\\n\\\\f>+~])\"+_+\"*\"),z=RegExp(R),X=RegExp(\"^\"+O+\"$\"),U={ID:RegExp(\"^#(\"+F+\")\"),CLASS:RegExp(\"^\\\\.(\"+F+\")\"),NAME:RegExp(\"^\\\\[name=['\\\"]?(\"+F+\")['\\\"]?\\\\]\"),TAG:RegExp(\"^(\"+F.replace(\"w\",\"w*\")+\")\"),ATTR:RegExp(\"^\"+P),PSEUDO:RegExp(\"^\"+R),CHILD:RegExp(\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\"+_+\"*(even|odd|(([+-]|)(\\\\d*)n|)\"+_+\"*(?:([+-]|)\"+_+\"*(\\\\d+)|))\"+_+\"*\\\\)|)\",\"i\"),needsContext:RegExp(\"^\"+_+\"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\"+_+\"*((?:-\\\\d)?\\\\d*)\"+_+\"*\\\\)|)(?=[^-]|$)\",\"i\")},V=/[\\x20\\t\\r\\n\\f]*[+~]/,Y=/^[^{]+\\{\\s*\\[native code/,J=/^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,G=/^(?:input|select|textarea|button)$/i,Q=/^h\\d$/i,K=/'|\\\\/g,Z=/\\=[\\x20\\t\\r\\n\\f]*([^'\"\\]]*)[\\x20\\t\\r\\n\\f]*\\]/g,et=/\\\\([\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|.)/g,tt=function(e,t){var n=\"0x\"+t-65536;return n!==n?t:0>n?String.fromCharCode(n+65536):String.fromCharCode(55296|n>>10,56320|1023&n)};try{q.call(w.documentElement.childNodes,0)[0].nodeType}catch(nt){q=function(e){var t,n=[];while(t=this[e++])n.push(t);return n}}function rt(e){return Y.test(e+\"\")}function it(){var e,t=[];return e=function(n,r){return t.push(n+=\" \")>i.cacheLength&&delete e[t.shift()],e[n]=r}}function ot(e){return e[x]=!0,e}function at(e){var t=p.createElement(\"div\");try{return e(t)}catch(n){return!1}finally{t=null}}function st(e,t,n,r){var i,o,a,s,u,l,f,g,m,v;if((t?t.ownerDocument||t:w)!==p&&c(t),t=t||p,n=n||[],!e||\"string\"!=typeof e)return n;if(1!==(s=t.nodeType)&&9!==s)return[];if(!d&&!r){if(i=J.exec(e))if(a=i[1]){if(9===s){if(o=t.getElementById(a),!o||!o.parentNode)return n;if(o.id===a)return n.push(o),n}else if(t.ownerDocument&&(o=t.ownerDocument.getElementById(a))&&y(t,o)&&o.id===a)return n.push(o),n}else{if(i[2])return H.apply(n,q.call(t.getElementsByTagName(e),0)),n;if((a=i[3])&&T.getByClassName&&t.getElementsByClassName)return H.apply(n,q.call(t.getElementsByClassName(a),0)),n}if(T.qsa&&!h.test(e)){if(f=!0,g=x,m=t,v=9===s&&e,1===s&&\"object\"!==t.nodeName.toLowerCase()){l=ft(e),(f=t.getAttribute(\"id\"))?g=f.replace(K,\"\\\\$&\"):t.setAttribute(\"id\",g),g=\"[id='\"+g+\"'] \",u=l.length;while(u--)l[u]=g+dt(l[u]);m=V.test(e)&&t.parentNode||t,v=l.join(\",\")}if(v)try{return H.apply(n,q.call(m.querySelectorAll(v),0)),n}catch(b){}finally{f||t.removeAttribute(\"id\")}}}return wt(e.replace(W,\"$1\"),t,n,r)}a=st.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return t?\"HTML\"!==t.nodeName:!1},c=st.setDocument=function(e){var n=e?e.ownerDocument||e:w;return n!==p&&9===n.nodeType&&n.documentElement?(p=n,f=n.documentElement,d=a(n),T.tagNameNoComments=at(function(e){return e.appendChild(n.createComment(\"\")),!e.getElementsByTagName(\"*\").length}),T.attributes=at(function(e){e.innerHTML=\"<select></select>\";var t=typeof e.lastChild.getAttribute(\"multiple\");return\"boolean\"!==t&&\"string\"!==t}),T.getByClassName=at(function(e){return e.innerHTML=\"<div class='hidden e'></div><div class='hidden'></div>\",e.getElementsByClassName&&e.getElementsByClassName(\"e\").length?(e.lastChild.className=\"e\",2===e.getElementsByClassName(\"e\").length):!1}),T.getByName=at(function(e){e.id=x+0,e.innerHTML=\"<a name='\"+x+\"'></a><div name='\"+x+\"'></div>\",f.insertBefore(e,f.firstChild);var t=n.getElementsByName&&n.getElementsByName(x).length===2+n.getElementsByName(x+0).length;return T.getIdNotName=!n.getElementById(x),f.removeChild(e),t}),i.attrHandle=at(function(e){return e.innerHTML=\"<a href='#'></a>\",e.firstChild&&typeof e.firstChild.getAttribute!==A&&\"#\"===e.firstChild.getAttribute(\"href\")})?{}:{href:function(e){return e.getAttribute(\"href\",2)},type:function(e){return e.getAttribute(\"type\")}},T.getIdNotName?(i.find.ID=function(e,t){if(typeof t.getElementById!==A&&!d){var n=t.getElementById(e);return n&&n.parentNode?[n]:[]}},i.filter.ID=function(e){var t=e.replace(et,tt);return function(e){return e.getAttribute(\"id\")===t}}):(i.find.ID=function(e,n){if(typeof n.getElementById!==A&&!d){var r=n.getElementById(e);return r?r.id===e||typeof r.getAttributeNode!==A&&r.getAttributeNode(\"id\").value===e?[r]:t:[]}},i.filter.ID=function(e){var t=e.replace(et,tt);return function(e){var n=typeof e.getAttributeNode!==A&&e.getAttributeNode(\"id\");return n&&n.value===t}}),i.find.TAG=T.tagNameNoComments?function(e,n){return typeof n.getElementsByTagName!==A?n.getElementsByTagName(e):t}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if(\"*\"===e){while(n=o[i++])1===n.nodeType&&r.push(n);return r}return o},i.find.NAME=T.getByName&&function(e,n){return typeof n.getElementsByName!==A?n.getElementsByName(name):t},i.find.CLASS=T.getByClassName&&function(e,n){return typeof n.getElementsByClassName===A||d?t:n.getElementsByClassName(e)},g=[],h=[\":focus\"],(T.qsa=rt(n.querySelectorAll))&&(at(function(e){e.innerHTML=\"<select><option selected=''></option></select>\",e.querySelectorAll(\"[selected]\").length||h.push(\"\\\\[\"+_+\"*(?:checked|disabled|ismap|multiple|readonly|selected|value)\"),e.querySelectorAll(\":checked\").length||h.push(\":checked\")}),at(function(e){e.innerHTML=\"<input type='hidden' i=''/>\",e.querySelectorAll(\"[i^='']\").length&&h.push(\"[*^$]=\"+_+\"*(?:\\\"\\\"|'')\"),e.querySelectorAll(\":enabled\").length||h.push(\":enabled\",\":disabled\"),e.querySelectorAll(\"*,:x\"),h.push(\",.*:\")})),(T.matchesSelector=rt(m=f.matchesSelector||f.mozMatchesSelector||f.webkitMatchesSelector||f.oMatchesSelector||f.msMatchesSelector))&&at(function(e){T.disconnectedMatch=m.call(e,\"div\"),m.call(e,\"[s!='']:x\"),g.push(\"!=\",R)}),h=RegExp(h.join(\"|\")),g=RegExp(g.join(\"|\")),y=rt(f.contains)||f.compareDocumentPosition?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)while(t=t.parentNode)if(t===e)return!0;return!1},v=f.compareDocumentPosition?function(e,t){var r;return e===t?(u=!0,0):(r=t.compareDocumentPosition&&e.compareDocumentPosition&&e.compareDocumentPosition(t))?1&r||e.parentNode&&11===e.parentNode.nodeType?e===n||y(w,e)?-1:t===n||y(w,t)?1:0:4&r?-1:1:e.compareDocumentPosition?-1:1}:function(e,t){var r,i=0,o=e.parentNode,a=t.parentNode,s=[e],l=[t];if(e===t)return u=!0,0;if(!o||!a)return e===n?-1:t===n?1:o?-1:a?1:0;if(o===a)return ut(e,t);r=e;while(r=r.parentNode)s.unshift(r);r=t;while(r=r.parentNode)l.unshift(r);while(s[i]===l[i])i++;return i?ut(s[i],l[i]):s[i]===w?-1:l[i]===w?1:0},u=!1,[0,0].sort(v),T.detectDuplicates=u,p):p},st.matches=function(e,t){return st(e,null,null,t)},st.matchesSelector=function(e,t){if((e.ownerDocument||e)!==p&&c(e),t=t.replace(Z,\"='$1']\"),!(!T.matchesSelector||d||g&&g.test(t)||h.test(t)))try{var n=m.call(e,t);if(n||T.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(r){}return st(t,p,null,[e]).length>0},st.contains=function(e,t){return(e.ownerDocument||e)!==p&&c(e),y(e,t)},st.attr=function(e,t){var n;return(e.ownerDocument||e)!==p&&c(e),d||(t=t.toLowerCase()),(n=i.attrHandle[t])?n(e):d||T.attributes?e.getAttribute(t):((n=e.getAttributeNode(t))||e.getAttribute(t))&&e[t]===!0?t:n&&n.specified?n.value:null},st.error=function(e){throw Error(\"Syntax error, unrecognized expression: \"+e)},st.uniqueSort=function(e){var t,n=[],r=1,i=0;if(u=!T.detectDuplicates,e.sort(v),u){for(;t=e[r];r++)t===e[r-1]&&(i=n.push(r));while(i--)e.splice(n[i],1)}return e};function ut(e,t){var n=t&&e,r=n&&(~t.sourceIndex||j)-(~e.sourceIndex||j);if(r)return r;if(n)while(n=n.nextSibling)if(n===t)return-1;return e?1:-1}function lt(e){return function(t){var n=t.nodeName.toLowerCase();return\"input\"===n&&t.type===e}}function ct(e){return function(t){var n=t.nodeName.toLowerCase();return(\"input\"===n||\"button\"===n)&&t.type===e}}function pt(e){return ot(function(t){return t=+t,ot(function(n,r){var i,o=e([],n.length,t),a=o.length;while(a--)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))})})}o=st.getText=function(e){var t,n=\"\",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if(\"string\"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r];r++)n+=o(t);return n},i=st.selectors={cacheLength:50,createPseudo:ot,match:U,find:{},relative:{\">\":{dir:\"parentNode\",first:!0},\" \":{dir:\"parentNode\"},\"+\":{dir:\"previousSibling\",first:!0},\"~\":{dir:\"previousSibling\"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(et,tt),e[3]=(e[4]||e[5]||\"\").replace(et,tt),\"~=\"===e[2]&&(e[3]=\" \"+e[3]+\" \"),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),\"nth\"===e[1].slice(0,3)?(e[3]||st.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*(\"even\"===e[3]||\"odd\"===e[3])),e[5]=+(e[7]+e[8]||\"odd\"===e[3])):e[3]&&st.error(e[0]),e},PSEUDO:function(e){var t,n=!e[5]&&e[2];return U.CHILD.test(e[0])?null:(e[4]?e[2]=e[4]:n&&z.test(n)&&(t=ft(n,!0))&&(t=n.indexOf(\")\",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){return\"*\"===e?function(){return!0}:(e=e.replace(et,tt).toLowerCase(),function(t){return t.nodeName&&t.nodeName.toLowerCase()===e})},CLASS:function(e){var t=k[e+\" \"];return t||(t=RegExp(\"(^|\"+_+\")\"+e+\"(\"+_+\"|$)\"))&&k(e,function(e){return t.test(e.className||typeof e.getAttribute!==A&&e.getAttribute(\"class\")||\"\")})},ATTR:function(e,t,n){return function(r){var i=st.attr(r,e);return null==i?\"!=\"===t:t?(i+=\"\",\"=\"===t?i===n:\"!=\"===t?i!==n:\"^=\"===t?n&&0===i.indexOf(n):\"*=\"===t?n&&i.indexOf(n)>-1:\"$=\"===t?n&&i.slice(-n.length)===n:\"~=\"===t?(\" \"+i+\" \").indexOf(n)>-1:\"|=\"===t?i===n||i.slice(0,n.length+1)===n+\"-\":!1):!0}},CHILD:function(e,t,n,r,i){var o=\"nth\"!==e.slice(0,3),a=\"last\"!==e.slice(-4),s=\"of-type\"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,u){var l,c,p,f,d,h,g=o!==a?\"nextSibling\":\"previousSibling\",m=t.parentNode,y=s&&t.nodeName.toLowerCase(),v=!u&&!s;if(m){if(o){while(g){p=t;while(p=p[g])if(s?p.nodeName.toLowerCase()===y:1===p.nodeType)return!1;h=g=\"only\"===e&&!h&&\"nextSibling\"}return!0}if(h=[a?m.firstChild:m.lastChild],a&&v){c=m[x]||(m[x]={}),l=c[e]||[],d=l[0]===N&&l[1],f=l[0]===N&&l[2],p=d&&m.childNodes[d];while(p=++d&&p&&p[g]||(f=d=0)||h.pop())if(1===p.nodeType&&++f&&p===t){c[e]=[N,d,f];break}}else if(v&&(l=(t[x]||(t[x]={}))[e])&&l[0]===N)f=l[1];else while(p=++d&&p&&p[g]||(f=d=0)||h.pop())if((s?p.nodeName.toLowerCase()===y:1===p.nodeType)&&++f&&(v&&((p[x]||(p[x]={}))[e]=[N,f]),p===t))break;return f-=i,f===r||0===f%r&&f/r>=0}}},PSEUDO:function(e,t){var n,r=i.pseudos[e]||i.setFilters[e.toLowerCase()]||st.error(\"unsupported pseudo: \"+e);return r[x]?r(t):r.length>1?(n=[e,e,\"\",t],i.setFilters.hasOwnProperty(e.toLowerCase())?ot(function(e,n){var i,o=r(e,t),a=o.length;while(a--)i=M.call(e,o[a]),e[i]=!(n[i]=o[a])}):function(e){return r(e,0,n)}):r}},pseudos:{not:ot(function(e){var t=[],n=[],r=s(e.replace(W,\"$1\"));return r[x]?ot(function(e,t,n,i){var o,a=r(e,null,i,[]),s=e.length;while(s--)(o=a[s])&&(e[s]=!(t[s]=o))}):function(e,i,o){return t[0]=e,r(t,null,o,n),!n.pop()}}),has:ot(function(e){return function(t){return st(e,t).length>0}}),contains:ot(function(e){return function(t){return(t.textContent||t.innerText||o(t)).indexOf(e)>-1}}),lang:ot(function(e){return X.test(e||\"\")||st.error(\"unsupported lang: \"+e),e=e.replace(et,tt).toLowerCase(),function(t){var n;do if(n=d?t.getAttribute(\"xml:lang\")||t.getAttribute(\"lang\"):t.lang)return n=n.toLowerCase(),n===e||0===n.indexOf(e+\"-\");while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===f},focus:function(e){return e===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return e.disabled===!1},disabled:function(e){return e.disabled===!0},checked:function(e){var t=e.nodeName.toLowerCase();return\"input\"===t&&!!e.checked||\"option\"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeName>\"@\"||3===e.nodeType||4===e.nodeType)return!1;return!0},parent:function(e){return!i.pseudos.empty(e)},header:function(e){return Q.test(e.nodeName)},input:function(e){return G.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return\"input\"===t&&\"button\"===e.type||\"button\"===t},text:function(e){var t;return\"input\"===e.nodeName.toLowerCase()&&\"text\"===e.type&&(null==(t=e.getAttribute(\"type\"))||t.toLowerCase()===e.type)},first:pt(function(){return[0]}),last:pt(function(e,t){return[t-1]}),eq:pt(function(e,t,n){return[0>n?n+t:n]}),even:pt(function(e,t){var n=0;for(;t>n;n+=2)e.push(n);return e}),odd:pt(function(e,t){var n=1;for(;t>n;n+=2)e.push(n);return e}),lt:pt(function(e,t,n){var r=0>n?n+t:n;for(;--r>=0;)e.push(r);return e}),gt:pt(function(e,t,n){var r=0>n?n+t:n;for(;t>++r;)e.push(r);return e})}};for(n in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[n]=lt(n);for(n in{submit:!0,reset:!0})i.pseudos[n]=ct(n);function ft(e,t){var n,r,o,a,s,u,l,c=E[e+\" \"];if(c)return t?0:c.slice(0);s=e,u=[],l=i.preFilter;while(s){(!n||(r=$.exec(s)))&&(r&&(s=s.slice(r[0].length)||s),u.push(o=[])),n=!1,(r=I.exec(s))&&(n=r.shift(),o.push({value:n,type:r[0].replace(W,\" \")}),s=s.slice(n.length));for(a in i.filter)!(r=U[a].exec(s))||l[a]&&!(r=l[a](r))||(n=r.shift(),o.push({value:n,type:a,matches:r}),s=s.slice(n.length));if(!n)break}return t?s.length:s?st.error(e):E(e,u).slice(0)}function dt(e){var t=0,n=e.length,r=\"\";for(;n>t;t++)r+=e[t].value;return r}function ht(e,t,n){var i=t.dir,o=n&&\"parentNode\"===i,a=C++;return t.first?function(t,n,r){while(t=t[i])if(1===t.nodeType||o)return e(t,n,r)}:function(t,n,s){var u,l,c,p=N+\" \"+a;if(s){while(t=t[i])if((1===t.nodeType||o)&&e(t,n,s))return!0}else while(t=t[i])if(1===t.nodeType||o)if(c=t[x]||(t[x]={}),(l=c[i])&&l[0]===p){if((u=l[1])===!0||u===r)return u===!0}else if(l=c[i]=[p],l[1]=e(t,n,s)||r,l[1]===!0)return!0}}function gt(e){return e.length>1?function(t,n,r){var i=e.length;while(i--)if(!e[i](t,n,r))return!1;return!0}:e[0]}function mt(e,t,n,r,i){var o,a=[],s=0,u=e.length,l=null!=t;for(;u>s;s++)(o=e[s])&&(!n||n(o,r,i))&&(a.push(o),l&&t.push(s));return a}function yt(e,t,n,r,i,o){return r&&!r[x]&&(r=yt(r)),i&&!i[x]&&(i=yt(i,o)),ot(function(o,a,s,u){var l,c,p,f=[],d=[],h=a.length,g=o||xt(t||\"*\",s.nodeType?[s]:s,[]),m=!e||!o&&t?g:mt(g,f,e,s,u),y=n?i||(o?e:h||r)?[]:a:m;if(n&&n(m,y,s,u),r){l=mt(y,d),r(l,[],s,u),c=l.length;while(c--)(p=l[c])&&(y[d[c]]=!(m[d[c]]=p))}if(o){if(i||e){if(i){l=[],c=y.length;while(c--)(p=y[c])&&l.push(m[c]=p);i(null,y=[],l,u)}c=y.length;while(c--)(p=y[c])&&(l=i?M.call(o,p):f[c])>-1&&(o[l]=!(a[l]=p))}}else y=mt(y===a?y.splice(h,y.length):y),i?i(null,a,y,u):H.apply(a,y)})}function vt(e){var t,n,r,o=e.length,a=i.relative[e[0].type],s=a||i.relative[\" \"],u=a?1:0,c=ht(function(e){return e===t},s,!0),p=ht(function(e){return M.call(t,e)>-1},s,!0),f=[function(e,n,r){return!a&&(r||n!==l)||((t=n).nodeType?c(e,n,r):p(e,n,r))}];for(;o>u;u++)if(n=i.relative[e[u].type])f=[ht(gt(f),n)];else{if(n=i.filter[e[u].type].apply(null,e[u].matches),n[x]){for(r=++u;o>r;r++)if(i.relative[e[r].type])break;return yt(u>1&&gt(f),u>1&&dt(e.slice(0,u-1)).replace(W,\"$1\"),n,r>u&&vt(e.slice(u,r)),o>r&&vt(e=e.slice(r)),o>r&&dt(e))}f.push(n)}return gt(f)}function bt(e,t){var n=0,o=t.length>0,a=e.length>0,s=function(s,u,c,f,d){var h,g,m,y=[],v=0,b=\"0\",x=s&&[],w=null!=d,T=l,C=s||a&&i.find.TAG(\"*\",d&&u.parentNode||u),k=N+=null==T?1:Math.random()||.1;for(w&&(l=u!==p&&u,r=n);null!=(h=C[b]);b++){if(a&&h){g=0;while(m=e[g++])if(m(h,u,c)){f.push(h);break}w&&(N=k,r=++n)}o&&((h=!m&&h)&&v--,s&&x.push(h))}if(v+=b,o&&b!==v){g=0;while(m=t[g++])m(x,y,u,c);if(s){if(v>0)while(b--)x[b]||y[b]||(y[b]=L.call(f));y=mt(y)}H.apply(f,y),w&&!s&&y.length>0&&v+t.length>1&&st.uniqueSort(f)}return w&&(N=k,l=T),x};return o?ot(s):s}s=st.compile=function(e,t){var n,r=[],i=[],o=S[e+\" \"];if(!o){t||(t=ft(e)),n=t.length;while(n--)o=vt(t[n]),o[x]?r.push(o):i.push(o);o=S(e,bt(i,r))}return o};function xt(e,t,n){var r=0,i=t.length;for(;i>r;r++)st(e,t[r],n);return n}function wt(e,t,n,r){var o,a,u,l,c,p=ft(e);if(!r&&1===p.length){if(a=p[0]=p[0].slice(0),a.length>2&&\"ID\"===(u=a[0]).type&&9===t.nodeType&&!d&&i.relative[a[1].type]){if(t=i.find.ID(u.matches[0].replace(et,tt),t)[0],!t)return n;e=e.slice(a.shift().value.length)}o=U.needsContext.test(e)?0:a.length;while(o--){if(u=a[o],i.relative[l=u.type])break;if((c=i.find[l])&&(r=c(u.matches[0].replace(et,tt),V.test(a[0].type)&&t.parentNode||t))){if(a.splice(o,1),e=r.length&&dt(a),!e)return H.apply(n,q.call(r,0)),n;break}}}return s(e,p)(r,t,d,n,V.test(e)),n}i.pseudos.nth=i.pseudos.eq;function Tt(){}i.filters=Tt.prototype=i.pseudos,i.setFilters=new Tt,c(),st.attr=b.attr,b.find=st,b.expr=st.selectors,b.expr[\":\"]=b.expr.pseudos,b.unique=st.uniqueSort,b.text=st.getText,b.isXMLDoc=st.isXML,b.contains=st.contains}(e);var at=/Until$/,st=/^(?:parents|prev(?:Until|All))/,ut=/^.[^:#\\[\\.,]*$/,lt=b.expr.match.needsContext,ct={children:!0,contents:!0,next:!0,prev:!0};b.fn.extend({find:function(e){var t,n,r,i=this.length;if(\"string\"!=typeof e)return r=this,this.pushStack(b(e).filter(function(){for(t=0;i>t;t++)if(b.contains(r[t],this))return!0}));for(n=[],t=0;i>t;t++)b.find(e,this[t],n);return n=this.pushStack(i>1?b.unique(n):n),n.selector=(this.selector?this.selector+\" \":\"\")+e,n},has:function(e){var t,n=b(e,this),r=n.length;return this.filter(function(){for(t=0;r>t;t++)if(b.contains(this,n[t]))return!0})},not:function(e){return this.pushStack(ft(this,e,!1))},filter:function(e){return this.pushStack(ft(this,e,!0))},is:function(e){return!!e&&(\"string\"==typeof e?lt.test(e)?b(e,this.context).index(this[0])>=0:b.filter(e,this).length>0:this.filter(e).length>0)},closest:function(e,t){var n,r=0,i=this.length,o=[],a=lt.test(e)||\"string\"!=typeof e?b(e,t||this.context):0;for(;i>r;r++){n=this[r];while(n&&n.ownerDocument&&n!==t&&11!==n.nodeType){if(a?a.index(n)>-1:b.find.matchesSelector(n,e)){o.push(n);break}n=n.parentNode}}return this.pushStack(o.length>1?b.unique(o):o)},index:function(e){return e?\"string\"==typeof e?b.inArray(this[0],b(e)):b.inArray(e.jquery?e[0]:e,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){var n=\"string\"==typeof e?b(e,t):b.makeArray(e&&e.nodeType?[e]:e),r=b.merge(this.get(),n);return this.pushStack(b.unique(r))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),b.fn.andSelf=b.fn.addBack;function pt(e,t){do e=e[t];while(e&&1!==e.nodeType);return e}b.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return b.dir(e,\"parentNode\")},parentsUntil:function(e,t,n){return b.dir(e,\"parentNode\",n)},next:function(e){return pt(e,\"nextSibling\")},prev:function(e){return pt(e,\"previousSibling\")},nextAll:function(e){return b.dir(e,\"nextSibling\")},prevAll:function(e){return b.dir(e,\"previousSibling\")},nextUntil:function(e,t,n){return b.dir(e,\"nextSibling\",n)},prevUntil:function(e,t,n){return b.dir(e,\"previousSibling\",n)},siblings:function(e){return b.sibling((e.parentNode||{}).firstChild,e)},children:function(e){return b.sibling(e.firstChild)},contents:function(e){return b.nodeName(e,\"iframe\")?e.contentDocument||e.contentWindow.document:b.merge([],e.childNodes)}},function(e,t){b.fn[e]=function(n,r){var i=b.map(this,t,n);return at.test(e)||(r=n),r&&\"string\"==typeof r&&(i=b.filter(r,i)),i=this.length>1&&!ct[e]?b.unique(i):i,this.length>1&&st.test(e)&&(i=i.reverse()),this.pushStack(i)}}),b.extend({filter:function(e,t,n){return n&&(e=\":not(\"+e+\")\"),1===t.length?b.find.matchesSelector(t[0],e)?[t[0]]:[]:b.find.matches(e,t)},dir:function(e,n,r){var i=[],o=e[n];while(o&&9!==o.nodeType&&(r===t||1!==o.nodeType||!b(o).is(r)))1===o.nodeType&&i.push(o),o=o[n];return i},sibling:function(e,t){var n=[];for(;e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}});function ft(e,t,n){if(t=t||0,b.isFunction(t))return b.grep(e,function(e,r){var i=!!t.call(e,r,e);return i===n});if(t.nodeType)return b.grep(e,function(e){return e===t===n});if(\"string\"==typeof t){var r=b.grep(e,function(e){return 1===e.nodeType});if(ut.test(t))return b.filter(t,r,!n);t=b.filter(t,r)}return b.grep(e,function(e){return b.inArray(e,t)>=0===n})}function dt(e){var t=ht.split(\"|\"),n=e.createDocumentFragment();if(n.createElement)while(t.length)n.createElement(t.pop());return n}var ht=\"abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video\",gt=/ jQuery\\d+=\"(?:null|\\d+)\"/g,mt=RegExp(\"<(?:\"+ht+\")[\\\\s/>]\",\"i\"),yt=/^\\s+/,vt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:]+)[^>]*)\\/>/gi,bt=/<([\\w:]+)/,xt=/<tbody/i,wt=/<|&#?\\w+;/,Tt=/<(?:script|style|link)/i,Nt=/^(?:checkbox|radio)$/i,Ct=/checked\\s*(?:[^=]|=\\s*.checked.)/i,kt=/^$|\\/(?:java|ecma)script/i,Et=/^true\\/(.*)/,St=/^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g,At={option:[1,\"<select multiple='multiple'>\",\"</select>\"],legend:[1,\"<fieldset>\",\"</fieldset>\"],area:[1,\"<map>\",\"</map>\"],param:[1,\"<object>\",\"</object>\"],thead:[1,\"<table>\",\"</table>\"],tr:[2,\"<table><tbody>\",\"</tbody></table>\"],col:[2,\"<table><tbody></tbody><colgroup>\",\"</colgroup></table>\"],td:[3,\"<table><tbody><tr>\",\"</tr></tbody></table>\"],_default:b.support.htmlSerialize?[0,\"\",\"\"]:[1,\"X<div>\",\"</div>\"]},jt=dt(o),Dt=jt.appendChild(o.createElement(\"div\"));At.optgroup=At.option,At.tbody=At.tfoot=At.colgroup=At.caption=At.thead,At.th=At.td,b.fn.extend({text:function(e){return b.access(this,function(e){return e===t?b.text(this):this.empty().append((this[0]&&this[0].ownerDocument||o).createTextNode(e))},null,e,arguments.length)},wrapAll:function(e){if(b.isFunction(e))return this.each(function(t){b(this).wrapAll(e.call(this,t))});if(this[0]){var t=b(e,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){var e=this;while(e.firstChild&&1===e.firstChild.nodeType)e=e.firstChild;return e}).append(this)}return this},wrapInner:function(e){return b.isFunction(e)?this.each(function(t){b(this).wrapInner(e.call(this,t))}):this.each(function(){var t=b(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=b.isFunction(e);return this.each(function(n){b(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(){return this.parent().each(function(){b.nodeName(this,\"body\")||b(this).replaceWith(this.childNodes)}).end()},append:function(){return this.domManip(arguments,!0,function(e){(1===this.nodeType||11===this.nodeType||9===this.nodeType)&&this.appendChild(e)})},prepend:function(){return this.domManip(arguments,!0,function(e){(1===this.nodeType||11===this.nodeType||9===this.nodeType)&&this.insertBefore(e,this.firstChild)})},before:function(){return this.domManip(arguments,!1,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return this.domManip(arguments,!1,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},remove:function(e,t){var n,r=0;for(;null!=(n=this[r]);r++)(!e||b.filter(e,[n]).length>0)&&(t||1!==n.nodeType||b.cleanData(Ot(n)),n.parentNode&&(t&&b.contains(n.ownerDocument,n)&&Mt(Ot(n,\"script\")),n.parentNode.removeChild(n)));return this},empty:function(){var e,t=0;for(;null!=(e=this[t]);t++){1===e.nodeType&&b.cleanData(Ot(e,!1));while(e.firstChild)e.removeChild(e.firstChild);e.options&&b.nodeName(e,\"select\")&&(e.options.length=0)}return this},clone:function(e,t){return e=null==e?!1:e,t=null==t?e:t,this.map(function(){return b.clone(this,e,t)})},html:function(e){return b.access(this,function(e){var n=this[0]||{},r=0,i=this.length;if(e===t)return 1===n.nodeType?n.innerHTML.replace(gt,\"\"):t;if(!(\"string\"!=typeof e||Tt.test(e)||!b.support.htmlSerialize&&mt.test(e)||!b.support.leadingWhitespace&&yt.test(e)||At[(bt.exec(e)||[\"\",\"\"])[1].toLowerCase()])){e=e.replace(vt,\"<$1></$2>\");try{for(;i>r;r++)n=this[r]||{},1===n.nodeType&&(b.cleanData(Ot(n,!1)),n.innerHTML=e);n=0}catch(o){}}n&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(e){var t=b.isFunction(e);return t||\"string\"==typeof e||(e=b(e).not(this).detach()),this.domManip([e],!0,function(e){var t=this.nextSibling,n=this.parentNode;n&&(b(this).remove(),n.insertBefore(e,t))})},detach:function(e){return this.remove(e,!0)},domManip:function(e,n,r){e=f.apply([],e);var i,o,a,s,u,l,c=0,p=this.length,d=this,h=p-1,g=e[0],m=b.isFunction(g);if(m||!(1>=p||\"string\"!=typeof g||b.support.checkClone)&&Ct.test(g))return this.each(function(i){var o=d.eq(i);m&&(e[0]=g.call(this,i,n?o.html():t)),o.domManip(e,n,r)});if(p&&(l=b.buildFragment(e,this[0].ownerDocument,!1,this),i=l.firstChild,1===l.childNodes.length&&(l=i),i)){for(n=n&&b.nodeName(i,\"tr\"),s=b.map(Ot(l,\"script\"),Ht),a=s.length;p>c;c++)o=l,c!==h&&(o=b.clone(o,!0,!0),a&&b.merge(s,Ot(o,\"script\"))),r.call(n&&b.nodeName(this[c],\"table\")?Lt(this[c],\"tbody\"):this[c],o,c);if(a)for(u=s[s.length-1].ownerDocument,b.map(s,qt),c=0;a>c;c++)o=s[c],kt.test(o.type||\"\")&&!b._data(o,\"globalEval\")&&b.contains(u,o)&&(o.src?b.ajax({url:o.src,type:\"GET\",dataType:\"script\",async:!1,global:!1,\"throws\":!0}):b.globalEval((o.text||o.textContent||o.innerHTML||\"\").replace(St,\"\")));l=i=null}return this}});function Lt(e,t){return e.getElementsByTagName(t)[0]||e.appendChild(e.ownerDocument.createElement(t))}function Ht(e){var t=e.getAttributeNode(\"type\");return e.type=(t&&t.specified)+\"/\"+e.type,e}function qt(e){var t=Et.exec(e.type);return t?e.type=t[1]:e.removeAttribute(\"type\"),e}function Mt(e,t){var n,r=0;for(;null!=(n=e[r]);r++)b._data(n,\"globalEval\",!t||b._data(t[r],\"globalEval\"))}function _t(e,t){if(1===t.nodeType&&b.hasData(e)){var n,r,i,o=b._data(e),a=b._data(t,o),s=o.events;if(s){delete a.handle,a.events={};for(n in s)for(r=0,i=s[n].length;i>r;r++)b.event.add(t,n,s[n][r])}a.data&&(a.data=b.extend({},a.data))}}function Ft(e,t){var n,r,i;if(1===t.nodeType){if(n=t.nodeName.toLowerCase(),!b.support.noCloneEvent&&t[b.expando]){i=b._data(t);for(r in i.events)b.removeEvent(t,r,i.handle);t.removeAttribute(b.expando)}\"script\"===n&&t.text!==e.text?(Ht(t).text=e.text,qt(t)):\"object\"===n?(t.parentNode&&(t.outerHTML=e.outerHTML),b.support.html5Clone&&e.innerHTML&&!b.trim(t.innerHTML)&&(t.innerHTML=e.innerHTML)):\"input\"===n&&Nt.test(e.type)?(t.defaultChecked=t.checked=e.checked,t.value!==e.value&&(t.value=e.value)):\"option\"===n?t.defaultSelected=t.selected=e.defaultSelected:(\"input\"===n||\"textarea\"===n)&&(t.defaultValue=e.defaultValue)}}b.each({appendTo:\"append\",prependTo:\"prepend\",insertBefore:\"before\",insertAfter:\"after\",replaceAll:\"replaceWith\"},function(e,t){b.fn[e]=function(e){var n,r=0,i=[],o=b(e),a=o.length-1;for(;a>=r;r++)n=r===a?this:this.clone(!0),b(o[r])[t](n),d.apply(i,n.get());return this.pushStack(i)}});function Ot(e,n){var r,o,a=0,s=typeof e.getElementsByTagName!==i?e.getElementsByTagName(n||\"*\"):typeof e.querySelectorAll!==i?e.querySelectorAll(n||\"*\"):t;if(!s)for(s=[],r=e.childNodes||e;null!=(o=r[a]);a++)!n||b.nodeName(o,n)?s.push(o):b.merge(s,Ot(o,n));return n===t||n&&b.nodeName(e,n)?b.merge([e],s):s}function Bt(e){Nt.test(e.type)&&(e.defaultChecked=e.checked)}b.extend({clone:function(e,t,n){var r,i,o,a,s,u=b.contains(e.ownerDocument,e);if(b.support.html5Clone||b.isXMLDoc(e)||!mt.test(\"<\"+e.nodeName+\">\")?o=e.cloneNode(!0):(Dt.innerHTML=e.outerHTML,Dt.removeChild(o=Dt.firstChild)),!(b.support.noCloneEvent&&b.support.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||b.isXMLDoc(e)))for(r=Ot(o),s=Ot(e),a=0;null!=(i=s[a]);++a)r[a]&&Ft(i,r[a]);if(t)if(n)for(s=s||Ot(e),r=r||Ot(o),a=0;null!=(i=s[a]);a++)_t(i,r[a]);else _t(e,o);return r=Ot(o,\"script\"),r.length>0&&Mt(r,!u&&Ot(e,\"script\")),r=s=i=null,o},buildFragment:function(e,t,n,r){var i,o,a,s,u,l,c,p=e.length,f=dt(t),d=[],h=0;for(;p>h;h++)if(o=e[h],o||0===o)if(\"object\"===b.type(o))b.merge(d,o.nodeType?[o]:o);else if(wt.test(o)){s=s||f.appendChild(t.createElement(\"div\")),u=(bt.exec(o)||[\"\",\"\"])[1].toLowerCase(),c=At[u]||At._default,s.innerHTML=c[1]+o.replace(vt,\"<$1></$2>\")+c[2],i=c[0];while(i--)s=s.lastChild;if(!b.support.leadingWhitespace&&yt.test(o)&&d.push(t.createTextNode(yt.exec(o)[0])),!b.support.tbody){o=\"table\"!==u||xt.test(o)?\"<table>\"!==c[1]||xt.test(o)?0:s:s.firstChild,i=o&&o.childNodes.length;while(i--)b.nodeName(l=o.childNodes[i],\"tbody\")&&!l.childNodes.length&&o.removeChild(l)\n}b.merge(d,s.childNodes),s.textContent=\"\";while(s.firstChild)s.removeChild(s.firstChild);s=f.lastChild}else d.push(t.createTextNode(o));s&&f.removeChild(s),b.support.appendChecked||b.grep(Ot(d,\"input\"),Bt),h=0;while(o=d[h++])if((!r||-1===b.inArray(o,r))&&(a=b.contains(o.ownerDocument,o),s=Ot(f.appendChild(o),\"script\"),a&&Mt(s),n)){i=0;while(o=s[i++])kt.test(o.type||\"\")&&n.push(o)}return s=null,f},cleanData:function(e,t){var n,r,o,a,s=0,u=b.expando,l=b.cache,p=b.support.deleteExpando,f=b.event.special;for(;null!=(n=e[s]);s++)if((t||b.acceptData(n))&&(o=n[u],a=o&&l[o])){if(a.events)for(r in a.events)f[r]?b.event.remove(n,r):b.removeEvent(n,r,a.handle);l[o]&&(delete l[o],p?delete n[u]:typeof n.removeAttribute!==i?n.removeAttribute(u):n[u]=null,c.push(o))}}});var Pt,Rt,Wt,$t=/alpha\\([^)]*\\)/i,It=/opacity\\s*=\\s*([^)]*)/,zt=/^(top|right|bottom|left)$/,Xt=/^(none|table(?!-c[ea]).+)/,Ut=/^margin/,Vt=RegExp(\"^(\"+x+\")(.*)$\",\"i\"),Yt=RegExp(\"^(\"+x+\")(?!px)[a-z%]+$\",\"i\"),Jt=RegExp(\"^([+-])=(\"+x+\")\",\"i\"),Gt={BODY:\"block\"},Qt={position:\"absolute\",visibility:\"hidden\",display:\"block\"},Kt={letterSpacing:0,fontWeight:400},Zt=[\"Top\",\"Right\",\"Bottom\",\"Left\"],en=[\"Webkit\",\"O\",\"Moz\",\"ms\"];function tn(e,t){if(t in e)return t;var n=t.charAt(0).toUpperCase()+t.slice(1),r=t,i=en.length;while(i--)if(t=en[i]+n,t in e)return t;return r}function nn(e,t){return e=t||e,\"none\"===b.css(e,\"display\")||!b.contains(e.ownerDocument,e)}function rn(e,t){var n,r,i,o=[],a=0,s=e.length;for(;s>a;a++)r=e[a],r.style&&(o[a]=b._data(r,\"olddisplay\"),n=r.style.display,t?(o[a]||\"none\"!==n||(r.style.display=\"\"),\"\"===r.style.display&&nn(r)&&(o[a]=b._data(r,\"olddisplay\",un(r.nodeName)))):o[a]||(i=nn(r),(n&&\"none\"!==n||!i)&&b._data(r,\"olddisplay\",i?n:b.css(r,\"display\"))));for(a=0;s>a;a++)r=e[a],r.style&&(t&&\"none\"!==r.style.display&&\"\"!==r.style.display||(r.style.display=t?o[a]||\"\":\"none\"));return e}b.fn.extend({css:function(e,n){return b.access(this,function(e,n,r){var i,o,a={},s=0;if(b.isArray(n)){for(o=Rt(e),i=n.length;i>s;s++)a[n[s]]=b.css(e,n[s],!1,o);return a}return r!==t?b.style(e,n,r):b.css(e,n)},e,n,arguments.length>1)},show:function(){return rn(this,!0)},hide:function(){return rn(this)},toggle:function(e){var t=\"boolean\"==typeof e;return this.each(function(){(t?e:nn(this))?b(this).show():b(this).hide()})}}),b.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Wt(e,\"opacity\");return\"\"===n?\"1\":n}}}},cssNumber:{columnCount:!0,fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{\"float\":b.support.cssFloat?\"cssFloat\":\"styleFloat\"},style:function(e,n,r,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,a,s,u=b.camelCase(n),l=e.style;if(n=b.cssProps[u]||(b.cssProps[u]=tn(l,u)),s=b.cssHooks[n]||b.cssHooks[u],r===t)return s&&\"get\"in s&&(o=s.get(e,!1,i))!==t?o:l[n];if(a=typeof r,\"string\"===a&&(o=Jt.exec(r))&&(r=(o[1]+1)*o[2]+parseFloat(b.css(e,n)),a=\"number\"),!(null==r||\"number\"===a&&isNaN(r)||(\"number\"!==a||b.cssNumber[u]||(r+=\"px\"),b.support.clearCloneStyle||\"\"!==r||0!==n.indexOf(\"background\")||(l[n]=\"inherit\"),s&&\"set\"in s&&(r=s.set(e,r,i))===t)))try{l[n]=r}catch(c){}}},css:function(e,n,r,i){var o,a,s,u=b.camelCase(n);return n=b.cssProps[u]||(b.cssProps[u]=tn(e.style,u)),s=b.cssHooks[n]||b.cssHooks[u],s&&\"get\"in s&&(a=s.get(e,!0,r)),a===t&&(a=Wt(e,n,i)),\"normal\"===a&&n in Kt&&(a=Kt[n]),\"\"===r||r?(o=parseFloat(a),r===!0||b.isNumeric(o)?o||0:a):a},swap:function(e,t,n,r){var i,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];i=n.apply(e,r||[]);for(o in t)e.style[o]=a[o];return i}}),e.getComputedStyle?(Rt=function(t){return e.getComputedStyle(t,null)},Wt=function(e,n,r){var i,o,a,s=r||Rt(e),u=s?s.getPropertyValue(n)||s[n]:t,l=e.style;return s&&(\"\"!==u||b.contains(e.ownerDocument,e)||(u=b.style(e,n)),Yt.test(u)&&Ut.test(n)&&(i=l.width,o=l.minWidth,a=l.maxWidth,l.minWidth=l.maxWidth=l.width=u,u=s.width,l.width=i,l.minWidth=o,l.maxWidth=a)),u}):o.documentElement.currentStyle&&(Rt=function(e){return e.currentStyle},Wt=function(e,n,r){var i,o,a,s=r||Rt(e),u=s?s[n]:t,l=e.style;return null==u&&l&&l[n]&&(u=l[n]),Yt.test(u)&&!zt.test(n)&&(i=l.left,o=e.runtimeStyle,a=o&&o.left,a&&(o.left=e.currentStyle.left),l.left=\"fontSize\"===n?\"1em\":u,u=l.pixelLeft+\"px\",l.left=i,a&&(o.left=a)),\"\"===u?\"auto\":u});function on(e,t,n){var r=Vt.exec(t);return r?Math.max(0,r[1]-(n||0))+(r[2]||\"px\"):t}function an(e,t,n,r,i){var o=n===(r?\"border\":\"content\")?4:\"width\"===t?1:0,a=0;for(;4>o;o+=2)\"margin\"===n&&(a+=b.css(e,n+Zt[o],!0,i)),r?(\"content\"===n&&(a-=b.css(e,\"padding\"+Zt[o],!0,i)),\"margin\"!==n&&(a-=b.css(e,\"border\"+Zt[o]+\"Width\",!0,i))):(a+=b.css(e,\"padding\"+Zt[o],!0,i),\"padding\"!==n&&(a+=b.css(e,\"border\"+Zt[o]+\"Width\",!0,i)));return a}function sn(e,t,n){var r=!0,i=\"width\"===t?e.offsetWidth:e.offsetHeight,o=Rt(e),a=b.support.boxSizing&&\"border-box\"===b.css(e,\"boxSizing\",!1,o);if(0>=i||null==i){if(i=Wt(e,t,o),(0>i||null==i)&&(i=e.style[t]),Yt.test(i))return i;r=a&&(b.support.boxSizingReliable||i===e.style[t]),i=parseFloat(i)||0}return i+an(e,t,n||(a?\"border\":\"content\"),r,o)+\"px\"}function un(e){var t=o,n=Gt[e];return n||(n=ln(e,t),\"none\"!==n&&n||(Pt=(Pt||b(\"<iframe frameborder='0' width='0' height='0'/>\").css(\"cssText\",\"display:block !important\")).appendTo(t.documentElement),t=(Pt[0].contentWindow||Pt[0].contentDocument).document,t.write(\"<!doctype html><html><body>\"),t.close(),n=ln(e,t),Pt.detach()),Gt[e]=n),n}function ln(e,t){var n=b(t.createElement(e)).appendTo(t.body),r=b.css(n[0],\"display\");return n.remove(),r}b.each([\"height\",\"width\"],function(e,n){b.cssHooks[n]={get:function(e,r,i){return r?0===e.offsetWidth&&Xt.test(b.css(e,\"display\"))?b.swap(e,Qt,function(){return sn(e,n,i)}):sn(e,n,i):t},set:function(e,t,r){var i=r&&Rt(e);return on(e,t,r?an(e,n,r,b.support.boxSizing&&\"border-box\"===b.css(e,\"boxSizing\",!1,i),i):0)}}}),b.support.opacity||(b.cssHooks.opacity={get:function(e,t){return It.test((t&&e.currentStyle?e.currentStyle.filter:e.style.filter)||\"\")?.01*parseFloat(RegExp.$1)+\"\":t?\"1\":\"\"},set:function(e,t){var n=e.style,r=e.currentStyle,i=b.isNumeric(t)?\"alpha(opacity=\"+100*t+\")\":\"\",o=r&&r.filter||n.filter||\"\";n.zoom=1,(t>=1||\"\"===t)&&\"\"===b.trim(o.replace($t,\"\"))&&n.removeAttribute&&(n.removeAttribute(\"filter\"),\"\"===t||r&&!r.filter)||(n.filter=$t.test(o)?o.replace($t,i):o+\" \"+i)}}),b(function(){b.support.reliableMarginRight||(b.cssHooks.marginRight={get:function(e,n){return n?b.swap(e,{display:\"inline-block\"},Wt,[e,\"marginRight\"]):t}}),!b.support.pixelPosition&&b.fn.position&&b.each([\"top\",\"left\"],function(e,n){b.cssHooks[n]={get:function(e,r){return r?(r=Wt(e,n),Yt.test(r)?b(e).position()[n]+\"px\":r):t}}})}),b.expr&&b.expr.filters&&(b.expr.filters.hidden=function(e){return 0>=e.offsetWidth&&0>=e.offsetHeight||!b.support.reliableHiddenOffsets&&\"none\"===(e.style&&e.style.display||b.css(e,\"display\"))},b.expr.filters.visible=function(e){return!b.expr.filters.hidden(e)}),b.each({margin:\"\",padding:\"\",border:\"Width\"},function(e,t){b.cssHooks[e+t]={expand:function(n){var r=0,i={},o=\"string\"==typeof n?n.split(\" \"):[n];for(;4>r;r++)i[e+Zt[r]+t]=o[r]||o[r-2]||o[0];return i}},Ut.test(e)||(b.cssHooks[e+t].set=on)});var cn=/%20/g,pn=/\\[\\]$/,fn=/\\r?\\n/g,dn=/^(?:submit|button|image|reset|file)$/i,hn=/^(?:input|select|textarea|keygen)/i;b.fn.extend({serialize:function(){return b.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=b.prop(this,\"elements\");return e?b.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!b(this).is(\":disabled\")&&hn.test(this.nodeName)&&!dn.test(e)&&(this.checked||!Nt.test(e))}).map(function(e,t){var n=b(this).val();return null==n?null:b.isArray(n)?b.map(n,function(e){return{name:t.name,value:e.replace(fn,\"\\r\\n\")}}):{name:t.name,value:n.replace(fn,\"\\r\\n\")}}).get()}}),b.param=function(e,n){var r,i=[],o=function(e,t){t=b.isFunction(t)?t():null==t?\"\":t,i[i.length]=encodeURIComponent(e)+\"=\"+encodeURIComponent(t)};if(n===t&&(n=b.ajaxSettings&&b.ajaxSettings.traditional),b.isArray(e)||e.jquery&&!b.isPlainObject(e))b.each(e,function(){o(this.name,this.value)});else for(r in e)gn(r,e[r],n,o);return i.join(\"&\").replace(cn,\"+\")};function gn(e,t,n,r){var i;if(b.isArray(t))b.each(t,function(t,i){n||pn.test(e)?r(e,i):gn(e+\"[\"+(\"object\"==typeof i?t:\"\")+\"]\",i,n,r)});else if(n||\"object\"!==b.type(t))r(e,t);else for(i in t)gn(e+\"[\"+i+\"]\",t[i],n,r)}b.each(\"blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu\".split(\" \"),function(e,t){b.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),b.fn.hover=function(e,t){return this.mouseenter(e).mouseleave(t||e)};var mn,yn,vn=b.now(),bn=/\\?/,xn=/#.*$/,wn=/([?&])_=[^&]*/,Tn=/^(.*?):[ \\t]*([^\\r\\n]*)\\r?$/gm,Nn=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Cn=/^(?:GET|HEAD)$/,kn=/^\\/\\//,En=/^([\\w.+-]+:)(?:\\/\\/([^\\/?#:]*)(?::(\\d+)|)|)/,Sn=b.fn.load,An={},jn={},Dn=\"*/\".concat(\"*\");try{yn=a.href}catch(Ln){yn=o.createElement(\"a\"),yn.href=\"\",yn=yn.href}mn=En.exec(yn.toLowerCase())||[];function Hn(e){return function(t,n){\"string\"!=typeof t&&(n=t,t=\"*\");var r,i=0,o=t.toLowerCase().match(w)||[];if(b.isFunction(n))while(r=o[i++])\"+\"===r[0]?(r=r.slice(1)||\"*\",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function qn(e,n,r,i){var o={},a=e===jn;function s(u){var l;return o[u]=!0,b.each(e[u]||[],function(e,u){var c=u(n,r,i);return\"string\"!=typeof c||a||o[c]?a?!(l=c):t:(n.dataTypes.unshift(c),s(c),!1)}),l}return s(n.dataTypes[0])||!o[\"*\"]&&s(\"*\")}function Mn(e,n){var r,i,o=b.ajaxSettings.flatOptions||{};for(i in n)n[i]!==t&&((o[i]?e:r||(r={}))[i]=n[i]);return r&&b.extend(!0,e,r),e}b.fn.load=function(e,n,r){if(\"string\"!=typeof e&&Sn)return Sn.apply(this,arguments);var i,o,a,s=this,u=e.indexOf(\" \");return u>=0&&(i=e.slice(u,e.length),e=e.slice(0,u)),b.isFunction(n)?(r=n,n=t):n&&\"object\"==typeof n&&(a=\"POST\"),s.length>0&&b.ajax({url:e,type:a,dataType:\"html\",data:n}).done(function(e){o=arguments,s.html(i?b(\"<div>\").append(b.parseHTML(e)).find(i):e)}).complete(r&&function(e,t){s.each(r,o||[e.responseText,t,e])}),this},b.each([\"ajaxStart\",\"ajaxStop\",\"ajaxComplete\",\"ajaxError\",\"ajaxSuccess\",\"ajaxSend\"],function(e,t){b.fn[t]=function(e){return this.on(t,e)}}),b.each([\"get\",\"post\"],function(e,n){b[n]=function(e,r,i,o){return b.isFunction(r)&&(o=o||i,i=r,r=t),b.ajax({url:e,type:n,dataType:o,data:r,success:i})}}),b.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:yn,type:\"GET\",isLocal:Nn.test(mn[1]),global:!0,processData:!0,async:!0,contentType:\"application/x-www-form-urlencoded; charset=UTF-8\",accepts:{\"*\":Dn,text:\"text/plain\",html:\"text/html\",xml:\"application/xml, text/xml\",json:\"application/json, text/javascript\"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:\"responseXML\",text:\"responseText\"},converters:{\"* text\":e.String,\"text html\":!0,\"text json\":b.parseJSON,\"text xml\":b.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Mn(Mn(e,b.ajaxSettings),t):Mn(b.ajaxSettings,e)},ajaxPrefilter:Hn(An),ajaxTransport:Hn(jn),ajax:function(e,n){\"object\"==typeof e&&(n=e,e=t),n=n||{};var r,i,o,a,s,u,l,c,p=b.ajaxSetup({},n),f=p.context||p,d=p.context&&(f.nodeType||f.jquery)?b(f):b.event,h=b.Deferred(),g=b.Callbacks(\"once memory\"),m=p.statusCode||{},y={},v={},x=0,T=\"canceled\",N={readyState:0,getResponseHeader:function(e){var t;if(2===x){if(!c){c={};while(t=Tn.exec(a))c[t[1].toLowerCase()]=t[2]}t=c[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===x?a:null},setRequestHeader:function(e,t){var n=e.toLowerCase();return x||(e=v[n]=v[n]||e,y[e]=t),this},overrideMimeType:function(e){return x||(p.mimeType=e),this},statusCode:function(e){var t;if(e)if(2>x)for(t in e)m[t]=[m[t],e[t]];else N.always(e[N.status]);return this},abort:function(e){var t=e||T;return l&&l.abort(t),k(0,t),this}};if(h.promise(N).complete=g.add,N.success=N.done,N.error=N.fail,p.url=((e||p.url||yn)+\"\").replace(xn,\"\").replace(kn,mn[1]+\"//\"),p.type=n.method||n.type||p.method||p.type,p.dataTypes=b.trim(p.dataType||\"*\").toLowerCase().match(w)||[\"\"],null==p.crossDomain&&(r=En.exec(p.url.toLowerCase()),p.crossDomain=!(!r||r[1]===mn[1]&&r[2]===mn[2]&&(r[3]||(\"http:\"===r[1]?80:443))==(mn[3]||(\"http:\"===mn[1]?80:443)))),p.data&&p.processData&&\"string\"!=typeof p.data&&(p.data=b.param(p.data,p.traditional)),qn(An,p,n,N),2===x)return N;u=p.global,u&&0===b.active++&&b.event.trigger(\"ajaxStart\"),p.type=p.type.toUpperCase(),p.hasContent=!Cn.test(p.type),o=p.url,p.hasContent||(p.data&&(o=p.url+=(bn.test(o)?\"&\":\"?\")+p.data,delete p.data),p.cache===!1&&(p.url=wn.test(o)?o.replace(wn,\"$1_=\"+vn++):o+(bn.test(o)?\"&\":\"?\")+\"_=\"+vn++)),p.ifModified&&(b.lastModified[o]&&N.setRequestHeader(\"If-Modified-Since\",b.lastModified[o]),b.etag[o]&&N.setRequestHeader(\"If-None-Match\",b.etag[o])),(p.data&&p.hasContent&&p.contentType!==!1||n.contentType)&&N.setRequestHeader(\"Content-Type\",p.contentType),N.setRequestHeader(\"Accept\",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+(\"*\"!==p.dataTypes[0]?\", \"+Dn+\"; q=0.01\":\"\"):p.accepts[\"*\"]);for(i in p.headers)N.setRequestHeader(i,p.headers[i]);if(p.beforeSend&&(p.beforeSend.call(f,N,p)===!1||2===x))return N.abort();T=\"abort\";for(i in{success:1,error:1,complete:1})N[i](p[i]);if(l=qn(jn,p,n,N)){N.readyState=1,u&&d.trigger(\"ajaxSend\",[N,p]),p.async&&p.timeout>0&&(s=setTimeout(function(){N.abort(\"timeout\")},p.timeout));try{x=1,l.send(y,k)}catch(C){if(!(2>x))throw C;k(-1,C)}}else k(-1,\"No Transport\");function k(e,n,r,i){var c,y,v,w,T,C=n;2!==x&&(x=2,s&&clearTimeout(s),l=t,a=i||\"\",N.readyState=e>0?4:0,r&&(w=_n(p,N,r)),e>=200&&300>e||304===e?(p.ifModified&&(T=N.getResponseHeader(\"Last-Modified\"),T&&(b.lastModified[o]=T),T=N.getResponseHeader(\"etag\"),T&&(b.etag[o]=T)),204===e?(c=!0,C=\"nocontent\"):304===e?(c=!0,C=\"notmodified\"):(c=Fn(p,w),C=c.state,y=c.data,v=c.error,c=!v)):(v=C,(e||!C)&&(C=\"error\",0>e&&(e=0))),N.status=e,N.statusText=(n||C)+\"\",c?h.resolveWith(f,[y,C,N]):h.rejectWith(f,[N,C,v]),N.statusCode(m),m=t,u&&d.trigger(c?\"ajaxSuccess\":\"ajaxError\",[N,p,c?y:v]),g.fireWith(f,[N,C]),u&&(d.trigger(\"ajaxComplete\",[N,p]),--b.active||b.event.trigger(\"ajaxStop\")))}return N},getScript:function(e,n){return b.get(e,t,n,\"script\")},getJSON:function(e,t,n){return b.get(e,t,n,\"json\")}});function _n(e,n,r){var i,o,a,s,u=e.contents,l=e.dataTypes,c=e.responseFields;for(s in c)s in r&&(n[c[s]]=r[s]);while(\"*\"===l[0])l.shift(),o===t&&(o=e.mimeType||n.getResponseHeader(\"Content-Type\"));if(o)for(s in u)if(u[s]&&u[s].test(o)){l.unshift(s);break}if(l[0]in r)a=l[0];else{for(s in r){if(!l[0]||e.converters[s+\" \"+l[0]]){a=s;break}i||(i=s)}a=a||i}return a?(a!==l[0]&&l.unshift(a),r[a]):t}function Fn(e,t){var n,r,i,o,a={},s=0,u=e.dataTypes.slice(),l=u[0];if(e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u[1])for(i in e.converters)a[i.toLowerCase()]=e.converters[i];for(;r=u[++s];)if(\"*\"!==r){if(\"*\"!==l&&l!==r){if(i=a[l+\" \"+r]||a[\"* \"+r],!i)for(n in a)if(o=n.split(\" \"),o[1]===r&&(i=a[l+\" \"+o[0]]||a[\"* \"+o[0]])){i===!0?i=a[n]:a[n]!==!0&&(r=o[0],u.splice(s--,0,r));break}if(i!==!0)if(i&&e[\"throws\"])t=i(t);else try{t=i(t)}catch(c){return{state:\"parsererror\",error:i?c:\"No conversion from \"+l+\" to \"+r}}}l=r}return{state:\"success\",data:t}}b.ajaxSetup({accepts:{script:\"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript\"},contents:{script:/(?:java|ecma)script/},converters:{\"text script\":function(e){return b.globalEval(e),e}}}),b.ajaxPrefilter(\"script\",function(e){e.cache===t&&(e.cache=!1),e.crossDomain&&(e.type=\"GET\",e.global=!1)}),b.ajaxTransport(\"script\",function(e){if(e.crossDomain){var n,r=o.head||b(\"head\")[0]||o.documentElement;return{send:function(t,i){n=o.createElement(\"script\"),n.async=!0,e.scriptCharset&&(n.charset=e.scriptCharset),n.src=e.url,n.onload=n.onreadystatechange=function(e,t){(t||!n.readyState||/loaded|complete/.test(n.readyState))&&(n.onload=n.onreadystatechange=null,n.parentNode&&n.parentNode.removeChild(n),n=null,t||i(200,\"success\"))},r.insertBefore(n,r.firstChild)},abort:function(){n&&n.onload(t,!0)}}}});var On=[],Bn=/(=)\\?(?=&|$)|\\?\\?/;b.ajaxSetup({jsonp:\"callback\",jsonpCallback:function(){var e=On.pop()||b.expando+\"_\"+vn++;return this[e]=!0,e}}),b.ajaxPrefilter(\"json jsonp\",function(n,r,i){var o,a,s,u=n.jsonp!==!1&&(Bn.test(n.url)?\"url\":\"string\"==typeof n.data&&!(n.contentType||\"\").indexOf(\"application/x-www-form-urlencoded\")&&Bn.test(n.data)&&\"data\");return u||\"jsonp\"===n.dataTypes[0]?(o=n.jsonpCallback=b.isFunction(n.jsonpCallback)?n.jsonpCallback():n.jsonpCallback,u?n[u]=n[u].replace(Bn,\"$1\"+o):n.jsonp!==!1&&(n.url+=(bn.test(n.url)?\"&\":\"?\")+n.jsonp+\"=\"+o),n.converters[\"script json\"]=function(){return s||b.error(o+\" was not called\"),s[0]},n.dataTypes[0]=\"json\",a=e[o],e[o]=function(){s=arguments},i.always(function(){e[o]=a,n[o]&&(n.jsonpCallback=r.jsonpCallback,On.push(o)),s&&b.isFunction(a)&&a(s[0]),s=a=t}),\"script\"):t});var Pn,Rn,Wn=0,$n=e.ActiveXObject&&function(){var e;for(e in Pn)Pn[e](t,!0)};function In(){try{return new e.XMLHttpRequest}catch(t){}}function zn(){try{return new e.ActiveXObject(\"Microsoft.XMLHTTP\")}catch(t){}}b.ajaxSettings.xhr=e.ActiveXObject?function(){return!this.isLocal&&In()||zn()}:In,Rn=b.ajaxSettings.xhr(),b.support.cors=!!Rn&&\"withCredentials\"in Rn,Rn=b.support.ajax=!!Rn,Rn&&b.ajaxTransport(function(n){if(!n.crossDomain||b.support.cors){var r;return{send:function(i,o){var a,s,u=n.xhr();if(n.username?u.open(n.type,n.url,n.async,n.username,n.password):u.open(n.type,n.url,n.async),n.xhrFields)for(s in n.xhrFields)u[s]=n.xhrFields[s];n.mimeType&&u.overrideMimeType&&u.overrideMimeType(n.mimeType),n.crossDomain||i[\"X-Requested-With\"]||(i[\"X-Requested-With\"]=\"XMLHttpRequest\");try{for(s in i)u.setRequestHeader(s,i[s])}catch(l){}u.send(n.hasContent&&n.data||null),r=function(e,i){var s,l,c,p;try{if(r&&(i||4===u.readyState))if(r=t,a&&(u.onreadystatechange=b.noop,$n&&delete Pn[a]),i)4!==u.readyState&&u.abort();else{p={},s=u.status,l=u.getAllResponseHeaders(),\"string\"==typeof u.responseText&&(p.text=u.responseText);try{c=u.statusText}catch(f){c=\"\"}s||!n.isLocal||n.crossDomain?1223===s&&(s=204):s=p.text?200:404}}catch(d){i||o(-1,d)}p&&o(s,c,p,l)},n.async?4===u.readyState?setTimeout(r):(a=++Wn,$n&&(Pn||(Pn={},b(e).unload($n)),Pn[a]=r),u.onreadystatechange=r):r()},abort:function(){r&&r(t,!0)}}}});var Xn,Un,Vn=/^(?:toggle|show|hide)$/,Yn=RegExp(\"^(?:([+-])=|)(\"+x+\")([a-z%]*)$\",\"i\"),Jn=/queueHooks$/,Gn=[nr],Qn={\"*\":[function(e,t){var n,r,i=this.createTween(e,t),o=Yn.exec(t),a=i.cur(),s=+a||0,u=1,l=20;if(o){if(n=+o[2],r=o[3]||(b.cssNumber[e]?\"\":\"px\"),\"px\"!==r&&s){s=b.css(i.elem,e,!0)||n||1;do u=u||\".5\",s/=u,b.style(i.elem,e,s+r);while(u!==(u=i.cur()/a)&&1!==u&&--l)}i.unit=r,i.start=s,i.end=o[1]?s+(o[1]+1)*n:n}return i}]};function Kn(){return setTimeout(function(){Xn=t}),Xn=b.now()}function Zn(e,t){b.each(t,function(t,n){var r=(Qn[t]||[]).concat(Qn[\"*\"]),i=0,o=r.length;for(;o>i;i++)if(r[i].call(e,t,n))return})}function er(e,t,n){var r,i,o=0,a=Gn.length,s=b.Deferred().always(function(){delete u.elem}),u=function(){if(i)return!1;var t=Xn||Kn(),n=Math.max(0,l.startTime+l.duration-t),r=n/l.duration||0,o=1-r,a=0,u=l.tweens.length;for(;u>a;a++)l.tweens[a].run(o);return s.notifyWith(e,[l,o,n]),1>o&&u?n:(s.resolveWith(e,[l]),!1)},l=s.promise({elem:e,props:b.extend({},t),opts:b.extend(!0,{specialEasing:{}},n),originalProperties:t,originalOptions:n,startTime:Xn||Kn(),duration:n.duration,tweens:[],createTween:function(t,n){var r=b.Tween(e,l.opts,t,n,l.opts.specialEasing[t]||l.opts.easing);return l.tweens.push(r),r},stop:function(t){var n=0,r=t?l.tweens.length:0;if(i)return this;for(i=!0;r>n;n++)l.tweens[n].run(1);return t?s.resolveWith(e,[l,t]):s.rejectWith(e,[l,t]),this}}),c=l.props;for(tr(c,l.opts.specialEasing);a>o;o++)if(r=Gn[o].call(l,e,c,l.opts))return r;return Zn(l,c),b.isFunction(l.opts.start)&&l.opts.start.call(e,l),b.fx.timer(b.extend(u,{elem:e,anim:l,queue:l.opts.queue})),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always)}function tr(e,t){var n,r,i,o,a;for(i in e)if(r=b.camelCase(i),o=t[r],n=e[i],b.isArray(n)&&(o=n[1],n=e[i]=n[0]),i!==r&&(e[r]=n,delete e[i]),a=b.cssHooks[r],a&&\"expand\"in a){n=a.expand(n),delete e[r];for(i in n)i in e||(e[i]=n[i],t[i]=o)}else t[r]=o}b.Animation=b.extend(er,{tweener:function(e,t){b.isFunction(e)?(t=e,e=[\"*\"]):e=e.split(\" \");var n,r=0,i=e.length;for(;i>r;r++)n=e[r],Qn[n]=Qn[n]||[],Qn[n].unshift(t)},prefilter:function(e,t){t?Gn.unshift(e):Gn.push(e)}});function nr(e,t,n){var r,i,o,a,s,u,l,c,p,f=this,d=e.style,h={},g=[],m=e.nodeType&&nn(e);n.queue||(c=b._queueHooks(e,\"fx\"),null==c.unqueued&&(c.unqueued=0,p=c.empty.fire,c.empty.fire=function(){c.unqueued||p()}),c.unqueued++,f.always(function(){f.always(function(){c.unqueued--,b.queue(e,\"fx\").length||c.empty.fire()})})),1===e.nodeType&&(\"height\"in t||\"width\"in t)&&(n.overflow=[d.overflow,d.overflowX,d.overflowY],\"inline\"===b.css(e,\"display\")&&\"none\"===b.css(e,\"float\")&&(b.support.inlineBlockNeedsLayout&&\"inline\"!==un(e.nodeName)?d.zoom=1:d.display=\"inline-block\")),n.overflow&&(d.overflow=\"hidden\",b.support.shrinkWrapBlocks||f.always(function(){d.overflow=n.overflow[0],d.overflowX=n.overflow[1],d.overflowY=n.overflow[2]}));for(i in t)if(a=t[i],Vn.exec(a)){if(delete t[i],u=u||\"toggle\"===a,a===(m?\"hide\":\"show\"))continue;g.push(i)}if(o=g.length){s=b._data(e,\"fxshow\")||b._data(e,\"fxshow\",{}),\"hidden\"in s&&(m=s.hidden),u&&(s.hidden=!m),m?b(e).show():f.done(function(){b(e).hide()}),f.done(function(){var t;b._removeData(e,\"fxshow\");for(t in h)b.style(e,t,h[t])});for(i=0;o>i;i++)r=g[i],l=f.createTween(r,m?s[r]:0),h[r]=s[r]||b.style(e,r),r in s||(s[r]=l.start,m&&(l.end=l.start,l.start=\"width\"===r||\"height\"===r?1:0))}}function rr(e,t,n,r,i){return new rr.prototype.init(e,t,n,r,i)}b.Tween=rr,rr.prototype={constructor:rr,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||\"swing\",this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(b.cssNumber[n]?\"\":\"px\")},cur:function(){var e=rr.propHooks[this.prop];return e&&e.get?e.get(this):rr.propHooks._default.get(this)},run:function(e){var t,n=rr.propHooks[this.prop];return this.pos=t=this.options.duration?b.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):rr.propHooks._default.set(this),this}},rr.prototype.init.prototype=rr.prototype,rr.propHooks={_default:{get:function(e){var t;return null==e.elem[e.prop]||e.elem.style&&null!=e.elem.style[e.prop]?(t=b.css(e.elem,e.prop,\"\"),t&&\"auto\"!==t?t:0):e.elem[e.prop]},set:function(e){b.fx.step[e.prop]?b.fx.step[e.prop](e):e.elem.style&&(null!=e.elem.style[b.cssProps[e.prop]]||b.cssHooks[e.prop])?b.style(e.elem,e.prop,e.now+e.unit):e.elem[e.prop]=e.now}}},rr.propHooks.scrollTop=rr.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},b.each([\"toggle\",\"show\",\"hide\"],function(e,t){var n=b.fn[t];b.fn[t]=function(e,r,i){return null==e||\"boolean\"==typeof e?n.apply(this,arguments):this.animate(ir(t,!0),e,r,i)}}),b.fn.extend({fadeTo:function(e,t,n,r){return this.filter(nn).css(\"opacity\",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=b.isEmptyObject(e),o=b.speed(t,n,r),a=function(){var t=er(this,b.extend({},e),o);a.finish=function(){t.stop(!0)},(i||b._data(this,\"finish\"))&&t.stop(!0)};return a.finish=a,i||o.queue===!1?this.each(a):this.queue(o.queue,a)},stop:function(e,n,r){var i=function(e){var t=e.stop;delete e.stop,t(r)};return\"string\"!=typeof e&&(r=n,n=e,e=t),n&&e!==!1&&this.queue(e||\"fx\",[]),this.each(function(){var t=!0,n=null!=e&&e+\"queueHooks\",o=b.timers,a=b._data(this);if(n)a[n]&&a[n].stop&&i(a[n]);else for(n in a)a[n]&&a[n].stop&&Jn.test(n)&&i(a[n]);for(n=o.length;n--;)o[n].elem!==this||null!=e&&o[n].queue!==e||(o[n].anim.stop(r),t=!1,o.splice(n,1));(t||!r)&&b.dequeue(this,e)})},finish:function(e){return e!==!1&&(e=e||\"fx\"),this.each(function(){var t,n=b._data(this),r=n[e+\"queue\"],i=n[e+\"queueHooks\"],o=b.timers,a=r?r.length:0;for(n.finish=!0,b.queue(this,e,[]),i&&i.cur&&i.cur.finish&&i.cur.finish.call(this),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;a>t;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}});function ir(e,t){var n,r={height:e},i=0;for(t=t?1:0;4>i;i+=2-t)n=Zt[i],r[\"margin\"+n]=r[\"padding\"+n]=e;return t&&(r.opacity=r.width=e),r}b.each({slideDown:ir(\"show\"),slideUp:ir(\"hide\"),slideToggle:ir(\"toggle\"),fadeIn:{opacity:\"show\"},fadeOut:{opacity:\"hide\"},fadeToggle:{opacity:\"toggle\"}},function(e,t){b.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),b.speed=function(e,t,n){var r=e&&\"object\"==typeof e?b.extend({},e):{complete:n||!n&&t||b.isFunction(e)&&e,duration:e,easing:n&&t||t&&!b.isFunction(t)&&t};return r.duration=b.fx.off?0:\"number\"==typeof r.duration?r.duration:r.duration in b.fx.speeds?b.fx.speeds[r.duration]:b.fx.speeds._default,(null==r.queue||r.queue===!0)&&(r.queue=\"fx\"),r.old=r.complete,r.complete=function(){b.isFunction(r.old)&&r.old.call(this),r.queue&&b.dequeue(this,r.queue)},r},b.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2}},b.timers=[],b.fx=rr.prototype.init,b.fx.tick=function(){var e,n=b.timers,r=0;for(Xn=b.now();n.length>r;r++)e=n[r],e()||n[r]!==e||n.splice(r--,1);n.length||b.fx.stop(),Xn=t},b.fx.timer=function(e){e()&&b.timers.push(e)&&b.fx.start()},b.fx.interval=13,b.fx.start=function(){Un||(Un=setInterval(b.fx.tick,b.fx.interval))},b.fx.stop=function(){clearInterval(Un),Un=null},b.fx.speeds={slow:600,fast:200,_default:400},b.fx.step={},b.expr&&b.expr.filters&&(b.expr.filters.animated=function(e){return b.grep(b.timers,function(t){return e===t.elem}).length}),b.fn.offset=function(e){if(arguments.length)return e===t?this:this.each(function(t){b.offset.setOffset(this,e,t)});var n,r,o={top:0,left:0},a=this[0],s=a&&a.ownerDocument;if(s)return n=s.documentElement,b.contains(n,a)?(typeof a.getBoundingClientRect!==i&&(o=a.getBoundingClientRect()),r=or(s),{top:o.top+(r.pageYOffset||n.scrollTop)-(n.clientTop||0),left:o.left+(r.pageXOffset||n.scrollLeft)-(n.clientLeft||0)}):o},b.offset={setOffset:function(e,t,n){var r=b.css(e,\"position\");\"static\"===r&&(e.style.position=\"relative\");var i=b(e),o=i.offset(),a=b.css(e,\"top\"),s=b.css(e,\"left\"),u=(\"absolute\"===r||\"fixed\"===r)&&b.inArray(\"auto\",[a,s])>-1,l={},c={},p,f;u?(c=i.position(),p=c.top,f=c.left):(p=parseFloat(a)||0,f=parseFloat(s)||0),b.isFunction(t)&&(t=t.call(e,n,o)),null!=t.top&&(l.top=t.top-o.top+p),null!=t.left&&(l.left=t.left-o.left+f),\"using\"in t?t.using.call(e,l):i.css(l)}},b.fn.extend({position:function(){if(this[0]){var e,t,n={top:0,left:0},r=this[0];return\"fixed\"===b.css(r,\"position\")?t=r.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),b.nodeName(e[0],\"html\")||(n=e.offset()),n.top+=b.css(e[0],\"borderTopWidth\",!0),n.left+=b.css(e[0],\"borderLeftWidth\",!0)),{top:t.top-n.top-b.css(r,\"marginTop\",!0),left:t.left-n.left-b.css(r,\"marginLeft\",!0)}}},offsetParent:function(){return this.map(function(){var e=this.offsetParent||o.documentElement;while(e&&!b.nodeName(e,\"html\")&&\"static\"===b.css(e,\"position\"))e=e.offsetParent;return e||o.documentElement})}}),b.each({scrollLeft:\"pageXOffset\",scrollTop:\"pageYOffset\"},function(e,n){var r=/Y/.test(n);b.fn[e]=function(i){return b.access(this,function(e,i,o){var a=or(e);return o===t?a?n in a?a[n]:a.document.documentElement[i]:e[i]:(a?a.scrollTo(r?b(a).scrollLeft():o,r?o:b(a).scrollTop()):e[i]=o,t)},e,i,arguments.length,null)}});function or(e){return b.isWindow(e)?e:9===e.nodeType?e.defaultView||e.parentWindow:!1}b.each({Height:\"height\",Width:\"width\"},function(e,n){b.each({padding:\"inner\"+e,content:n,\"\":\"outer\"+e},function(r,i){b.fn[i]=function(i,o){var a=arguments.length&&(r||\"boolean\"!=typeof i),s=r||(i===!0||o===!0?\"margin\":\"border\");return b.access(this,function(n,r,i){var o;return b.isWindow(n)?n.document.documentElement[\"client\"+e]:9===n.nodeType?(o=n.documentElement,Math.max(n.body[\"scroll\"+e],o[\"scroll\"+e],n.body[\"offset\"+e],o[\"offset\"+e],o[\"client\"+e])):i===t?b.css(n,r,s):b.style(n,r,i,s)},n,a?i:t,a,null)}})}),e.jQuery=e.$=b,\"function\"==typeof define&&define.amd&&define.amd.jQuery&&define(\"jquery\",[],function(){return b})})(window);"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 92816
        },
        "cache": {},
        "timings": {
          "blocked": 3.81399999605492,
          "dns": -1,
          "connect": -1,
          "send": 0.8479999960400106,
          "wait": 79.23699999810196,
          "receive": 282.7730000135489,
          "ssl": -1
        },
        "serverIPAddress": "133.242.206.244",
        "connection": "693217",
        "pageref": "page_1"
      },
      {
        "startedDateTime": "2017-06-28T09:37:40.741Z",
        "time": 366.8689999904018,
        "request": {
          "method": "GET",
          "url": "https://h2o.examp1e.net/search/oktavia-jquery-ui.js",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": ":path",
              "value": "/search/oktavia-jquery-ui.js"
            },
            {
              "name": "pragma",
              "value": "no-cache"
            },
            {
              "name": "accept-encoding",
              "value": "gzip, deflate, sdch, br"
            },
            {
              "name": "accept-language",
              "value": "en-CA,en;q=0.8,en-US;q=0.6,de;q=0.4,en-GB;q=0.2,ko;q=0.2"
            },
            {
              "name": "user-agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36"
            },
            {
              "name": "accept",
              "value": "*/*"
            },
            {
              "name": "cache-control",
              "value": "no-cache"
            },
            {
              "name": ":authority",
              "value": "h2o.examp1e.net"
            },
            {
              "name": "cookie",
              "value": "h2o_casper=AmgAAAAAAAAAAAAY1oiCMAAAApA"
            },
            {
              "name": ":scheme",
              "value": "https"
            },
            {
              "name": "referer",
              "value": "https://h2o.examp1e.net/"
            },
            {
              "name": ":method",
              "value": "GET"
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "h2o_casper",
              "value": "AmgAAAAAAAAAAAAY1oiCMAAAApA",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "date",
              "value": "Wed, 28 Jun 2017 09:37:40 GMT"
            },
            {
              "name": "last-modified",
              "value": "Thu, 14 May 2015 04:10:14 GMT"
            },
            {
              "name": "server",
              "value": "h2o/2.2.0-beta2"
            },
            {
              "name": "etag",
              "value": "\"55542026-1388\""
            },
            {
              "name": "content-type",
              "value": "application/javascript"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "set-cookie",
              "value": "h2o_casper=AmgAAAAAAAAAAAAY1oiCMAAAApA; Path=/; Expires=Tue, 01 Jan 2030 00:00:00 GMT; Secure"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "content-length",
              "value": "5000"
            }
          ],
          "cookies": [
            {
              "name": "h2o_casper",
              "value": "AmgAAAAAAAAAAAAY1oiCMAAAApA",
              "path": "/",
              "expires": "2030-01-01T00:00:00.000Z",
              "httpOnly": false,
              "secure": true
            }
          ],
          "content": {
            "size": 5000,
            "mimeType": "application/javascript",
            "text": "$(document).ready(function ()\n{\n    // it stores search object\n    var searchInstance;\n\n    function changePage(event)\n    {\n        searchInstance.setCurrentPage$I(event.data);\n        updateResult();\n    }\n\n    function clearResult()\n    {\n        $('#search').val('');\n        $('#searchresult_box').fadeOut();\n    }\n\n    // http://os0x.hatenablog.com/entry/20080827/1219815828\n    function JavaScriptLoader(src, callback)\n    {\n        var sc = document.createElement('script');\n        sc.type = 'text/javascript';\n        if (window.ActiveXObject)\n        {\n            sc.onreadystatechange = function()\n            {\n                if (sc.readyState == 'complete' || sc.readyState == 'loaded')\n                {\n                    callback(sc.readyState);\n                }\n            };\n        }\n        else\n        {\n            sc.onload = function()\n            {\n                callback('onload');\n            };\n        }\n        sc.src = src;\n        document.body.appendChild(sc);\n    }\n\n    function updateResult()\n    {\n        var totalPages = searchInstance.totalPages$();\n        var currentPage = searchInstance.currentPage$();\n        var nav = $('#searchresult_nav');\n        var resultslot = $('#searchresult');\n        nav.empty();\n        resultslot.empty();\n        var i;\n        for (i = 1; i <= totalPages; i++)\n        {\n            var pageItem = $('<span/>').text(i);\n            if (i !== currentPage)\n            {\n                pageItem.bind('click', i, changePage);\n            }\n            else\n            {\n                pageItem.addClass('selected');\n            }\n            nav.append(pageItem);\n        }\n        var results = searchInstance.getResult$();\n        for (i = 0; i < results.length; i++)\n        {\n            var result = results[i];\n            var url = result.url.slice(1);\n            var entry = $('<div/>', { \"class\": \"entry\" });\n            var link = $('<a/>', { \"href\": url }).text(result.title);\n            link.on('click', clearResult);\n            entry.append($('<div/>', { \"class\": \"title\" }).append(link));\n            entry.append($('<div/>', { \"class\": \"url\" }).text(url));\n            entry.append($('<div/>', { \"class\": \"content\" }).html(result.content));\n            resultslot.append(entry);\n        }\n    }\n\n    function searchProposal(event)\n    {\n        $('#search').val(event.data.option);\n        search();\n    }\n\n    function updateProposal()\n    {\n        var nav = $('#searchresult_nav');\n        var resultslot = $('#searchresult');\n        nav.empty();\n        resultslot.empty();\n        var proposals = searchInstance.getProposals$();\n        for (var i = 0; i < proposals.length; i++)\n        {\n            var proposal = proposals[i];\n            var listitem = $('<div/>', {\"class\": \"proposal\"});\n            listitem.append('<span>Search with:&nbsp;</span>');\n            var option = $('<span/>', {\"class\": \"option\"});\n            option.html(proposal.label);\n            option.on('click', {'option': proposal.options}, searchProposal);\n            listitem.append(option);\n            listitem.append('<span>&nbsp;&#x2192;&nbsp;' + proposal.count + ' results.</span>');\n            resultslot.append(listitem);\n        }\n    }\n\n    function search ()\n    {\n        var queryWord = $('#search').val();\n        searchInstance.search$SF$IIV$(queryWord, function (total, pages)\n        {\n            $('#searchresult_box').fadeIn();\n            console.log(\"Total: \", total);\n            if (total === 0)\n            {\n                $('#searchresult_summary').text(\"No result.\");\n                updateProposal();\n            }\n            else\n            {\n                $('#searchresult_summary').text(total + ' results.');\n                updateResult();\n            }\n        });\n    }\n\n    // initialize function\n    function initialize ()\n    {\n        if (!searchInstance)\n        {\n            var OktaviaSearch = JSX.require(\"tool/web/oktavia-search.jsx\").OktaviaSearch$I;\n            searchInstance = new OktaviaSearch(5);\n        }\n        JavaScriptLoader('search/searchindex.js', function ()\n        {\n            searchInstance.loadIndex$S(searchIndex);\n            searchIndex = null;\n        });\n        $('#searchform').on('submit', function (event) {\n            event.stopPropagation();\n            setTimeout(search, 10);\n            return false;\n        });\n        $('#close_search_box').on('click', function (event) {\n            clearResult();\n        });\n    }\n    initialize();\n});\n\n/*function keyboardHook(event)\n{\n    if (event.keyCode === 191 && document.activeElement.id !== searchBoxId) // slash\n    {\n        document.getElementById(searchBoxId).focus();\n    }\n}\n\nif (window.addEventListener)\n{\n    window.addEventListener('load', initialize, false);\n    document.addEventListener(\"keydown\" , keyboardHook);\n}\nif (window.attachEvent)\n{\n    window.attachEvent('onload', initialize);\n    document.attachEvent(\"onkeydown\" , keyboardHook);\n}\n\n})();\n});\n*/\n\n"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 5046
        },
        "cache": {},
        "timings": {
          "blocked": 3.62699999823235,
          "dns": -1,
          "connect": -1,
          "send": 0.7819999882485695,
          "wait": 80.88600001065058,
          "receive": 281.57399999327026,
          "ssl": -1
        },
        "serverIPAddress": "133.242.206.244",
        "connection": "693217",
        "pageref": "page_1"
      },
      {
        "startedDateTime": "2017-06-28T09:37:40.741Z",
        "time": 630.9269999910612,
        "request": {
          "method": "GET",
          "url": "https://h2o.examp1e.net/search/oktavia-english-search.js",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": ":path",
              "value": "/search/oktavia-english-search.js"
            },
            {
              "name": "pragma",
              "value": "no-cache"
            },
            {
              "name": "accept-encoding",
              "value": "gzip, deflate, sdch, br"
            },
            {
              "name": "accept-language",
              "value": "en-CA,en;q=0.8,en-US;q=0.6,de;q=0.4,en-GB;q=0.2,ko;q=0.2"
            },
            {
              "name": "user-agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36"
            },
            {
              "name": "accept",
              "value": "*/*"
            },
            {
              "name": "cache-control",
              "value": "no-cache"
            },
            {
              "name": ":authority",
              "value": "h2o.examp1e.net"
            },
            {
              "name": "cookie",
              "value": "h2o_casper=AmgAAAAAAAAAAAAY1oiCMAAAApA"
            },
            {
              "name": ":scheme",
              "value": "https"
            },
            {
              "name": "referer",
              "value": "https://h2o.examp1e.net/"
            },
            {
              "name": ":method",
              "value": "GET"
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "h2o_casper",
              "value": "AmgAAAAAAAAAAAAY1oiCMAAAApA",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "date",
              "value": "Wed, 28 Jun 2017 09:37:40 GMT"
            },
            {
              "name": "last-modified",
              "value": "Thu, 14 May 2015 04:10:14 GMT"
            },
            {
              "name": "server",
              "value": "h2o/2.2.0-beta2"
            },
            {
              "name": "etag",
              "value": "\"55542026-34dd6\""
            },
            {
              "name": "content-type",
              "value": "application/javascript"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "set-cookie",
              "value": "h2o_casper=AmgAAAAAAAAAAAAY1oiCMAAAApA; Path=/; Expires=Tue, 01 Jan 2030 00:00:00 GMT; Secure"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "content-length",
              "value": "216534"
            }
          ],
          "cookies": [
            {
              "name": "h2o_casper",
              "value": "AmgAAAAAAAAAAAAY1oiCMAAAApA",
              "path": "/",
              "expires": "2030-01-01T00:00:00.000Z",
              "httpOnly": false,
              "secure": true
            }
          ],
          "content": {
            "size": 216534,
            "mimeType": "application/javascript",
            "text": "// generatedy by JSX compiler 0.9.10 (2013-02-22 10:18:33 +0900; e3a1f2a04656dbfd626086b3c68606d0c9697212)\nvar JSX = {};\n(function (JSX) {\n/**\n * copies the implementations from source interface to target\n */\nfunction $__jsx_merge_interface(target, source) {\n\tfor (var k in source.prototype)\n\t\tif (source.prototype.hasOwnProperty(k))\n\t\t\ttarget.prototype[k] = source.prototype[k];\n}\n\n/**\n * defers the initialization of the property\n */\nfunction $__jsx_lazy_init(obj, prop, func) {\n\tfunction reset(obj, prop, value) {\n\t\tdelete obj[prop];\n\t\tobj[prop] = value;\n\t\treturn value;\n\t}\n\n\tObject.defineProperty(obj, prop, {\n\t\tget: function () {\n\t\t\treturn reset(obj, prop, func());\n\t\t},\n\t\tset: function (v) {\n\t\t\treset(obj, prop, v);\n\t\t},\n\t\tenumerable: true,\n\t\tconfigurable: true\n\t});\n}\n\n/**\n * sideeffect().a /= b\n */\nfunction $__jsx_div_assign(obj, prop, divisor) {\n\treturn obj[prop] = (obj[prop] / divisor) | 0;\n}\n\n/*\n * global functions, renamed to avoid conflict with local variable names\n */\nvar $__jsx_parseInt = parseInt;\nvar $__jsx_parseFloat = parseFloat;\nvar $__jsx_isNaN = isNaN;\nvar $__jsx_isFinite = isFinite;\n\nvar $__jsx_encodeURIComponent = encodeURIComponent;\nvar $__jsx_decodeURIComponent = decodeURIComponent;\nvar $__jsx_encodeURI = encodeURI;\nvar $__jsx_decodeURI = decodeURI;\n\nvar $__jsx_ObjectToString = Object.prototype.toString;\nvar $__jsx_ObjectHasOwnProperty = Object.prototype.hasOwnProperty;\n\n/*\n * profiler object, initialized afterwards\n */\nfunction $__jsx_profiler() {\n}\n\n/*\n * public interface to JSX code\n */\nJSX.require = function (path) {\n\tvar m = $__jsx_classMap[path];\n\treturn m !== undefined ? m : null;\n};\n\nJSX.profilerIsRunning = function () {\n\treturn $__jsx_profiler.getResults != null;\n};\n\nJSX.getProfileResults = function () {\n\treturn ($__jsx_profiler.getResults || function () { return {}; })();\n};\n\nJSX.postProfileResults = function (url) {\n\tif ($__jsx_profiler.postResults == null)\n\t\tthrow new Error(\"profiler has not been turned on\");\n\treturn $__jsx_profiler.postResults(url);\n};\n\nJSX.resetProfileResults = function () {\n\tif ($__jsx_profiler.resetResults == null)\n\t\tthrow new Error(\"profiler has not been turned on\");\n\treturn $__jsx_profiler.resetResults();\n};\nJSX.DEBUG = true;\n/**\n * class _Main extends Object\n * @constructor\n */\nfunction _Main() {\n}\n\n/**\n * @constructor\n */\nfunction _Main$() {\n};\n\n_Main$.prototype = new _Main;\n\n/**\n * @param {Array.<undefined|!string>} args\n */\n_Main.main$AS = function (args) {\n\tOktaviaSearch$setStemmer$LStemmer$(new EnglishStemmer$());\n};\n\nvar _Main$main$AS = _Main.main$AS;\n\n/**\n * class _Result extends Object\n * @constructor\n */\nfunction _Result() {\n}\n\n/**\n * @constructor\n * @param {!string} title\n * @param {!string} url\n * @param {!string} content\n * @param {!number} score\n */\nfunction _Result$SSSI(title, url, content, score) {\n\tthis.title = title;\n\tthis.url = url;\n\tthis.content = content;\n\tthis.score = score;\n};\n\n_Result$SSSI.prototype = new _Result;\n\n/**\n * class _Proposal extends Object\n * @constructor\n */\nfunction _Proposal() {\n}\n\n/**\n * @constructor\n * @param {!string} options\n * @param {!string} label\n * @param {!number} count\n */\nfunction _Proposal$SSI(options, label, count) {\n\tthis.options = options;\n\tthis.label = label;\n\tthis.count = count;\n};\n\n_Proposal$SSI.prototype = new _Proposal;\n\n/**\n * class OktaviaSearch extends Object\n * @constructor\n */\nfunction OktaviaSearch() {\n}\n\n/**\n * @constructor\n * @param {!number} entriesPerPage\n */\nfunction OktaviaSearch$I(entriesPerPage) {\n\tthis._queries = null;\n\tthis._result = null;\n\tthis._proposals = null;\n\tthis._currentFolderDepth = 0;\n\tthis._oktavia = new Oktavia$();\n\tthis._entriesPerPage = entriesPerPage;\n\tthis._currentPage = 1;\n\tthis._queryString = null;\n\tthis._callback = null;\n\tOktaviaSearch._instance = this;\n};\n\nOktaviaSearch$I.prototype = new OktaviaSearch;\n\n/**\n * @param {Stemmer} stemmer\n */\nOktaviaSearch.setStemmer$LStemmer$ = function (stemmer) {\n\tif (OktaviaSearch._instance) {\n\t\tOktaviaSearch._instance._oktavia.setStemmer$LStemmer$(stemmer);\n\t} else {\n\t\tOktaviaSearch._stemmer = stemmer;\n\t}\n};\n\nvar OktaviaSearch$setStemmer$LStemmer$ = OktaviaSearch.setStemmer$LStemmer$;\n\n/**\n * @param {!string} index\n */\nOktaviaSearch.prototype.loadIndex$S = function (index) {\n\tif (OktaviaSearch._stemmer) {\n\t\tthis._oktavia.setStemmer$LStemmer$(OktaviaSearch._stemmer);\n\t}\n\tthis._oktavia.load$S(Binary$base64decode$S(index));\n\tif (this._queryString) {\n\t\tthis.search$SF$IIV$((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[tool/web/oktavia-search.jsx:84:28] null access\\n            this.search(this._queryString, this._callback);\\n                            ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(this._queryString)), this._callback);\n\t\tthis._queryString = null;\n\t\tthis._callback = null;\n\t}\n};\n\n/**\n * @param {!string} queryString\n * @param {*} callback\n */\nOktaviaSearch.prototype.search$SF$IIV$ = function (queryString, callback) {\n\t/** @type {QueryStringParser} */\n\tvar queryParser;\n\t/** @type {SearchSummary} */\n\tvar summary;\n\tif (this._oktavia) {\n\t\tqueryParser = new QueryStringParser$();\n\t\tqueryParser.parse$S(queryString);\n\t\tthis._queries = queryParser.queries;\n\t\tsummary = this._oktavia.search$ALQuery$(queryParser.queries);\n\t\tconsole.log(summary);\n\t\tif (summary.size$() > 0) {\n\t\t\tthis._result = this._sortResult$LSearchSummary$(summary);\n\t\t\tthis._proposals = [  ];\n\t\t\tthis._currentPage = 1;\n\t\t} else {\n\t\t\tthis._result = [  ];\n\t\t\tif (this._queries.length > 1) {\n\t\t\t\tthis._proposals = summary.getProposal$();\n\t\t\t} else {\n\t\t\t\tthis._proposals = [  ];\n\t\t\t}\n\t\t\tthis._currentPage = 1;\n\t\t}\n\t\tcallback(this.resultSize$(), this.totalPages$());\n\t} else {\n\t\tthis._queryString = queryString;\n\t\tthis._callback = callback;\n\t}\n};\n\n/**\n * @return {!number}\n */\nOktaviaSearch.prototype.resultSize$ = function () {\n\treturn (this._result.length | 0);\n};\n\n/**\n * @return {!number}\n */\nOktaviaSearch.prototype.totalPages$ = function () {\n\tconsole.log(this._result.length);\n\tconsole.log(this._entriesPerPage);\n\tconsole.log(Math.ceil(this._result.length / this._entriesPerPage));\n\treturn (Math.ceil(this._result.length / this._entriesPerPage) | 0);\n};\n\n/**\n * @return {!number}\n */\nOktaviaSearch.prototype.currentPage$ = function () {\n\treturn this._currentPage;\n};\n\n/**\n * @param {!number} page\n */\nOktaviaSearch.prototype.setCurrentPage$I = function (page) {\n\tthis._currentPage = page;\n};\n\n/**\n * @return {!boolean}\n */\nOktaviaSearch.prototype.hasPrevPage$ = function () {\n\treturn this._currentPage !== 1;\n};\n\n/**\n * @return {!boolean}\n */\nOktaviaSearch.prototype.hasNextPage$ = function () {\n\treturn this._currentPage !== this.totalPages$();\n};\n\n/**\n * @return {Array.<undefined|_Result>}\n */\nOktaviaSearch.prototype.getResult$ = function () {\n\t/** @type {Style} */\n\tvar style;\n\t/** @type {!number} */\n\tvar start;\n\t/** @type {!number} */\n\tvar last;\n\t/** @type {Metadata} */\n\tvar metadata;\n\t/** @type {!number} */\n\tvar num;\n\t/** @type {Array.<undefined|_Result>} */\n\tvar results;\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {SearchUnit} */\n\tvar unit;\n\t/** @type {Array.<undefined|!string>} */\n\tvar info;\n\t/** @type {!number} */\n\tvar offset;\n\t/** @type {!string} */\n\tvar content;\n\t/** @type {Array.<undefined|Position>} */\n\tvar positions;\n\t/** @type {!number} */\n\tvar end;\n\t/** @type {!boolean} */\n\tvar split;\n\t/** @type {!number} */\n\tvar j;\n\t/** @type {Position} */\n\tvar pos;\n\t/** @type {!string} */\n\tvar text;\n\tstyle = new Style$S('html');\n\tstart = (this._currentPage - 1) * this._entriesPerPage;\n\tlast = Math.min(this._currentPage * this._entriesPerPage, this._result.length);\n\tmetadata = this._oktavia.getPrimaryMetadata$();\n\tnum = 250;\n\tresults = [  ];\n\tfor (i = start; i < last; i++) {\n\t\tunit = this._result[i];\n\t\tinfo = metadata.getInformation$I(unit.id).split(Oktavia.eob);\n\t\toffset = info[0].length + 1;\n\t\tcontent = metadata.getContent$I(unit.id);\n\t\tstart = 0;\n\t\tpositions = unit.getPositions$();\n\t\tif (content.indexOf((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[tool/web/oktavia-search.jsx:179:36] null access\\n            if (content.indexOf(info[0]) == 1)\\n                                    ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(info[0]))) === 1) {\n\t\t\tcontent = content.slice(info[0].length + 2, content.length);\n\t\t\tstart += info[0].length + 2;\n\t\t}\n\t\tend = start + num;\n\t\tsplit = false;\n\t\tif (positions[0].position > end - positions[0].word.length) {\n\t\t\tend = positions[0].position + Math.floor(num / 2);\n\t\t\tsplit = true;\n\t\t}\n\t\tfor (j = positions.length - 1; j > - 1; j--) {\n\t\t\tpos = positions[j];\n\t\t\tif (pos.position + pos.word.length < end) {\n\t\t\t\tcontent = [ content.slice(0, pos.position - start), style.convert$S('<hit>*</hit>').replace('*', content.slice(pos.position - start, pos.position + pos.word.length - start)), content.slice(pos.position + pos.word.length - start, content.length) ].join('');\n\t\t\t}\n\t\t}\n\t\tif (split) {\n\t\t\ttext = [ content.slice(0, Math.floor(num / 2)) + ' ...', content.slice(- Math.floor(num / 2), end - start) ].join('<br/>');\n\t\t} else {\n\t\t\ttext = content.slice(0, end - start) + ' ...<br/>';\n\t\t}\n\t\ttext = text.replace(Oktavia.eob, ' ').replace(/(<br\\/>)(<br\\/>)+/, '<br/><br/>');\n\t\tresults.push(new _Result$SSSI((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[tool/web/oktavia-search.jsx:215:41] null access\\n            results.push(new _Result(info[0], info[1], text, unit.score));\\n                                         ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(info[0])), (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[tool/web/oktavia-search.jsx:215:50] null access\\n            results.push(new _Result(info[0], info[1], text, unit.score));\\n                                                  ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(info[1])), text, unit.score));\n\t}\n\treturn results;\n};\n\n/**\n * @return {Array.<undefined|_Proposal>}\n */\nOktaviaSearch.prototype.getProposals$ = function () {\n\t/** @type {Style} */\n\tvar style;\n\t/** @type {Array.<undefined|_Proposal>} */\n\tvar results;\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {Proposal} */\n\tvar proposal;\n\t/** @type {Array.<undefined|!string>} */\n\tvar label;\n\t/** @type {Array.<undefined|!string>} */\n\tvar option;\n\t/** @type {!number} */\n\tvar j;\n\tstyle = new Style$S('html');\n\tresults = [  ];\n\tif (this._queries.length > 1) {\n\t\tfor (i = 0; i < this._proposals.length; i++) {\n\t\t\tproposal = this._proposals[i];\n\t\t\tlabel = [  ];\n\t\t\toption = [  ];\n\t\t\tfor (j = 0; j < this._queries.length; j++) {\n\t\t\t\tif (j !== proposal.omit) {\n\t\t\t\t\tlabel.push(style.convert$S('<hit>' + this._queries[j].toString() + '</hit>'));\n\t\t\t\t\toption.push(this._queries[j].toString());\n\t\t\t\t} else {\n\t\t\t\t\tlabel.push(style.convert$S('<del>' + this._queries[j].toString() + '</del>'));\n\t\t\t\t}\n\t\t\t}\n\t\t\tresults.push(new _Proposal$SSI(option.join(' '), label.join('&nbsp;'), proposal.expect));\n\t\t}\n\t}\n\treturn results;\n};\n\n/**\n * @param {SearchSummary} summary\n * @return {Array.<undefined|SearchUnit>}\n */\nOktaviaSearch.prototype._sortResult$LSearchSummary$ = function (summary) {\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {!number} */\n\tvar score;\n\t/** @type {SearchUnit} */\n\tvar unit;\n\t/** @type {!string} */\n\tvar pos;\n\t/** @type {Position} */\n\tvar position;\n\tfor (i = 0; i < summary.result.units.length; i++) {\n\t\tscore = 0;\n\t\tunit = summary.result.units[i];\n\t\tfor (pos in unit.positions) {\n\t\t\tposition = unit.positions[pos];\n\t\t\tif (this._oktavia.wordPositionType$I(position.position)) {\n\t\t\t\tscore += 10;\n\t\t\t} else {\n\t\t\t\tscore += 1;\n\t\t\t}\n\t\t\tif (! position.stemmed) {\n\t\t\t\tscore += 2;\n\t\t\t}\n\t\t}\n\t\tunit.score = (score | 0);\n\t}\n\treturn summary.getSortedResult$();\n};\n\n/**\n * class _Main$0 extends Object\n * @constructor\n */\nfunction _Main$0() {\n}\n\n/**\n * @constructor\n */\nfunction _Main$0$() {\n};\n\n_Main$0$.prototype = new _Main$0;\n\n/**\n * @param {Array.<undefined|!string>} args\n */\n_Main$0.main$AS = function (args) {\n};\n\nvar _Main$0$main$AS = _Main$0.main$AS;\n\n/**\n * class Oktavia extends Object\n * @constructor\n */\nfunction Oktavia() {\n}\n\n/**\n * @constructor\n */\nfunction Oktavia$() {\n\tthis._compressCode2utf16 = null;\n\tthis._fmindex = new FMIndex$();\n\tthis._metadatas = ({  });\n\tthis._metadataLabels = [  ];\n\tthis._stemmer = null;\n\tthis._stemmingResult = ({  });\n\tthis._utf162compressCode = [ Oktavia.eof, Oktavia.eob, Oktavia.unknown ];\n\tthis._utf162compressCode.length = 65536;\n\tthis._compressCode2utf16 = [ Oktavia.eof, Oktavia.eob, Oktavia.unknown ];\n};\n\nOktavia$.prototype = new Oktavia;\n\n/**\n * @param {Stemmer} stemmer\n */\nOktavia.prototype.setStemmer$LStemmer$ = function (stemmer) {\n\tthis._stemmer = stemmer;\n};\n\n/**\n * @return {Metadata}\n */\nOktavia.prototype.getPrimaryMetadata$ = function () {\n\treturn this._metadatas[this._metadataLabels[0]];\n};\n\n/**\n * @param {!string} key\n * @return {Section}\n */\nOktavia.prototype.addSection$S = function (key) {\n\t/** @type {Section} */\n\tvar section;\n\tif (this._metadataLabels.indexOf(key) !== - 1) {\n\t\tthrow new Error('Metadata name ' + key + ' is already exists');\n\t}\n\tthis._metadataLabels.push(key);\n\tsection = new Section$LOktavia$(this);\n\tthis._metadatas[key] = section;\n\treturn section;\n};\n\n/**\n * @param {!string} key\n * @return {Section}\n */\nOktavia.prototype.getSection$S = function (key) {\n\tif (this._metadataLabels.indexOf(key) === - 1) {\n\t\tthrow new Error('Metadata name ' + key + \" does't exists\");\n\t}\n\treturn (function (v) {\n\t\tif (! (v == null || v instanceof Section)) {\n\t\t\tdebugger;\n\t\t\tthrow new Error(\"[src/oktavia.jsx:67:36] detected invalid cast, value is not an instance of the designated type or null\\n        return this._metadatas[key] as Section;\\n                                    ^^\\n\");\n\t\t}\n\t\treturn v;\n\t}(this._metadatas[key]));\n};\n\n/**\n * @param {!string} key\n * @return {Splitter}\n */\nOktavia.prototype.addSplitter$S = function (key) {\n\t/** @type {Splitter} */\n\tvar splitter;\n\tif (this._metadataLabels.indexOf(key) !== - 1) {\n\t\tthrow new Error('Metadata name ' + key + ' is already exists');\n\t}\n\tthis._metadataLabels.push(key);\n\tsplitter = new Splitter$LOktavia$(this);\n\tthis._metadatas[key] = splitter;\n\treturn splitter;\n};\n\n/**\n * @param {!string} key\n * @return {Splitter}\n */\nOktavia.prototype.getSplitter$S = function (key) {\n\tif (this._metadataLabels.indexOf(key) === - 1) {\n\t\tthrow new Error('Metadata name ' + key + \" does't exists\");\n\t}\n\treturn (function (v) {\n\t\tif (! (v == null || v instanceof Splitter)) {\n\t\t\tdebugger;\n\t\t\tthrow new Error(\"[src/oktavia.jsx:88:36] detected invalid cast, value is not an instance of the designated type or null\\n        return this._metadatas[key] as Splitter;\\n                                    ^^\\n\");\n\t\t}\n\t\treturn v;\n\t}(this._metadatas[key]));\n};\n\n/**\n * @param {!string} key\n * @param {Array.<undefined|!string>} headers\n * @return {Table}\n */\nOktavia.prototype.addTable$SAS = function (key, headers) {\n\t/** @type {Table} */\n\tvar table;\n\tif (this._metadataLabels.indexOf(key) !== - 1) {\n\t\tthrow new Error('Metadata name ' + key + ' is already exists');\n\t}\n\tthis._metadataLabels.push(key);\n\ttable = new Table$LOktavia$AS(this, headers);\n\tthis._metadatas[key] = table;\n\treturn table;\n};\n\n/**\n * @param {!string} key\n * @return {Table}\n */\nOktavia.prototype.getTable$S = function (key) {\n\tif (this._metadataLabels.indexOf(key) === - 1) {\n\t\tthrow new Error('Metadata name ' + key + \" does't exists\");\n\t}\n\treturn (function (v) {\n\t\tif (! (v == null || v instanceof Table)) {\n\t\t\tdebugger;\n\t\t\tthrow new Error(\"[src/oktavia.jsx:109:36] detected invalid cast, value is not an instance of the designated type or null\\n        return this._metadatas[key] as Table;\\n                                    ^^\\n\");\n\t\t}\n\t\treturn v;\n\t}(this._metadatas[key]));\n};\n\n/**\n * @param {!string} key\n * @return {Block}\n */\nOktavia.prototype.addBlock$S = function (key) {\n\t/** @type {Block} */\n\tvar block;\n\tif (this._metadataLabels.indexOf(key) !== - 1) {\n\t\tthrow new Error('Metadata name ' + key + ' is already exists');\n\t}\n\tthis._metadataLabels.push(key);\n\tblock = new Block$LOktavia$(this);\n\tthis._metadatas[key] = block;\n\treturn block;\n};\n\n/**\n * @param {!string} key\n * @return {Block}\n */\nOktavia.prototype.getBlock$S = function (key) {\n\tif (this._metadataLabels.indexOf(key) === - 1) {\n\t\tthrow new Error('Metadata name ' + key + \" does't exists\");\n\t}\n\treturn (function (v) {\n\t\tif (! (v == null || v instanceof Block)) {\n\t\t\tdebugger;\n\t\t\tthrow new Error(\"[src/oktavia.jsx:130:36] detected invalid cast, value is not an instance of the designated type or null\\n        return this._metadatas[key] as Block;\\n                                    ^^\\n\");\n\t\t}\n\t\treturn v;\n\t}(this._metadatas[key]));\n};\n\n/**\n */\nOktavia.prototype.addEndOfBlock$ = function () {\n\tthis._fmindex.push$S(Oktavia.eob);\n};\n\n/**\n * @param {!string} words\n */\nOktavia.prototype.addWord$S = function (words) {\n\t/** @type {Array.<undefined|!string>} */\n\tvar str;\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {!number} */\n\tvar charCode;\n\t/** @type {undefined|!string} */\n\tvar newCharCode;\n\tstr = [  ];\n\tstr.length = words.length;\n\tfor (i = 0; i < words.length; i++) {\n\t\tcharCode = words.charCodeAt(i);\n\t\tnewCharCode = this._utf162compressCode[charCode];\n\t\tif (newCharCode == null) {\n\t\t\tnewCharCode = String.fromCharCode(this._compressCode2utf16.length);\n\t\t\tthis._utf162compressCode[charCode] = newCharCode;\n\t\t\tthis._compressCode2utf16.push(String.fromCharCode(charCode));\n\t\t}\n\t\tstr.push((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/oktavia.jsx:152:21] null access\\n            str.push(newCharCode);\\n                     ^^^^^^^^^^^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(newCharCode)));\n\t}\n\tthis._fmindex.push$S(str.join(''));\n};\n\n/**\n * @param {!string} words\n * @param {!boolean} stemming\n */\nOktavia.prototype.addWord$SB = function (words, stemming) {\n\t/** @type {Array.<undefined|!string>} */\n\tvar wordList;\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {undefined|!string} */\n\tvar originalWord;\n\t/** @type {!string} */\n\tvar headSmall;\n\t/** @type {!string} */\n\tvar baseWord;\n\t/** @type {!string} */\n\tvar compressedCodeWord;\n\t/** @type {Array.<undefined|!string>} */\n\tvar stemmedList;\n\tthis.addWord$S(words);\n\tif (stemming && this._stemmer) {\n\t\twordList = words.split(/\\s+/);\n\t\tfor (i = 0; i < wordList.length; i++) {\n\t\t\toriginalWord = wordList[i];\n\t\t\theadSmall = originalWord.slice(0, 1).toLowerCase() + originalWord.slice(1);\n\t\t\tbaseWord = this._stemmer.stemWord$S(originalWord.toLowerCase());\n\t\t\tif (originalWord.indexOf(baseWord) === - 1 && headSmall.indexOf(baseWord) === - 1) {\n\t\t\t\tcompressedCodeWord = this._convertToCompressionCode$S((function (v) {\n\t\t\t\t\tif (! (v != null)) {\n\t\t\t\t\t\tdebugger;\n\t\t\t\t\t\tthrow new Error(\"[src/oktavia.jsx:170:76] null access\\n                    var compressedCodeWord = this._convertToCompressionCode(originalWord);\\n                                                                            ^^^^^^^^^^^^\\n\");\n\t\t\t\t\t}\n\t\t\t\t\treturn v;\n\t\t\t\t}(originalWord)));\n\t\t\t\tstemmedList = this._stemmingResult[baseWord];\n\t\t\t\tif (! stemmedList) {\n\t\t\t\t\tstemmedList = [ compressedCodeWord ];\n\t\t\t\t\tthis._stemmingResult[baseWord] = stemmedList;\n\t\t\t\t} else {\n\t\t\t\t\tif (stemmedList.indexOf(compressedCodeWord) === - 1) {\n\t\t\t\t\t\tstemmedList.push(compressedCodeWord);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * @param {!string} keyword\n * @return {!string}\n */\nOktavia.prototype._convertToCompressionCode$S = function (keyword) {\n\t/** @type {Array.<undefined|!string>} */\n\tvar resultChars;\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {undefined|!string} */\n\tvar chr;\n\tresultChars = [  ];\n\tfor (i = 0; i < keyword.length; i++) {\n\t\tchr = this._utf162compressCode[keyword.charCodeAt(i)];\n\t\tif (chr == null) {\n\t\t\tresultChars.push(Oktavia.unknown);\n\t\t} else {\n\t\t\tresultChars.push((function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/oktavia.jsx:198:33] null access\\n                resultChars.push(chr);\\n                                 ^^^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(chr)));\n\t\t}\n\t}\n\treturn resultChars.join('');\n};\n\n/**\n * @param {!string} keyword\n * @param {!boolean} stemming\n * @return {Array.<undefined|!number>}\n */\nOktavia.prototype.rawSearch$SB = function (keyword, stemming) {\n\t/** @type {Array.<undefined|!number>} */\n\tvar result;\n\t/** @type {!string} */\n\tvar baseWord;\n\t/** @type {Array.<undefined|!string>} */\n\tvar stemmedList;\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {undefined|!string} */\n\tvar word;\n\tif (stemming) {\n\t\tresult = [  ];\n\t\tif (this._stemmer) {\n\t\t\tbaseWord = this._stemmer.stemWord$S(keyword.toLowerCase());\n\t\t\tstemmedList = this._stemmingResult[baseWord];\n\t\t\tif (stemmedList) {\n\t\t\t\tfor (i = 0; i < stemmedList.length; i++) {\n\t\t\t\t\tword = stemmedList[i];\n\t\t\t\t\tresult = result.concat(this._fmindex.search$S((function (v) {\n\t\t\t\t\t\tif (! (v != null)) {\n\t\t\t\t\t\t\tdebugger;\n\t\t\t\t\t\t\tthrow new Error(\"[src/oktavia.jsx:219:68] null access\\n                        result = result.concat(this._fmindex.search(word));\\n                                                                    ^^^^\\n\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn v;\n\t\t\t\t\t}(word))));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} else {\n\t\tresult = this._fmindex.search$S(this._convertToCompressionCode$S(keyword));\n\t}\n\treturn result;\n};\n\n/**\n * @param {Array.<undefined|Query>} queries\n * @return {SearchSummary}\n */\nOktavia.prototype.search$ALQuery$ = function (queries) {\n\t/** @type {SearchSummary} */\n\tvar summary;\n\t/** @type {!number} */\n\tvar i;\n\tsummary = new SearchSummary$LOktavia$(this);\n\tfor (i = 0; i < queries.length; i++) {\n\t\tsummary.addQuery$LSingleResult$(this._searchQuery$LQuery$(queries[i]));\n\t}\n\tsummary.mergeResult$();\n\treturn summary;\n};\n\n/**\n * @param {Query} query\n * @return {SingleResult}\n */\nOktavia.prototype._searchQuery$LQuery$ = function (query) {\n\t/** @type {SingleResult} */\n\tvar result;\n\t/** @type {Array.<undefined|!number>} */\n\tvar positions;\n\tresult = new SingleResult$SBB(query.word, query.or, query.not);\n\tif (query.raw) {\n\t\tpositions = this.rawSearch$SB(query.word, false);\n\t} else {\n\t\tpositions = this.rawSearch$SB(query.word, false).concat(this.rawSearch$SB(query.word, true));\n\t}\n\tthis.getPrimaryMetadata$().grouping$LSingleResult$AISB(result, positions, query.word, ! query.raw);\n\treturn result;\n};\n\n/**\n */\nOktavia.prototype.build$ = function () {\n\tthis.build$IB(5, false);\n};\n\n/**\n * @param {!number} cacheDensity\n * @param {!boolean} verbose\n */\nOktavia.prototype.build$IB = function (cacheDensity, verbose) {\n\t/** @type {!string} */\n\tvar key;\n\t/** @type {!number} */\n\tvar cacheRange;\n\t/** @type {!number} */\n\tvar maxChar;\n\tfor (key in this._metadatas) {\n\t\tthis._metadatas[key]._build$();\n\t}\n\tcacheRange = Math.round(Math.max(1, 100 / Math.min(100, Math.max(0.01, cacheDensity))));\n\tmaxChar = this._compressCode2utf16.length;\n\tthis._fmindex.build$SIIB(Oktavia.eof, maxChar, cacheRange, verbose);\n};\n\n/**\n * @return {!string}\n */\nOktavia.prototype.dump$ = function () {\n\treturn this.dump$B(false);\n};\n\n/**\n * @param {!boolean} verbose\n * @return {!string}\n */\nOktavia.prototype.dump$B = function (verbose) {\n\t/** @type {!string} */\n\tvar headerSource;\n\t/** @type {!string} */\n\tvar header;\n\t/** @type {!string} */\n\tvar fmdata;\n\t/** @type {Array.<undefined|!string>} */\n\tvar result;\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {CompressionReport} */\n\tvar report;\n\t/** @type {undefined|!string} */\n\tvar name;\n\t/** @type {!string} */\n\tvar data;\n\theaderSource = \"oktavia-01\";\n\theader = Binary$dumpString$S(headerSource).slice(1);\n\tif (verbose) {\n\t\tconsole.log(\"Source text size: \" + (this._fmindex.size$() * 2 + \"\") + ' bytes');\n\t}\n\tfmdata = this._fmindex.dump$B(verbose);\n\tresult = [ header, fmdata ];\n\tresult.push(Binary$dump16bitNumber$I(this._compressCode2utf16.length));\n\tfor (i = 3; i < this._compressCode2utf16.length; i++) {\n\t\tresult.push((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/oktavia.jsx:296:48] null access\\n            result.push(this._compressCode2utf16[i]);\\n                                                ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(this._compressCode2utf16[i])));\n\t}\n\tif (verbose) {\n\t\tconsole.log('Char Code Map: ' + (this._compressCode2utf16.length * 2 - 2 + \"\") + ' bytes');\n\t}\n\treport = new CompressionReport$();\n\tresult.push(Binary$dumpStringListMap$HASLCompressionReport$(this._stemmingResult, report));\n\tif (verbose) {\n\t\tconsole.log('Stemmed Word Table: ' + (result[result.length - 1].length + \"\") + ' bytes (' + (report.rate$() + \"\") + '%)');\n\t\tconsole.log(this._stemmingResult);\n\t}\n\tresult.push(Binary$dump16bitNumber$I(this._metadataLabels.length));\n\tfor (i = 0; i < this._metadataLabels.length; i++) {\n\t\treport = new CompressionReport$();\n\t\tname = this._metadataLabels[i];\n\t\tdata = this._metadatas[name]._dump$LCompressionReport$(report);\n\t\tresult.push(Binary$dumpString$SLCompressionReport$((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/oktavia.jsx:317:42] null access\\n            result.push(Binary.dumpString(name, report), data);\\n                                          ^^^^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(name)), report), data);\n\t\tif (verbose) {\n\t\t\tconsole.log('Meta Data ' + (function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/oktavia.jsx:320:43] null access\\n                console.log(\\'Meta Data \\' + name + \\': \\' + (data.length * 2) as string + \\' bytes (\\' + report.rate() as string + \\'%)\\');\\n                                           ^^^^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(name)) + ': ' + (data.length * 2 + \"\") + ' bytes (' + (report.rate$() + \"\") + '%)');\n\t\t}\n\t}\n\treturn result.join('');\n};\n\n/**\n * @param {!string} data\n */\nOktavia.prototype.load$S = function (data) {\n\t/** @type {!string} */\n\tvar headerSource;\n\t/** @type {!string} */\n\tvar header;\n\t/** @type {!number} */\n\tvar offset;\n\t/** @type {!number} */\n\tvar charCodeCount;\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {!number} */\n\tvar charCode;\n\t/** @type {LoadedStringListMapResult} */\n\tvar stemmedWords;\n\t/** @type {!number} */\n\tvar metadataCount;\n\t/** @type {LoadedStringResult} */\n\tvar nameResult;\n\t/** @type {!string} */\n\tvar name;\n\t/** @type {!number} */\n\tvar type;\n\theaderSource = \"oktavia-01\";\n\theader = Binary$dumpString$S(headerSource).slice(1);\n\tif (data.slice(0, 5) !== header) {\n\t\tthrow new Error('Invalid data file');\n\t}\n\tthis._metadatas = ({  });\n\tthis._metadataLabels = [  ];\n\toffset = 5;\n\toffset = this._fmindex.load$SI(data, offset);\n\tcharCodeCount = Binary$load16bitNumber$SI(data, offset++);\n\tthis._compressCode2utf16 = [ Oktavia.eof, Oktavia.eob, Oktavia.unknown ];\n\tthis._utf162compressCode = [ Oktavia.eof, Oktavia.eob, Oktavia.unknown ];\n\tfor (i = 3; i < charCodeCount; i++) {\n\t\tcharCode = Binary$load16bitNumber$SI(data, offset++);\n\t\tthis._compressCode2utf16.push(String.fromCharCode(charCode));\n\t\tthis._utf162compressCode[charCode] = String.fromCharCode(i);\n\t}\n\tstemmedWords = Binary$loadStringListMap$SI(data, offset);\n\tthis._stemmingResult = stemmedWords.result;\n\toffset = stemmedWords.offset;\n\tmetadataCount = Binary$load16bitNumber$SI(data, offset++);\n\tfor (i = 0; i < metadataCount; i++) {\n\t\tnameResult = Binary$loadString$SI(data, offset);\n\t\tname = nameResult.result;\n\t\toffset = nameResult.offset;\n\t\ttype = Binary$load16bitNumber$SI(data, offset++);\n\t\tswitch (type) {\n\t\tcase 0:\n\t\t\toffset = Section$_load$LOktavia$SSI(this, name, data, offset);\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\toffset = Splitter$_load$LOktavia$SSI(this, name, data, offset);\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\toffset = Table$_load$LOktavia$SSI(this, name, data, offset);\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\toffset = Block$_load$LOktavia$SSI(this, name, data, offset);\n\t\t\tbreak;\n\t\t}\n\t}\n};\n\n/**\n * @return {!number}\n */\nOktavia.prototype.contentSize$ = function () {\n\treturn this._fmindex.contentSize$();\n};\n\n/**\n * @param {!number} position\n * @return {!number}\n */\nOktavia.prototype.wordPositionType$I = function (position) {\n\t/** @type {!number} */\n\tvar result;\n\t/** @type {!string} */\n\tvar ahead;\n\tresult = 0;\n\tif (position === 0) {\n\t\tresult = 4;\n\t} else {\n\t\tahead = this._fmindex.getSubstring$II(position - 1, 1);\n\t\tif (/\\s/.test(ahead)) {\n\t\t\tresult = 2;\n\t\t} else {\n\t\t\tif (/\\W/.test(ahead)) {\n\t\t\t\tresult = 1;\n\t\t\t} else {\n\t\t\t\tif (Oktavia.eob === ahead) {\n\t\t\t\t\tresult = 3;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn (result | 0);\n};\n\n/**\n * @param {!number} position\n * @param {!number} length\n * @return {!string}\n */\nOktavia.prototype._getSubstring$II = function (position, length) {\n\t/** @type {!string} */\n\tvar result;\n\t/** @type {Array.<undefined|!string>} */\n\tvar str;\n\t/** @type {!number} */\n\tvar i;\n\tresult = this._fmindex.getSubstring$II(position, length);\n\tstr = [  ];\n\tfor (i = 0; i < result.length; i++) {\n\t\tstr.push((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/oktavia.jsx:415:45] null access\\n            str.push(this._compressCode2utf16[result.charCodeAt(i)]);\\n                                             ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(this._compressCode2utf16[result.charCodeAt(i)])));\n\t}\n\treturn str.join('');\n};\n\n/**\n * class Binary extends Object\n * @constructor\n */\nfunction Binary() {\n}\n\n/**\n * @constructor\n */\nfunction Binary$() {\n};\n\nBinary$.prototype = new Binary;\n\n/**\n * @param {!number} num\n * @return {!string}\n */\nBinary.dump32bitNumber$N = function (num) {\n\t/** @type {Array.<undefined|!string>} */\n\tvar result;\n\tresult = [ String.fromCharCode(Math.floor(num / 65536)) ];\n\tresult.push(String.fromCharCode(num % 65536));\n\treturn result.join(\"\");\n};\n\nvar Binary$dump32bitNumber$N = Binary.dump32bitNumber$N;\n\n/**\n * @param {!string} buffer\n * @param {!number} offset\n * @return {!number}\n */\nBinary.load32bitNumber$SI = function (buffer, offset) {\n\t/** @type {!number} */\n\tvar result;\n\tresult = buffer.charCodeAt(offset) * 65536 + buffer.charCodeAt(offset + 1);\n\treturn result;\n};\n\nvar Binary$load32bitNumber$SI = Binary.load32bitNumber$SI;\n\n/**\n * @param {!number} num\n * @return {!string}\n */\nBinary.dump16bitNumber$I = function (num) {\n\treturn String.fromCharCode(num % 65536);\n};\n\nvar Binary$dump16bitNumber$I = Binary.dump16bitNumber$I;\n\n/**\n * @param {!string} buffer\n * @param {!number} offset\n * @return {!number}\n */\nBinary.load16bitNumber$SI = function (buffer, offset) {\n\treturn (buffer.charCodeAt(offset) | 0);\n};\n\nvar Binary$load16bitNumber$SI = Binary.load16bitNumber$SI;\n\n/**\n * @param {!string} str\n * @return {!string}\n */\nBinary.dumpString$S = function (str) {\n\treturn Binary$dumpString$SLCompressionReport$(str, null);\n};\n\nvar Binary$dumpString$S = Binary.dumpString$S;\n\n/**\n * @param {!string} str\n * @param {CompressionReport} report\n * @return {!string}\n */\nBinary.dumpString$SLCompressionReport$ = function (str, report) {\n\t/** @type {!number} */\n\tvar length;\n\t/** @type {!boolean} */\n\tvar compress;\n\t/** @type {Array.<undefined|!number>} */\n\tvar charCodes;\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {!number} */\n\tvar charCode;\n\t/** @type {Array.<undefined|!string>} */\n\tvar result;\n\t/** @type {undefined|!number} */\n\tvar bytes;\n\tif (str.length > 32768) {\n\t\tstr = str.slice(0, 32768);\n\t}\n\tlength = str.length;\n\tcompress = true;\n\tcharCodes = [  ];\n\tfor (i = 0; i < length; i++) {\n\t\tcharCode = str.charCodeAt(i);\n\t\tif (charCode > 255) {\n\t\t\tcompress = false;\n\t\t\tbreak;\n\t\t}\n\t\tcharCodes.push(charCode);\n\t}\n\tif (compress) {\n\t\tresult = [ Binary$dump16bitNumber$I(length + 32768) ];\n\t\tfor (i = 0; i < length; i += 2) {\n\t\t\tbytes = charCodes[i];\n\t\t\tif (i !== length - 1) {\n\t\t\t\tbytes += (function (v) {\n\t\t\t\t\tif (! (v != null)) {\n\t\t\t\t\t\tdebugger;\n\t\t\t\t\t\tthrow new Error(\"[src/binary-util.jsx:58:38] null access\\n                    bytes += charCodes[i + 1] << 8;\\n                                      ^\\n\");\n\t\t\t\t\t}\n\t\t\t\t\treturn v;\n\t\t\t\t}(charCodes[i + 1])) << 8;\n\t\t\t}\n\t\t\tresult.push(Binary$dump16bitNumber$I((function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/binary-util.jsx:60:51] null access\\n                result.push(Binary.dump16bitNumber(bytes));\\n                                                   ^^^^^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(bytes))));\n\t\t}\n\t\tif (report) {\n\t\t\treport.add$II(length, Math.ceil(length / 2));\n\t\t}\n\t} else {\n\t\tresult = [ Binary$dump16bitNumber$I(length), str ];\n\t\tif (report) {\n\t\t\treport.add$II(length, length);\n\t\t}\n\t}\n\treturn result.join('');\n};\n\nvar Binary$dumpString$SLCompressionReport$ = Binary.dumpString$SLCompressionReport$;\n\n/**\n * @param {!string} buffer\n * @param {!number} offset\n * @return {LoadedStringResult}\n */\nBinary.loadString$SI = function (buffer, offset) {\n\treturn new LoadedStringResult$SI(buffer, offset);\n};\n\nvar Binary$loadString$SI = Binary.loadString$SI;\n\n/**\n * @param {Array.<undefined|!string>} strList\n * @return {!string}\n */\nBinary.dumpStringList$AS = function (strList) {\n\treturn Binary$dumpStringList$ASLCompressionReport$(strList, null);\n};\n\nvar Binary$dumpStringList$AS = Binary.dumpStringList$AS;\n\n/**\n * @param {Array.<undefined|!string>} strList\n * @param {CompressionReport} report\n * @return {!string}\n */\nBinary.dumpStringList$ASLCompressionReport$ = function (strList, report) {\n\t/** @type {Array.<undefined|!string>} */\n\tvar result;\n\t/** @type {!number} */\n\tvar i;\n\tresult = [ Binary$dump32bitNumber$N(strList.length) ];\n\tfor (i = 0; i < strList.length; i++) {\n\t\tresult.push(Binary$dumpString$SLCompressionReport$((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/binary-util.jsx:93:49] null access\\n            result.push(Binary.dumpString(strList[i], report));\\n                                                 ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(strList[i])), report));\n\t}\n\treturn result.join('');\n};\n\nvar Binary$dumpStringList$ASLCompressionReport$ = Binary.dumpStringList$ASLCompressionReport$;\n\n/**\n * @param {!string} buffer\n * @param {!number} offset\n * @return {LoadedStringListResult}\n */\nBinary.loadStringList$SI = function (buffer, offset) {\n\treturn new LoadedStringListResult$SI(buffer, offset);\n};\n\nvar Binary$loadStringList$SI = Binary.loadStringList$SI;\n\n/**\n * @param {Object.<string, undefined|Array.<undefined|!string>>} strMap\n * @return {!string}\n */\nBinary.dumpStringListMap$HAS = function (strMap) {\n\treturn Binary$dumpStringListMap$HASLCompressionReport$(strMap, null);\n};\n\nvar Binary$dumpStringListMap$HAS = Binary.dumpStringListMap$HAS;\n\n/**\n * @param {Object.<string, undefined|Array.<undefined|!string>>} strMap\n * @param {CompressionReport} report\n * @return {!string}\n */\nBinary.dumpStringListMap$HASLCompressionReport$ = function (strMap, report) {\n\t/** @type {Array.<undefined|!string>} */\n\tvar result;\n\t/** @type {!number} */\n\tvar counter;\n\t/** @type {!string} */\n\tvar key;\n\tresult = [  ];\n\tcounter = 0;\n\tfor (key in strMap) {\n\t\tresult.push(Binary$dumpString$SLCompressionReport$(key, report));\n\t\tresult.push(Binary$dumpStringList$ASLCompressionReport$(strMap[key], report));\n\t\tcounter++;\n\t}\n\treturn Binary$dump32bitNumber$N(counter) + result.join('');\n};\n\nvar Binary$dumpStringListMap$HASLCompressionReport$ = Binary.dumpStringListMap$HASLCompressionReport$;\n\n/**\n * @param {!string} buffer\n * @param {!number} offset\n * @return {LoadedStringListMapResult}\n */\nBinary.loadStringListMap$SI = function (buffer, offset) {\n\treturn new LoadedStringListMapResult$SI(buffer, offset);\n};\n\nvar Binary$loadStringListMap$SI = Binary.loadStringListMap$SI;\n\n/**\n * @param {Array.<undefined|!number>} array\n * @return {!string}\n */\nBinary.dump32bitNumberList$AN = function (array) {\n\treturn Binary$dump32bitNumberList$ANLCompressionReport$(array, null);\n};\n\nvar Binary$dump32bitNumberList$AN = Binary.dump32bitNumberList$AN;\n\n/**\n * @param {Array.<undefined|!number>} array\n * @param {CompressionReport} report\n * @return {!string}\n */\nBinary.dump32bitNumberList$ANLCompressionReport$ = function (array, report) {\n\t/** @type {Array.<undefined|!string>} */\n\tvar result;\n\t/** @type {!number} */\n\tvar index;\n\t/** @type {!number} */\n\tvar inputLength;\n\t/** @type {!number} */\n\tvar length;\n\t/** @type {!string} */\n\tvar resultString;\n\tresult = [ Binary$dump32bitNumber$N(array.length) ];\n\tindex = 0;\n\tinputLength = array.length;\n\twhile (index < inputLength) {\n\t\tif (array[index] == 0) {\n\t\t\tlength = Binary$_countZero$ANI(array, index);\n\t\t\tresult.push(Binary$_zeroBlock$I(length));\n\t\t\tindex += length;\n\t\t} else {\n\t\t\tif (Binary$_shouldZebraCode$ANI(array, index)) {\n\t\t\t\tresult.push(Binary$_createZebraCode$ANI(array, index));\n\t\t\t\tindex = Math.min(array.length, index + 15);\n\t\t\t} else {\n\t\t\t\tlength = Binary$_searchDoubleZero$ANI(array, index);\n\t\t\t\tresult.push(Binary$_nonZeroBlock$ANII(array, index, length));\n\t\t\t\tif (length === 0) {\n\t\t\t\t\tthrow new Error('');\n\t\t\t\t}\n\t\t\t\tindex += length;\n\t\t\t}\n\t\t}\n\t}\n\tresultString = result.join('');\n\tif (report) {\n\t\treport.add$II(array.length * 2 + 2, resultString.length);\n\t}\n\treturn resultString;\n};\n\nvar Binary$dump32bitNumberList$ANLCompressionReport$ = Binary.dump32bitNumberList$ANLCompressionReport$;\n\n/**\n * @param {!string} buffer\n * @param {!number} offset\n * @return {LoadedNumberListResult}\n */\nBinary.load32bitNumberList$SI = function (buffer, offset) {\n\treturn new LoadedNumberListResult$SI(buffer, offset);\n};\n\nvar Binary$load32bitNumberList$SI = Binary.load32bitNumberList$SI;\n\n/**\n * @param {Array.<undefined|!number>} array\n * @param {!number} offset\n * @return {!number}\n */\nBinary._countZero$ANI = function (array, offset) {\n\t/** @type {!number} */\n\tvar i;\n\tfor (i = offset; i < array.length; i++) {\n\t\tif (array[i] != 0) {\n\t\t\treturn (i - offset | 0);\n\t\t}\n\t}\n\treturn (array.length - offset | 0);\n};\n\nvar Binary$_countZero$ANI = Binary._countZero$ANI;\n\n/**\n * @param {!number} length\n * @return {!string}\n */\nBinary._zeroBlock$I = function (length) {\n\t/** @type {Array.<undefined|!string>} */\n\tvar result;\n\tresult = [  ];\n\twhile (length > 0) {\n\t\tif (length > 16384) {\n\t\t\tresult.push(Binary$dump16bitNumber$I(16384 - 1));\n\t\t\tlength -= 16384;\n\t\t} else {\n\t\t\tresult.push(Binary$dump16bitNumber$I(length - 1));\n\t\t\tlength = 0;\n\t\t}\n\t}\n\treturn result.join('');\n};\n\nvar Binary$_zeroBlock$I = Binary._zeroBlock$I;\n\n/**\n * @param {Array.<undefined|!number>} array\n * @param {!number} offset\n * @return {!boolean}\n */\nBinary._shouldZebraCode$ANI = function (array, offset) {\n\t/** @type {!number} */\n\tvar change;\n\t/** @type {!boolean} */\n\tvar isLastZero;\n\t/** @type {!number} */\n\tvar i;\n\tif (array.length - offset < 16) {\n\t\treturn true;\n\t}\n\tchange = 0;\n\tisLastZero = false;\n\tfor (i = offset; i < offset + 15; i++) {\n\t\tif (array[i] == 0) {\n\t\t\tif (! isLastZero) {\n\t\t\t\tisLastZero = true;\n\t\t\t\tchange++;\n\t\t\t}\n\t\t} else {\n\t\t\tif (isLastZero) {\n\t\t\t\tisLastZero = false;\n\t\t\t\tchange++;\n\t\t\t}\n\t\t}\n\t}\n\treturn change > 2;\n};\n\nvar Binary$_shouldZebraCode$ANI = Binary._shouldZebraCode$ANI;\n\n/**\n * @param {Array.<undefined|!number>} array\n * @param {!number} offset\n * @return {!number}\n */\nBinary._searchDoubleZero$ANI = function (array, offset) {\n\t/** @type {!boolean} */\n\tvar isLastZero;\n\t/** @type {!number} */\n\tvar i;\n\tisLastZero = false;\n\tfor (i = offset; i < array.length; i++) {\n\t\tif (array[i] == 0) {\n\t\t\tif (isLastZero) {\n\t\t\t\treturn (i - offset - 1 | 0);\n\t\t\t}\n\t\t\tisLastZero = true;\n\t\t} else {\n\t\t\tisLastZero = false;\n\t\t}\n\t}\n\treturn (array.length - offset | 0);\n};\n\nvar Binary$_searchDoubleZero$ANI = Binary._searchDoubleZero$ANI;\n\n/**\n * @param {Array.<undefined|!number>} array\n * @param {!number} offset\n * @param {!number} length\n * @return {!string}\n */\nBinary._nonZeroBlock$ANII = function (array, offset, length) {\n\t/** @type {Array.<undefined|!string>} */\n\tvar result;\n\t/** @type {!number} */\n\tvar blockLength;\n\t/** @type {!number} */\n\tvar i;\n\tresult = [  ];\n\twhile (length > 0) {\n\t\tif (length > 16384) {\n\t\t\tblockLength = 16384;\n\t\t\tlength -= 16384;\n\t\t} else {\n\t\t\tblockLength = length;\n\t\t\tlength = 0;\n\t\t}\n\t\tresult.push(Binary$dump16bitNumber$I(blockLength - 1 + 0x4000));\n\t\tfor (i = offset; i < offset + blockLength; i++) {\n\t\t\tresult.push(Binary$dump32bitNumber$N((function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/binary-util.jsx:274:56] null access\\n                result.push(Binary.dump32bitNumber(array[i]));\\n                                                        ^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(array[i]))));\n\t\t}\n\t\toffset += blockLength;\n\t}\n\treturn result.join('');\n};\n\nvar Binary$_nonZeroBlock$ANII = Binary._nonZeroBlock$ANII;\n\n/**\n * @param {Array.<undefined|!number>} array\n * @param {!number} offset\n * @return {!string}\n */\nBinary._createZebraCode$ANI = function (array, offset) {\n\t/** @type {!number} */\n\tvar last;\n\t/** @type {!number} */\n\tvar code;\n\t/** @type {Array.<undefined|!string>} */\n\tvar result;\n\t/** @type {!number} */\n\tvar i;\n\tlast = Math.min(offset + 15, array.length);\n\tcode = 0x8000;\n\tresult = [  ];\n\tfor (i = offset; i < last; i++) {\n\t\tif (array[i] != 0) {\n\t\t\tresult.push(Binary$dump32bitNumber$N((function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/binary-util.jsx:290:56] null access\\n                result.push(Binary.dump32bitNumber(array[i]));\\n                                                        ^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(array[i]))));\n\t\t\tcode = code + (0x1 << i - offset);\n\t\t}\n\t}\n\treturn String.fromCharCode(code) + result.join('');\n};\n\nvar Binary$_createZebraCode$ANI = Binary._createZebraCode$ANI;\n\n/**\n * @param {!string} str\n * @return {!string}\n */\nBinary.base64encode$S = function (str) {\n\t/** @type {Array.<undefined|!string>} */\n\tvar out;\n\t/** @type {Array.<undefined|!number>} */\n\tvar source;\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {!number} */\n\tvar code;\n\t/** @type {!number} */\n\tvar len;\n\t/** @type {!number} */\n\tvar c1;\n\t/** @type {undefined|!number} */\n\tvar c2;\n\t/** @type {undefined|!number} */\n\tvar c3;\n\tout = [  ];\n\tsource = [  ];\n\tfor (i = 0; i < str.length; i++) {\n\t\tcode = str.charCodeAt(i);\n\t\tsource.push(code & 0x00ff, code >>> 8);\n\t}\n\tlen = str.length * 2;\n\ti = 0;\n\twhile (i < len) {\n\t\tc1 = (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/binary-util.jsx:319:23] null access\\n        var c1 = source[i++] & 0xff;\\n                       ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(source[i++])) & 0xff;\n\t\tif (i === len) {\n\t\t\tout.push(Binary._base64EncodeChars.charAt(c1 >> 2));\n\t\t\tout.push(Binary._base64EncodeChars.charAt((c1 & 0x3) << 4));\n\t\t\tout.push(\"==\");\n\t\t\tbreak;\n\t\t}\n\t\tc2 = source[i++];\n\t\tif (i === len) {\n\t\t\tout.push(Binary._base64EncodeChars.charAt(c1 >> 2));\n\t\t\tout.push(Binary._base64EncodeChars.charAt((c1 & 0x3) << 4 | ((function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/binary-util.jsx:331:75] null access\\n            out.push(Binary._base64EncodeChars.charAt(((c1 & 0x3)<< 4) | ((c2 & 0xF0) >> 4)));\\n                                                                           ^^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(c2)) & 0xF0) >> 4));\n\t\t\tout.push(Binary._base64EncodeChars.charAt(((function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/binary-util.jsx:332:55] null access\\n            out.push(Binary._base64EncodeChars.charAt((c2 & 0xF) << 2));\\n                                                       ^^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(c2)) & 0xF) << 2));\n\t\t\tout.push(\"=\");\n\t\t\tbreak;\n\t\t}\n\t\tc3 = source[i++];\n\t\tout.push(Binary._base64EncodeChars.charAt(c1 >> 2));\n\t\tout.push(Binary._base64EncodeChars.charAt((c1 & 0x3) << 4 | ((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/binary-util.jsx:338:71] null access\\n        out.push(Binary._base64EncodeChars.charAt(((c1 & 0x3)<< 4) | ((c2 & 0xF0) >> 4)));\\n                                                                       ^^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(c2)) & 0xF0) >> 4));\n\t\tout.push(Binary._base64EncodeChars.charAt(((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/binary-util.jsx:339:52] null access\\n        out.push(Binary._base64EncodeChars.charAt(((c2 & 0xF) << 2) | ((c3 & 0xC0) >>6)));\\n                                                    ^^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(c2)) & 0xF) << 2 | ((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/binary-util.jsx:339:72] null access\\n        out.push(Binary._base64EncodeChars.charAt(((c2 & 0xF) << 2) | ((c3 & 0xC0) >>6)));\\n                                                                        ^^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(c3)) & 0xC0) >> 6));\n\t\tout.push(Binary._base64EncodeChars.charAt((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/binary-util.jsx:340:50] null access\\n        out.push(Binary._base64EncodeChars.charAt(c3 & 0x3F));\\n                                                  ^^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(c3)) & 0x3F));\n\t}\n\treturn out.join('');\n};\n\nvar Binary$base64encode$S = Binary.base64encode$S;\n\n/**\n * @param {Array.<undefined|!number>} source\n * @return {!string}\n */\nBinary._mergeCharCode$AI = function (source) {\n\t/** @type {Array.<undefined|!string>} */\n\tvar result;\n\t/** @type {!number} */\n\tvar i;\n\tresult = [  ];\n\tfor (i = 0; i < source.length; i += 2) {\n\t\tresult.push(String.fromCharCode((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/binary-util.jsx:360:50] null access\\n            result.push(String.fromCharCode(source[i] + (source[i + 1] << 8)));\\n                                                  ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(source[i])) + ((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/binary-util.jsx:360:63] null access\\n            result.push(String.fromCharCode(source[i] + (source[i + 1] << 8)));\\n                                                               ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(source[i + 1])) << 8)));\n\t}\n\treturn result.join('');\n};\n\nvar Binary$_mergeCharCode$AI = Binary._mergeCharCode$AI;\n\n/**\n * @param {!string} str\n * @return {!string}\n */\nBinary.base64decode$S = function (str) {\n\t/** @type {!number} */\n\tvar len;\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {Array.<undefined|!number>} */\n\tvar out;\n\t/** @type {undefined|!number} */\n\tvar c1;\n\t/** @type {undefined|!number} */\n\tvar c2;\n\t/** @type {!number} */\n\tvar c3;\n\t/** @type {!number} */\n\tvar c4;\n\tlen = str.length;\n\ti = 0;\n\tout = [  ];\n\twhile (i < len) {\n\t\tdo {\n\t\t\tc1 = Binary._base64DecodeChars[str.charCodeAt(i++) & 0xff];\n\t\t} while (i < len && c1 == - 1);\n\t\tif (c1 == - 1) {\n\t\t\tbreak;\n\t\t}\n\t\tdo {\n\t\t\tc2 = Binary._base64DecodeChars[str.charCodeAt(i++) & 0xff];\n\t\t} while (i < len && c2 == - 1);\n\t\tif (c2 == - 1) {\n\t\t\tbreak;\n\t\t}\n\t\tout.push((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/binary-util.jsx:391:18] null access\\n        out.push((c1 << 2) | ((c2 & 0x30) >> 4));\\n                  ^^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(c1)) << 2 | ((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/binary-util.jsx:391:31] null access\\n        out.push((c1 << 2) | ((c2 & 0x30) >> 4));\\n                               ^^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(c2)) & 0x30) >> 4);\n\t\tdo {\n\t\t\tc3 = str.charCodeAt(i++) & 0xff;\n\t\t\tif (c3 === 61) {\n\t\t\t\treturn Binary$_mergeCharCode$AI(out);\n\t\t\t}\n\t\t\tc3 = (function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/binary-util.jsx:399:42] null access\\n            c3 = Binary._base64DecodeChars[c3];\\n                                          ^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(Binary._base64DecodeChars[c3]));\n\t\t} while (i < len && c3 === - 1);\n\t\tif (c3 === - 1) {\n\t\t\tbreak;\n\t\t}\n\t\tout.push(((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/binary-util.jsx:405:19] null access\\n        out.push(((c2 & 0XF) << 4) | ((c3 & 0x3C) >> 2));\\n                   ^^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(c2)) & 0XF) << 4 | (c3 & 0x3C) >> 2);\n\t\tdo {\n\t\t\tc4 = str.charCodeAt(i++) & 0xff;\n\t\t\tif (c4 === 61) {\n\t\t\t\treturn Binary$_mergeCharCode$AI(out);\n\t\t\t}\n\t\t\tc4 = ((function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/binary-util.jsx:414:42] null access\\n            c4 = Binary._base64DecodeChars[c4];\\n                                          ^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(Binary._base64DecodeChars[c4])) | 0);\n\t\t} while (i < len && c4 === - 1);\n\t\tif (c4 === - 1) {\n\t\t\tbreak;\n\t\t}\n\t\tout.push((c3 & 0x03) << 6 | c4);\n\t}\n\treturn Binary$_mergeCharCode$AI(out);\n};\n\nvar Binary$base64decode$S = Binary.base64decode$S;\n\n/**\n * class LoadedStringResult extends Object\n * @constructor\n */\nfunction LoadedStringResult() {\n}\n\n/**\n * @constructor\n * @param {!string} data\n * @param {!number} offset\n */\nfunction LoadedStringResult$SI(data, offset) {\n\t/** @type {!number} */\n\tvar strLength;\n\t/** @type {Array.<undefined|!string>} */\n\tvar bytes;\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {!number} */\n\tvar code;\n\tthis.result = \"\";\n\tthis.offset = 0;\n\tstrLength = Binary$load16bitNumber$SI(data, offset++);\n\tif (strLength > 32767) {\n\t\tstrLength = strLength - 32768;\n\t\tbytes = [  ];\n\t\tfor (i = 0; i < strLength; i += 2) {\n\t\t\tcode = data.charCodeAt(offset);\n\t\t\tbytes.push(String.fromCharCode(code & 0x00ff));\n\t\t\tif (i !== strLength - 1) {\n\t\t\t\tbytes.push(String.fromCharCode(code >>> 8));\n\t\t\t}\n\t\t\toffset++;\n\t\t}\n\t\tthis.result = bytes.join('');\n\t\tthis.offset = offset;\n\t} else {\n\t\tthis.result = data.slice(offset, offset + strLength);\n\t\tthis.offset = (offset + strLength | 0);\n\t}\n};\n\nLoadedStringResult$SI.prototype = new LoadedStringResult;\n\n/**\n * class LoadedStringListResult extends Object\n * @constructor\n */\nfunction LoadedStringListResult() {\n}\n\n/**\n * @constructor\n * @param {!string} data\n * @param {!number} offset\n */\nfunction LoadedStringListResult$SI(data, offset) {\n\t/** @type {!number} */\n\tvar length;\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {!number} */\n\tvar strLength;\n\t/** @type {!string} */\n\tvar resultStr;\n\t/** @type {Array.<undefined|!string>} */\n\tvar bytes;\n\t/** @type {!number} */\n\tvar j;\n\t/** @type {!number} */\n\tvar code;\n\tthis.offset = 0;\n\tthis.result = [  ];\n\tlength = Binary$load32bitNumber$SI(data, offset);\n\toffset += 2;\n\tfor (i = 0; i < length; i++) {\n\t\tstrLength = Binary$load16bitNumber$SI(data, offset++);\n\t\tif (strLength > 32767) {\n\t\t\tstrLength = strLength - 32768;\n\t\t\tbytes = [  ];\n\t\t\tfor (j = 0; j < strLength; j += 2) {\n\t\t\t\tcode = data.charCodeAt(offset);\n\t\t\t\tbytes.push(String.fromCharCode(code & 0x00ff));\n\t\t\t\tif (j !== strLength - 1) {\n\t\t\t\t\tbytes.push(String.fromCharCode(code >>> 8));\n\t\t\t\t}\n\t\t\t\toffset++;\n\t\t\t}\n\t\t\tresultStr = bytes.join('');\n\t\t} else {\n\t\t\tresultStr = data.slice(offset, offset + strLength);\n\t\t\toffset = (offset + strLength | 0);\n\t\t}\n\t\tthis.result.push(resultStr);\n\t}\n\tthis.offset = offset;\n};\n\nLoadedStringListResult$SI.prototype = new LoadedStringListResult;\n\n/**\n * class LoadedStringListMapResult extends Object\n * @constructor\n */\nfunction LoadedStringListMapResult() {\n}\n\n/**\n * @constructor\n * @param {!string} data\n * @param {!number} offset\n */\nfunction LoadedStringListMapResult$SI(data, offset) {\n\t/** @type {!number} */\n\tvar length;\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {LoadedStringResult} */\n\tvar keyResult;\n\t/** @type {LoadedStringListResult} */\n\tvar valueResult;\n\tthis.offset = 0;\n\tthis.result = ({  });\n\tlength = Binary$load32bitNumber$SI(data, offset);\n\toffset += 2;\n\tfor (i = 0; i < length; i++) {\n\t\tkeyResult = Binary$loadString$SI(data, offset);\n\t\tvalueResult = Binary$loadStringList$SI(data, keyResult.offset);\n\t\tthis.result[keyResult.result] = valueResult.result;\n\t\toffset = valueResult.offset;\n\t}\n\tthis.offset = offset;\n};\n\nLoadedStringListMapResult$SI.prototype = new LoadedStringListMapResult;\n\n/**\n * class LoadedNumberListResult extends Object\n * @constructor\n */\nfunction LoadedNumberListResult() {\n}\n\n/**\n * @constructor\n * @param {!string} data\n * @param {!number} offset\n */\nfunction LoadedNumberListResult$SI(data, offset) {\n\t/** @type {!number} */\n\tvar resultLength;\n\t/** @type {!number} */\n\tvar originalOffset;\n\t/** @type {Array.<undefined|!number>} */\n\tvar result;\n\t/** @type {!number} */\n\tvar tag;\n\t/** @type {!number} */\n\tvar length;\n\t/** @type {!number} */\n\tvar i;\n\tthis.result = null;\n\tthis.offset = 0;\n\tresultLength = Binary$load32bitNumber$SI(data, offset);\n\toriginalOffset = offset;\n\toffset += 2;\n\tresult = [  ];\n\twhile (result.length < resultLength) {\n\t\ttag = data.charCodeAt(offset++);\n\t\tif (tag >>> 15 === 1) {\n\t\t\tlength = Math.min(resultLength - result.length, 15);\n\t\t\tfor (i = 0; i < length; i++) {\n\t\t\t\tif (tag >>> i & 0x1) {\n\t\t\t\t\tresult.push(Binary$load32bitNumber$SI(data, offset));\n\t\t\t\t\toffset += 2;\n\t\t\t\t} else {\n\t\t\t\t\tresult.push(0);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (tag >>> 14 === 1) {\n\t\t\t\tlength = tag - 0x4000 + 1;\n\t\t\t\tfor (i = 0; i < length; i++) {\n\t\t\t\t\tresult.push(Binary$load32bitNumber$SI(data, offset));\n\t\t\t\t\toffset += 2;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlength = tag + 1;\n\t\t\t\tfor (i = 0; i < length; i++) {\n\t\t\t\t\tresult.push(0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tthis.result = result;\n\tthis.offset = offset;\n};\n\nLoadedNumberListResult$SI.prototype = new LoadedNumberListResult;\n\n/**\n * class CompressionReport extends Object\n * @constructor\n */\nfunction CompressionReport() {\n}\n\n/**\n * @constructor\n */\nfunction CompressionReport$() {\n\tthis.source = 0;\n\tthis.result = 0;\n};\n\nCompressionReport$.prototype = new CompressionReport;\n\n/**\n * @param {!number} source\n * @param {!number} result\n */\nCompressionReport.prototype.add$II = function (source, result) {\n\tthis.source += source;\n\tthis.result += result;\n};\n\n/**\n * @return {!number}\n */\nCompressionReport.prototype.rate$ = function () {\n\treturn (Math.round(this.result * 100.0 / this.source) | 0);\n};\n\n/**\n * class Query extends Object\n * @constructor\n */\nfunction Query() {\n}\n\n/**\n * @constructor\n */\nfunction Query$() {\n\tthis.word = '';\n\tthis.or = false;\n\tthis.not = false;\n\tthis.raw = false;\n};\n\nQuery$.prototype = new Query;\n\n/**\n * @return {!string}\n */\nQuery.prototype.toString = function () {\n\t/** @type {Array.<undefined|!string>} */\n\tvar result;\n\tresult = [  ];\n\tif (this.or) {\n\t\tresult.push(\"OR \");\n\t}\n\tif (this.not) {\n\t\tresult.push(\"-\");\n\t}\n\tif (this.raw) {\n\t\tresult.push('\"', this.word, '\"');\n\t} else {\n\t\tresult.push(this.word);\n\t}\n\treturn result.join('');\n};\n\n/**\n * class QueryStringParser extends Object\n * @constructor\n */\nfunction QueryStringParser() {\n}\n\n/**\n * @constructor\n */\nfunction QueryStringParser$() {\n\tthis.queries = [  ];\n};\n\nQueryStringParser$.prototype = new QueryStringParser;\n\n/**\n * @param {!string} queryString\n */\nQueryStringParser.prototype.parse$S = function (queryString) {\n\t/** @type {!boolean} */\n\tvar nextOr;\n\t/** @type {!boolean} */\n\tvar nextNot;\n\t/** @type {!number} */\n\tvar currentWordStart;\n\t/** @type {!number} */\n\tvar status;\n\t/** @type {RegExp} */\n\tvar isSpace;\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {!string} */\n\tvar ch;\n\t/** @type {!string} */\n\tvar word;\n\t/** @type {Query} */\n\tvar query;\n\tnextOr = false;\n\tnextNot = false;\n\tcurrentWordStart = 0;\n\tstatus = 0;\n\tisSpace = /[\\s\\u3000]/;\n\tfor (i = 0; i < queryString.length; i++) {\n\t\tch = queryString.charAt(i);\n\t\tswitch (status) {\n\t\tcase 0:\n\t\t\tif (! isSpace.test(ch)) {\n\t\t\t\tif (ch === '-') {\n\t\t\t\t\tnextNot = true;\n\t\t\t\t} else {\n\t\t\t\t\tif (ch === '\"') {\n\t\t\t\t\t\tcurrentWordStart = i + 1;\n\t\t\t\t\t\tstatus = 2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcurrentWordStart = i;\n\t\t\t\t\t\tstatus = 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tnextNot = false;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tif (isSpace.test(ch)) {\n\t\t\t\tword = queryString.slice(currentWordStart, i);\n\t\t\t\tif (word === 'OR') {\n\t\t\t\t\tnextOr = true;\n\t\t\t\t} else {\n\t\t\t\t\tquery = new Query$();\n\t\t\t\t\tquery.word = word;\n\t\t\t\t\tquery.or = nextOr;\n\t\t\t\t\tquery.not = nextNot;\n\t\t\t\t\tthis.queries.push(query);\n\t\t\t\t\tnextOr = false;\n\t\t\t\t\tnextNot = false;\n\t\t\t\t}\n\t\t\t\tstatus = 0;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tif (ch === '\"') {\n\t\t\t\tword = queryString.slice(currentWordStart, i);\n\t\t\t\tquery = new Query$();\n\t\t\t\tquery.word = word;\n\t\t\t\tquery.or = nextOr;\n\t\t\t\tquery.not = nextNot;\n\t\t\t\tquery.raw = true;\n\t\t\t\tthis.queries.push(query);\n\t\t\t\tnextOr = false;\n\t\t\t\tnextNot = false;\n\t\t\t\tstatus = 0;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\tswitch (status) {\n\tcase 0:\n\t\tbreak;\n\tcase 1:\n\t\tquery = new Query$();\n\t\tword = queryString.slice(currentWordStart, queryString.length);\n\t\tif (word !== 'OR') {\n\t\t\tquery.word = word;\n\t\t\tquery.or = nextOr;\n\t\t\tquery.not = nextNot;\n\t\t\tthis.queries.push(query);\n\t\t}\n\t\tbreak;\n\tcase 2:\n\t\tquery = new Query$();\n\t\tquery.word = queryString.slice(currentWordStart, queryString.length);\n\t\tquery.or = nextOr;\n\t\tquery.not = nextNot;\n\t\tquery.raw = true;\n\t\tthis.queries.push(query);\n\t\tbreak;\n\t}\n};\n\n/**\n * class Proposal extends Object\n * @constructor\n */\nfunction Proposal() {\n}\n\n/**\n * @constructor\n * @param {!number} omit\n * @param {!number} expect\n */\nfunction Proposal$II(omit, expect) {\n\tthis.omit = omit;\n\tthis.expect = expect;\n};\n\nProposal$II.prototype = new Proposal;\n\n/**\n * class Position extends Object\n * @constructor\n */\nfunction Position() {\n}\n\n/**\n * @constructor\n * @param {!string} word\n * @param {!number} position\n * @param {!boolean} stemmed\n */\nfunction Position$SIB(word, position, stemmed) {\n\tthis.word = word;\n\tthis.position = position;\n\tthis.stemmed = stemmed;\n};\n\nPosition$SIB.prototype = new Position;\n\n/**\n * class SearchUnit extends Object\n * @constructor\n */\nfunction SearchUnit() {\n}\n\n/**\n * @constructor\n * @param {!number} id\n */\nfunction SearchUnit$I(id) {\n\tthis.positions = ({  });\n\tthis.id = id;\n\tthis._size = 0;\n\tthis.score = 0;\n\tthis.startPosition = (- 1 | 0);\n};\n\nSearchUnit$I.prototype = new SearchUnit;\n\n/**\n * @param {!string} word\n * @param {!number} position\n * @param {!boolean} stemmed\n */\nSearchUnit.prototype.addPosition$SIB = function (word, position, stemmed) {\n\t/** @type {Position} */\n\tvar positionObj;\n\tpositionObj = this.positions[position + \"\"];\n\tif (! positionObj) {\n\t\tthis._size++;\n\t\tthis.positions[position + \"\"] = new Position$SIB(word, position, stemmed);\n\t} else {\n\t\tif (positionObj.word.length < word.length) {\n\t\t\tpositionObj.word = word;\n\t\t}\n\t\tpositionObj.stemmed = positionObj.stemmed && stemmed;\n\t}\n};\n\n/**\n * @param {!number} position\n * @return {Position}\n */\nSearchUnit.prototype.get$I = function (position) {\n\treturn this.positions[position + \"\"];\n};\n\n/**\n * @return {!number}\n */\nSearchUnit.prototype.size$ = function () {\n\treturn this._size;\n};\n\n/**\n * @param {SearchUnit} rhs\n */\nSearchUnit.prototype.merge$LSearchUnit$ = function (rhs) {\n\t/** @type {!string} */\n\tvar position;\n\t/** @type {Position} */\n\tvar pos;\n\tfor (position in rhs.positions) {\n\t\tpos = rhs.positions[position];\n\t\tthis.addPosition$SIB(pos.word, pos.position, pos.stemmed);\n\t}\n};\n\n/**\n * @return {Array.<undefined|Position>}\n */\nSearchUnit.prototype.getPositions$ = function () {\n\tvar $this = this;\n\t/** @type {Array.<undefined|Position>} */\n\tvar result;\n\t/** @type {!string} */\n\tvar pos;\n\tresult = [  ];\n\tfor (pos in this.positions) {\n\t\tresult.push(this.positions[pos]);\n\t}\n\tresult.sort((function (a, b) {\n\t\treturn a.position - b.position;\n\t}));\n\treturn result;\n};\n\n/**\n * class SingleResult extends Object\n * @constructor\n */\nfunction SingleResult() {\n}\n\n/**\n * @constructor\n */\nfunction SingleResult$() {\n\tthis.units = [  ];\n\tthis.unitIds = [  ];\n\tthis.or = false;\n\tthis.not = false;\n\tthis.searchWord = '';\n};\n\nSingleResult$.prototype = new SingleResult;\n\n/**\n * @constructor\n * @param {!string} searchWord\n * @param {!boolean} or\n * @param {!boolean} not\n */\nfunction SingleResult$SBB(searchWord, or, not) {\n\tthis.units = [  ];\n\tthis.unitIds = [  ];\n\tthis.or = or;\n\tthis.not = not;\n\tthis.searchWord = searchWord;\n};\n\nSingleResult$SBB.prototype = new SingleResult;\n\n/**\n * @param {!number} unitId\n * @return {SearchUnit}\n */\nSingleResult.prototype.getSearchUnit$I = function (unitId) {\n\t/** @type {!number} */\n\tvar existing;\n\t/** @type {SearchUnit} */\n\tvar result;\n\texisting = this.unitIds.indexOf(unitId);\n\tif (existing === - 1) {\n\t\tresult = new SearchUnit$I(unitId);\n\t\tthis.units.push(result);\n\t\tthis.unitIds.push(unitId);\n\t} else {\n\t\tresult = this.units[existing];\n\t}\n\treturn result;\n};\n\n/**\n * @param {SingleResult} rhs\n * @return {SingleResult}\n */\nSingleResult.prototype.merge$LSingleResult$ = function (rhs) {\n\t/** @type {SingleResult} */\n\tvar result;\n\tresult = new SingleResult$();\n\tif (rhs.or) {\n\t\tthis._orMerge$LSingleResult$LSingleResult$(result, rhs);\n\t} else {\n\t\tif (rhs.not) {\n\t\t\tthis._notMerge$LSingleResult$LSingleResult$(result, rhs);\n\t\t} else {\n\t\t\tthis._andMerge$LSingleResult$LSingleResult$(result, rhs);\n\t\t}\n\t}\n\treturn result;\n};\n\n/**\n * @return {!number}\n */\nSingleResult.prototype.size$ = function () {\n\treturn (this.units.length | 0);\n};\n\n/**\n * @param {SingleResult} result\n * @param {SingleResult} rhs\n */\nSingleResult.prototype._andMerge$LSingleResult$LSingleResult$ = function (result, rhs) {\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {undefined|!number} */\n\tvar id;\n\t/** @type {SearchUnit} */\n\tvar lhsSection;\n\tfor (i = 0; i < this.unitIds.length; i++) {\n\t\tid = this.unitIds[i];\n\t\tif (rhs.unitIds.indexOf(id) !== - 1) {\n\t\t\tlhsSection = this.units[i];\n\t\t\tresult.unitIds.push((function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/search-result.jsx:168:36] null access\\n                result.unitIds.push(id);\\n                                    ^^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(id)));\n\t\t\tresult.units.push(lhsSection);\n\t\t}\n\t}\n};\n\n/**\n * @param {SingleResult} result\n * @param {SingleResult} rhs\n */\nSingleResult.prototype._orMerge$LSingleResult$LSingleResult$ = function (result, rhs) {\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {undefined|!number} */\n\tvar id;\n\t/** @type {SearchUnit} */\n\tvar rhsSection;\n\t/** @type {SearchUnit} */\n\tvar lhsSection;\n\tresult.unitIds = this.unitIds.slice(0, this.unitIds.length);\n\tresult.units = this.units.slice(0, this.units.length);\n\tfor (i = 0; i < rhs.unitIds.length; i++) {\n\t\tid = rhs.unitIds[i];\n\t\trhsSection = rhs.units[i];\n\t\tif (result.unitIds.indexOf(id) !== - 1) {\n\t\t\tlhsSection = result.units[result.unitIds.indexOf(id)];\n\t\t\tlhsSection.merge$LSearchUnit$(rhsSection);\n\t\t} else {\n\t\t\tresult.unitIds.push((function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/search-result.jsx:190:36] null access\\n                result.unitIds.push(id);\\n                                    ^^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(id)));\n\t\t\tresult.units.push(rhsSection);\n\t\t}\n\t}\n};\n\n/**\n * @param {SingleResult} result\n * @param {SingleResult} rhs\n */\nSingleResult.prototype._notMerge$LSingleResult$LSingleResult$ = function (result, rhs) {\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {undefined|!number} */\n\tvar id;\n\t/** @type {SearchUnit} */\n\tvar lhsSection;\n\tfor (i = 0; i < this.unitIds.length; i++) {\n\t\tid = this.unitIds[i];\n\t\tif (rhs.unitIds.indexOf(id) === - 1) {\n\t\t\tlhsSection = this.units[i];\n\t\t\tresult.unitIds.push((function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/search-result.jsx:204:36] null access\\n                result.unitIds.push(id);\\n                                    ^^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(id)));\n\t\t\tresult.units.push(lhsSection);\n\t\t}\n\t}\n};\n\n/**\n * class SearchSummary extends Object\n * @constructor\n */\nfunction SearchSummary() {\n}\n\n/**\n * @constructor\n */\nfunction SearchSummary$() {\n\tthis.sourceResults = [  ];\n\tthis.result = null;\n\tthis.oktavia = null;\n};\n\nSearchSummary$.prototype = new SearchSummary;\n\n/**\n * @constructor\n * @param {Oktavia} oktavia\n */\nfunction SearchSummary$LOktavia$(oktavia) {\n\tthis.sourceResults = [  ];\n\tthis.result = null;\n\tthis.oktavia = oktavia;\n};\n\nSearchSummary$LOktavia$.prototype = new SearchSummary;\n\n/**\n * @param {SingleResult} result\n */\nSearchSummary.prototype.addQuery$LSingleResult$ = function (result) {\n\tthis.sourceResults.push(result);\n};\n\n/**\n */\nSearchSummary.prototype.mergeResult$ = function () {\n\tthis.result = this.mergeResult$ALSingleResult$(this.sourceResults);\n};\n\n/**\n * @param {Array.<undefined|SingleResult>} results\n * @return {SingleResult}\n */\nSearchSummary.prototype.mergeResult$ALSingleResult$ = function (results) {\n\t/** @type {SingleResult} */\n\tvar rhs;\n\t/** @type {!number} */\n\tvar i;\n\trhs = results[0];\n\tfor (i = 1; i < results.length; i++) {\n\t\trhs = rhs.merge$LSingleResult$(results[i]);\n\t}\n\treturn rhs;\n};\n\n/**\n * @return {Array.<undefined|Proposal>}\n */\nSearchSummary.prototype.getProposal$ = function () {\n\tvar $this = this;\n\t/** @type {Array.<undefined|Proposal>} */\n\tvar proposals;\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {Array.<undefined|SingleResult>} */\n\tvar tmpSource;\n\t/** @type {!number} */\n\tvar j;\n\t/** @type {SingleResult} */\n\tvar result;\n\tproposals = [  ];\n\tfor (i = 0; i < this.sourceResults.length; i++) {\n\t\ttmpSource = [  ];\n\t\tfor (j = 0; j < this.sourceResults.length; j++) {\n\t\t\tif (i !== j) {\n\t\t\t\ttmpSource.push(this.sourceResults[j]);\n\t\t\t}\n\t\t}\n\t\tresult = this.mergeResult$ALSingleResult$(tmpSource);\n\t\tproposals.push(new Proposal$II(i, result.size$()));\n\t}\n\tproposals.sort((function (a, b) {\n\t\treturn b.expect - a.expect;\n\t}));\n\treturn proposals;\n};\n\n/**\n * @return {Array.<undefined|SearchUnit>}\n */\nSearchSummary.prototype.getSortedResult$ = function () {\n\tvar $this = this;\n\t/** @type {Array.<undefined|SearchUnit>} */\n\tvar result;\n\tresult = this.result.units.slice(0, this.result.units.length);\n\tresult.sort((function (a, b) {\n\t\treturn b.score - a.score;\n\t}));\n\treturn result;\n};\n\n/**\n * @return {!number}\n */\nSearchSummary.prototype.size$ = function () {\n\treturn this.result.size$();\n};\n\n/**\n * @param {SingleResult} result\n */\nSearchSummary.prototype.add$LSingleResult$ = function (result) {\n\tthis.sourceResults.push(result);\n};\n\n/**\n * class Style extends Object\n * @constructor\n */\nfunction Style() {\n}\n\n/**\n * @constructor\n * @param {!string} mode\n */\nfunction Style$S(mode) {\n\tthis.styles = null;\n\tthis.escapeHTML = false;\n\tswitch (mode) {\n\tcase 'console':\n\t\tthis.styles = Style.console;\n\t\tbreak;\n\tcase 'html':\n\t\tthis.styles = Style.html;\n\t\tbreak;\n\tcase 'ignore':\n\t\tthis.styles = Style.ignore;\n\t\tbreak;\n\tdefault:\n\t\tthis.styles = Style.ignore;\n\t\tbreak;\n\t}\n\tthis.escapeHTML = mode === 'html';\n};\n\nStyle$S.prototype = new Style;\n\n/**\n * @param {!string} source\n * @return {!string}\n */\nStyle.prototype.convert$S = function (source) {\n\t/** @type {_HTMLHandler} */\n\tvar handler;\n\t/** @type {SAXParser} */\n\tvar parser;\n\thandler = new _HTMLHandler$HASB(this.styles, this.escapeHTML);\n\tparser = new SAXParser$LSAXHandler$(handler);\n\tparser.parse$S(source);\n\treturn handler.result$();\n};\n\n/**\n * class Stemmer\n * @constructor\n */\nfunction Stemmer() {\n}\n\nStemmer.prototype.$__jsx_implements_Stemmer = true;\n\n/**\n * @constructor\n */\nfunction Stemmer$() {\n};\n\nStemmer$.prototype = new Stemmer;\n\n/**\n * class BaseStemmer extends Object\n * @constructor\n */\nfunction BaseStemmer() {\n}\n\n$__jsx_merge_interface(BaseStemmer, Stemmer);\n\n/**\n * @constructor\n */\nfunction BaseStemmer$() {\n\tStemmer$.call(this);\n\tthis.current = \"\";\n\tthis.cursor = 0;\n\tthis.limit = 0;\n\tthis.limit_backward = 0;\n\tthis.bra = 0;\n\tthis.ket = 0;\n\tthis.cache = ({  });\n\tthis.setCurrent$S(\"\");\n};\n\nBaseStemmer$.prototype = new BaseStemmer;\n\n/**\n * @param {!string} value\n */\nBaseStemmer.prototype.setCurrent$S = function (value) {\n\tthis.current = value;\n\tthis.cursor = 0;\n\tthis.limit = this.current.length;\n\tthis.limit_backward = 0;\n\tthis.bra = this.cursor;\n\tthis.ket = this.limit;\n};\n\n/**\n * @return {!string}\n */\nBaseStemmer.prototype.getCurrent$ = function () {\n\treturn this.current;\n};\n\n/**\n * @param {BaseStemmer} other\n */\nBaseStemmer.prototype.copy_from$LBaseStemmer$ = function (other) {\n\tthis.current = other.current;\n\tthis.cursor = other.cursor;\n\tthis.limit = other.limit;\n\tthis.limit_backward = other.limit_backward;\n\tthis.bra = other.bra;\n\tthis.ket = other.ket;\n};\n\n/**\n * @param {Array.<undefined|!number>} s\n * @param {!number} min\n * @param {!number} max\n * @return {!boolean}\n */\nBaseStemmer.prototype.in_grouping$AIII = function (s, min, max) {\n\t/** @type {!number} */\n\tvar ch;\n\tif (this.cursor >= this.limit) {\n\t\treturn false;\n\t}\n\tch = this.current.charCodeAt(this.cursor);\n\tif (ch > max || ch < min) {\n\t\treturn false;\n\t}\n\tch -= min;\n\tif (((function (v) {\n\t\tif (! (v != null)) {\n\t\t\tdebugger;\n\t\t\tthrow new Error(\"[src/stemmer/base-stemmer.jsx:59:10] null access\\n    if ((s[ch >>> 3] & (0x1 << (ch & 0x7))) == 0) return false;\\n          ^\\n\");\n\t\t}\n\t\treturn v;\n\t}(s[ch >>> 3])) & 0x1 << (ch & 0x7)) === 0) {\n\t\treturn false;\n\t}\n\tthis.cursor++;\n\treturn true;\n};\n\n/**\n * @param {Array.<undefined|!number>} s\n * @param {!number} min\n * @param {!number} max\n * @return {!boolean}\n */\nBaseStemmer.prototype.in_grouping_b$AIII = function (s, min, max) {\n\t/** @type {!number} */\n\tvar ch;\n\tif (this.cursor <= this.limit_backward) {\n\t\treturn false;\n\t}\n\tch = this.current.charCodeAt(this.cursor - 1);\n\tif (ch > max || ch < min) {\n\t\treturn false;\n\t}\n\tch -= min;\n\tif (((function (v) {\n\t\tif (! (v != null)) {\n\t\t\tdebugger;\n\t\t\tthrow new Error(\"[src/stemmer/base-stemmer.jsx:70:10] null access\\n    if ((s[ch >>> 3] & (0x1 << (ch & 0x7))) == 0) return false;\\n          ^\\n\");\n\t\t}\n\t\treturn v;\n\t}(s[ch >>> 3])) & 0x1 << (ch & 0x7)) === 0) {\n\t\treturn false;\n\t}\n\tthis.cursor--;\n\treturn true;\n};\n\n/**\n * @param {Array.<undefined|!number>} s\n * @param {!number} min\n * @param {!number} max\n * @return {!boolean}\n */\nBaseStemmer.prototype.out_grouping$AIII = function (s, min, max) {\n\t/** @type {!number} */\n\tvar ch;\n\tif (this.cursor >= this.limit) {\n\t\treturn false;\n\t}\n\tch = this.current.charCodeAt(this.cursor);\n\tif (ch > max || ch < min) {\n\t\tthis.cursor++;\n\t\treturn true;\n\t}\n\tch -= min;\n\tif (((function (v) {\n\t\tif (! (v != null)) {\n\t\t\tdebugger;\n\t\t\tthrow new Error(\"[src/stemmer/base-stemmer.jsx:84:10] null access\\n    if ((s[ch >>> 3] & (0X1 << (ch & 0x7))) == 0) {\\n          ^\\n\");\n\t\t}\n\t\treturn v;\n\t}(s[ch >>> 3])) & 0X1 << (ch & 0x7)) === 0) {\n\t\tthis.cursor++;\n\t\treturn true;\n\t}\n\treturn false;\n};\n\n/**\n * @param {Array.<undefined|!number>} s\n * @param {!number} min\n * @param {!number} max\n * @return {!boolean}\n */\nBaseStemmer.prototype.out_grouping_b$AIII = function (s, min, max) {\n\t/** @type {!number} */\n\tvar ch;\n\tif (this.cursor <= this.limit_backward) {\n\t\treturn false;\n\t}\n\tch = this.current.charCodeAt(this.cursor - 1);\n\tif (ch > max || ch < min) {\n\t\tthis.cursor--;\n\t\treturn true;\n\t}\n\tch -= min;\n\tif (((function (v) {\n\t\tif (! (v != null)) {\n\t\t\tdebugger;\n\t\t\tthrow new Error(\"[src/stemmer/base-stemmer.jsx:100:10] null access\\n    if ((s[ch >>> 3] & (0x1 << (ch & 0x7))) == 0) {\\n          ^\\n\");\n\t\t}\n\t\treturn v;\n\t}(s[ch >>> 3])) & 0x1 << (ch & 0x7)) === 0) {\n\t\tthis.cursor--;\n\t\treturn true;\n\t}\n\treturn false;\n};\n\n/**\n * @param {!number} min\n * @param {!number} max\n * @return {!boolean}\n */\nBaseStemmer.prototype.in_range$II = function (min, max) {\n\t/** @type {!number} */\n\tvar ch;\n\tif (this.cursor >= this.limit) {\n\t\treturn false;\n\t}\n\tch = this.current.charCodeAt(this.cursor);\n\tif (ch > max || ch < min) {\n\t\treturn false;\n\t}\n\tthis.cursor++;\n\treturn true;\n};\n\n/**\n * @param {!number} min\n * @param {!number} max\n * @return {!boolean}\n */\nBaseStemmer.prototype.in_range_b$II = function (min, max) {\n\t/** @type {!number} */\n\tvar ch;\n\tif (this.cursor <= this.limit_backward) {\n\t\treturn false;\n\t}\n\tch = this.current.charCodeAt(this.cursor - 1);\n\tif (ch > max || ch < min) {\n\t\treturn false;\n\t}\n\tthis.cursor--;\n\treturn true;\n};\n\n/**\n * @param {!number} min\n * @param {!number} max\n * @return {!boolean}\n */\nBaseStemmer.prototype.out_range$II = function (min, max) {\n\t/** @type {!number} */\n\tvar ch;\n\tif (this.cursor >= this.limit) {\n\t\treturn false;\n\t}\n\tch = this.current.charCodeAt(this.cursor);\n\tif (! (ch > max || ch < min)) {\n\t\treturn false;\n\t}\n\tthis.cursor++;\n\treturn true;\n};\n\n/**\n * @param {!number} min\n * @param {!number} max\n * @return {!boolean}\n */\nBaseStemmer.prototype.out_range_b$II = function (min, max) {\n\t/** @type {!number} */\n\tvar ch;\n\tif (this.cursor <= this.limit_backward) {\n\t\treturn false;\n\t}\n\tch = this.current.charCodeAt(this.cursor - 1);\n\tif (! (ch > max || ch < min)) {\n\t\treturn false;\n\t}\n\tthis.cursor--;\n\treturn true;\n};\n\n/**\n * @param {!number} s_size\n * @param {!string} s\n * @return {!boolean}\n */\nBaseStemmer.prototype.eq_s$IS = function (s_size, s) {\n\tif (this.limit - this.cursor < s_size) {\n\t\treturn false;\n\t}\n\tif (this.current.slice(this.cursor, this.cursor + s_size) !== s) {\n\t\treturn false;\n\t}\n\tthis.cursor += s_size;\n\treturn true;\n};\n\n/**\n * @param {!number} s_size\n * @param {!string} s\n * @return {!boolean}\n */\nBaseStemmer.prototype.eq_s_b$IS = function (s_size, s) {\n\tif (this.cursor - this.limit_backward < s_size) {\n\t\treturn false;\n\t}\n\tif (this.current.slice(this.cursor - s_size, this.cursor) !== s) {\n\t\treturn false;\n\t}\n\tthis.cursor -= s_size;\n\treturn true;\n};\n\n/**\n * @param {!string} s\n * @return {!boolean}\n */\nBaseStemmer.prototype.eq_v$S = function (s) {\n\treturn this.eq_s$IS(s.length, s);\n};\n\n/**\n * @param {!string} s\n * @return {!boolean}\n */\nBaseStemmer.prototype.eq_v_b$S = function (s) {\n\treturn this.eq_s_b$IS(s.length, s);\n};\n\n/**\n * @param {Array.<undefined|Among>} v\n * @param {!number} v_size\n * @return {!number}\n */\nBaseStemmer.prototype.find_among$ALAmong$I = function (v, v_size) {\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {!number} */\n\tvar j;\n\t/** @type {!number} */\n\tvar c;\n\t/** @type {!number} */\n\tvar l;\n\t/** @type {!number} */\n\tvar common_i;\n\t/** @type {!number} */\n\tvar common_j;\n\t/** @type {!boolean} */\n\tvar first_key_inspected;\n\t/** @type {!number} */\n\tvar k;\n\t/** @type {!number} */\n\tvar diff;\n\t/** @type {!number} */\n\tvar common;\n\t/** @type {Among} */\n\tvar w;\n\t/** @type {!number} */\n\tvar i2;\n\t/** @type {!boolean} */\n\tvar res;\n\ti = 0;\n\tj = v_size;\n\tc = this.cursor;\n\tl = this.limit;\n\tcommon_i = 0;\n\tcommon_j = 0;\n\tfirst_key_inspected = false;\n\twhile (true) {\n\t\tk = i + (j - i >>> 1);\n\t\tdiff = 0;\n\t\tcommon = (common_i < common_j ? common_i : common_j);\n\t\tw = v[k];\n\t\tfor (i2 = common; i2 < w.s_size; i2++) {\n\t\t\tif (c + common === l) {\n\t\t\t\tdiff = - 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdiff = this.current.charCodeAt(c + common) - w.s.charCodeAt(i2);\n\t\t\tif (diff !== 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcommon++;\n\t\t}\n\t\tif (diff < 0) {\n\t\t\tj = k;\n\t\t\tcommon_j = common;\n\t\t} else {\n\t\t\ti = k;\n\t\t\tcommon_i = common;\n\t\t}\n\t\tif (j - i <= 1) {\n\t\t\tif (i > 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j === i) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (first_key_inspected) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tfirst_key_inspected = true;\n\t\t}\n\t}\n\twhile (true) {\n\t\tw = v[i];\n\t\tif (common_i >= w.s_size) {\n\t\t\tthis.cursor = (c + w.s_size | 0);\n\t\t\tif (w.method == null) {\n\t\t\t\treturn w.result;\n\t\t\t}\n\t\t\tres = w.method(w.instance);\n\t\t\tthis.cursor = (c + w.s_size | 0);\n\t\t\tif (res) {\n\t\t\t\treturn w.result;\n\t\t\t}\n\t\t}\n\t\ti = w.substring_i;\n\t\tif (i < 0) {\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn (- 1 | 0);\n};\n\n/**\n * @param {Array.<undefined|Among>} v\n * @param {!number} v_size\n * @return {!number}\n */\nBaseStemmer.prototype.find_among_b$ALAmong$I = function (v, v_size) {\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {!number} */\n\tvar j;\n\t/** @type {!number} */\n\tvar c;\n\t/** @type {!number} */\n\tvar lb;\n\t/** @type {!number} */\n\tvar common_i;\n\t/** @type {!number} */\n\tvar common_j;\n\t/** @type {!boolean} */\n\tvar first_key_inspected;\n\t/** @type {!number} */\n\tvar k;\n\t/** @type {!number} */\n\tvar diff;\n\t/** @type {!number} */\n\tvar common;\n\t/** @type {Among} */\n\tvar w;\n\t/** @type {!number} */\n\tvar i2;\n\t/** @type {!boolean} */\n\tvar res;\n\ti = 0;\n\tj = v_size;\n\tc = this.cursor;\n\tlb = this.limit_backward;\n\tcommon_i = 0;\n\tcommon_j = 0;\n\tfirst_key_inspected = false;\n\twhile (true) {\n\t\tk = i + (j - i >> 1);\n\t\tdiff = 0;\n\t\tcommon = (common_i < common_j ? common_i : common_j);\n\t\tw = v[k];\n\t\tfor (i2 = w.s_size - 1 - common; i2 >= 0; i2--) {\n\t\t\tif (c - common === lb) {\n\t\t\t\tdiff = - 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdiff = this.current.charCodeAt(c - 1 - common) - w.s.charCodeAt(i2);\n\t\t\tif (diff !== 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcommon++;\n\t\t}\n\t\tif (diff < 0) {\n\t\t\tj = k;\n\t\t\tcommon_j = common;\n\t\t} else {\n\t\t\ti = k;\n\t\t\tcommon_i = common;\n\t\t}\n\t\tif (j - i <= 1) {\n\t\t\tif (i > 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j === i) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (first_key_inspected) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tfirst_key_inspected = true;\n\t\t}\n\t}\n\twhile (true) {\n\t\tw = v[i];\n\t\tif (common_i >= w.s_size) {\n\t\t\tthis.cursor = (c - w.s_size | 0);\n\t\t\tif (w.method == null) {\n\t\t\t\treturn w.result;\n\t\t\t}\n\t\t\tres = w.method(this);\n\t\t\tthis.cursor = (c - w.s_size | 0);\n\t\t\tif (res) {\n\t\t\t\treturn w.result;\n\t\t\t}\n\t\t}\n\t\ti = w.substring_i;\n\t\tif (i < 0) {\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn (- 1 | 0);\n};\n\n/**\n * @param {!number} c_bra\n * @param {!number} c_ket\n * @param {!string} s\n * @return {!number}\n */\nBaseStemmer.prototype.replace_s$IIS = function (c_bra, c_ket, s) {\n\t/** @type {!number} */\n\tvar adjustment;\n\tadjustment = s.length - (c_ket - c_bra);\n\tthis.current = this.current.slice(0, c_bra) + s + this.current.slice(c_ket);\n\tthis.limit += (adjustment | 0);\n\tif (this.cursor >= c_ket) {\n\t\tthis.cursor += (adjustment | 0);\n\t} else {\n\t\tif (this.cursor > c_bra) {\n\t\t\tthis.cursor = c_bra;\n\t\t}\n\t}\n\treturn (adjustment | 0);\n};\n\n/**\n * @return {!boolean}\n */\nBaseStemmer.prototype.slice_check$ = function () {\n\tif (this.bra < 0 || this.bra > this.ket || this.ket > this.limit || this.limit > this.current.length) {\n\t\treturn false;\n\t}\n\treturn true;\n};\n\n/**\n * @param {!string} s\n * @return {!boolean}\n */\nBaseStemmer.prototype.slice_from$S = function (s) {\n\t/** @type {!boolean} */\n\tvar result;\n\tresult = false;\n\tif (this.slice_check$()) {\n\t\tthis.replace_s$IIS(this.bra, this.ket, s);\n\t\tresult = true;\n\t}\n\treturn result;\n};\n\n/**\n * @return {!boolean}\n */\nBaseStemmer.prototype.slice_del$ = function () {\n\treturn this.slice_from$S(\"\");\n};\n\n/**\n * @param {!number} c_bra\n * @param {!number} c_ket\n * @param {!string} s\n */\nBaseStemmer.prototype.insert$IIS = function (c_bra, c_ket, s) {\n\t/** @type {!number} */\n\tvar adjustment;\n\tadjustment = this.replace_s$IIS(c_bra, c_ket, s);\n\tif (c_bra <= this.bra) {\n\t\tthis.bra += (adjustment | 0);\n\t}\n\tif (c_bra <= this.ket) {\n\t\tthis.ket += (adjustment | 0);\n\t}\n};\n\n/**\n * @param {!string} s\n * @return {!string}\n */\nBaseStemmer.prototype.slice_to$S = function (s) {\n\t/** @type {!string} */\n\tvar result;\n\tresult = '';\n\tif (this.slice_check$()) {\n\t\tresult = this.current.slice(this.bra, this.ket);\n\t}\n\treturn result;\n};\n\n/**\n * @param {!string} s\n * @return {!string}\n */\nBaseStemmer.prototype.assign_to$S = function (s) {\n\treturn this.current.slice(0, this.limit);\n};\n\n/**\n * @return {!boolean}\n */\nBaseStemmer.prototype.stem$ = function () {\n\treturn false;\n};\n\n/**\n * @param {!string} word\n * @return {!string}\n */\nBaseStemmer.prototype.stemWord$S = function (word) {\n\t/** @type {undefined|!string} */\n\tvar result;\n\tresult = this.cache['.' + word];\n\tif (result == null) {\n\t\tthis.setCurrent$S(word);\n\t\tthis.stem$();\n\t\tresult = this.getCurrent$();\n\t\tthis.cache['.' + word] = result;\n\t}\n\treturn (function (v) {\n\t\tif (! (v != null)) {\n\t\t\tdebugger;\n\t\t\tthrow new Error(\"[src/stemmer/base-stemmer.jsx:398:15] null access\\n        return result;\\n               ^^^^^^\\n\");\n\t\t}\n\t\treturn v;\n\t}(result));\n};\n\n/**\n * @param {Array.<undefined|!string>} words\n * @return {Array.<undefined|!string>}\n */\nBaseStemmer.prototype.stemWords$AS = function (words) {\n\t/** @type {Array.<undefined|!string>} */\n\tvar results;\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {undefined|!string} */\n\tvar word;\n\t/** @type {undefined|!string} */\n\tvar result;\n\tresults = [  ];\n\tfor (i = 0; i < words.length; i++) {\n\t\tword = words[i];\n\t\tresult = this.cache['.' + (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/stemmer/base-stemmer.jsx:407:42] null access\\n            var result = this.cache[\\'.\\' + word];\\n                                          ^^^^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(word))];\n\t\tif (result == null) {\n\t\t\tthis.setCurrent$S((function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/stemmer/base-stemmer.jsx:410:32] null access\\n                this.setCurrent(word);\\n                                ^^^^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(word)));\n\t\t\tthis.stem$();\n\t\t\tresult = this.getCurrent$();\n\t\t\tthis.cache['.' + (function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/stemmer/base-stemmer.jsx:413:33] null access\\n                this.cache[\\'.\\' + word] = result;\\n                                 ^^^^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(word))] = result;\n\t\t}\n\t\tresults.push((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/stemmer/base-stemmer.jsx:415:25] null access\\n            results.push(result);\\n                         ^^^^^^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(result)));\n\t}\n\treturn results;\n};\n\n/**\n * class EnglishStemmer extends BaseStemmer\n * @constructor\n */\nfunction EnglishStemmer() {\n}\n\nEnglishStemmer.prototype = new BaseStemmer;\n/**\n * @constructor\n */\nfunction EnglishStemmer$() {\n\tBaseStemmer$.call(this);\n\tthis.B_Y_found = false;\n\tthis.I_p2 = 0;\n\tthis.I_p1 = 0;\n};\n\nEnglishStemmer$.prototype = new EnglishStemmer;\n\n/**\n * @param {EnglishStemmer} other\n */\nEnglishStemmer.prototype.copy_from$LEnglishStemmer$ = function (other) {\n\tthis.B_Y_found = other.B_Y_found;\n\tthis.I_p2 = other.I_p2;\n\tthis.I_p1 = other.I_p1;\n\tBaseStemmer.prototype.copy_from$LBaseStemmer$.call(this, other);\n};\n\n/**\n * @return {!boolean}\n */\nEnglishStemmer.prototype.r_prelude$ = function () {\n\t/** @type {!number} */\n\tvar v_1;\n\t/** @type {!number} */\n\tvar v_2;\n\t/** @type {!number} */\n\tvar v_3;\n\t/** @type {!number} */\n\tvar v_4;\n\t/** @type {!number} */\n\tvar v_5;\n\t/** @type {!boolean} */\n\tvar lab0;\n\t/** @type {!boolean} */\n\tvar lab1;\n\t/** @type {!boolean} */\n\tvar lab2;\n\t/** @type {!boolean} */\n\tvar lab4;\n\t/** @type {!boolean} */\n\tvar lab6;\n\tthis.B_Y_found = false;\n\tv_1 = this.cursor;\n\tlab0 = true;\nlab0:\n\twhile (lab0 === true) {\n\t\tlab0 = false;\n\t\tthis.bra = this.cursor;\n\t\tif (! this.eq_s$IS(1, \"'\")) {\n\t\t\tbreak lab0;\n\t\t}\n\t\tthis.ket = this.cursor;\n\t\tif (! this.slice_del$()) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tthis.cursor = v_1;\n\tv_2 = this.cursor;\n\tlab1 = true;\nlab1:\n\twhile (lab1 === true) {\n\t\tlab1 = false;\n\t\tthis.bra = this.cursor;\n\t\tif (! this.eq_s$IS(1, \"y\")) {\n\t\t\tbreak lab1;\n\t\t}\n\t\tthis.ket = this.cursor;\n\t\tif (! this.slice_from$S(\"Y\")) {\n\t\t\treturn false;\n\t\t}\n\t\tthis.B_Y_found = true;\n\t}\n\tthis.cursor = v_2;\n\tv_3 = this.cursor;\n\tlab2 = true;\nlab2:\n\twhile (lab2 === true) {\n\t\tlab2 = false;\n\treplab3:\n\t\twhile (true) {\n\t\t\tv_4 = this.cursor;\n\t\t\tlab4 = true;\n\t\tlab4:\n\t\t\twhile (lab4 === true) {\n\t\t\t\tlab4 = false;\n\t\t\tgolab5:\n\t\t\t\twhile (true) {\n\t\t\t\t\tv_5 = this.cursor;\n\t\t\t\t\tlab6 = true;\n\t\t\t\tlab6:\n\t\t\t\t\twhile (lab6 === true) {\n\t\t\t\t\t\tlab6 = false;\n\t\t\t\t\t\tif (! this.in_grouping$AIII(EnglishStemmer.g_v, 97, 121)) {\n\t\t\t\t\t\t\tbreak lab6;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.bra = this.cursor;\n\t\t\t\t\t\tif (! this.eq_s$IS(1, \"y\")) {\n\t\t\t\t\t\t\tbreak lab6;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.ket = this.cursor;\n\t\t\t\t\t\tthis.cursor = v_5;\n\t\t\t\t\t\tbreak golab5;\n\t\t\t\t\t}\n\t\t\t\t\tthis.cursor = v_5;\n\t\t\t\t\tif (this.cursor >= this.limit) {\n\t\t\t\t\t\tbreak lab4;\n\t\t\t\t\t}\n\t\t\t\t\tthis.cursor++;\n\t\t\t\t}\n\t\t\t\tif (! this.slice_from$S(\"Y\")) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tthis.B_Y_found = true;\n\t\t\t\tcontinue replab3;\n\t\t\t}\n\t\t\tthis.cursor = v_4;\n\t\t\tbreak replab3;\n\t\t}\n\t}\n\tthis.cursor = v_3;\n\treturn true;\n};\n\n/**\n * @return {!boolean}\n */\nEnglishStemmer.prototype.r_mark_regions$ = function () {\n\t/** @type {!number} */\n\tvar v_1;\n\t/** @type {!number} */\n\tvar v_2;\n\t/** @type {!boolean} */\n\tvar lab0;\n\t/** @type {!boolean} */\n\tvar lab1;\n\t/** @type {!boolean} */\n\tvar lab2;\n\t/** @type {!boolean} */\n\tvar lab4;\n\t/** @type {!boolean} */\n\tvar lab6;\n\t/** @type {!boolean} */\n\tvar lab8;\n\t/** @type {!boolean} */\n\tvar lab10;\n\tthis.I_p1 = this.limit;\n\tthis.I_p2 = this.limit;\n\tv_1 = this.cursor;\n\tlab0 = true;\nlab0:\n\twhile (lab0 === true) {\n\t\tlab0 = false;\n\t\tlab1 = true;\n\tlab1:\n\t\twhile (lab1 === true) {\n\t\t\tlab1 = false;\n\t\t\tv_2 = this.cursor;\n\t\t\tlab2 = true;\n\t\tlab2:\n\t\t\twhile (lab2 === true) {\n\t\t\t\tlab2 = false;\n\t\t\t\tif (this.find_among$ALAmong$I(EnglishStemmer.a_0, 3) === 0) {\n\t\t\t\t\tbreak lab2;\n\t\t\t\t}\n\t\t\t\tbreak lab1;\n\t\t\t}\n\t\t\tthis.cursor = v_2;\n\t\tgolab3:\n\t\t\twhile (true) {\n\t\t\t\tlab4 = true;\n\t\t\tlab4:\n\t\t\t\twhile (lab4 === true) {\n\t\t\t\t\tlab4 = false;\n\t\t\t\t\tif (! this.in_grouping$AIII(EnglishStemmer.g_v, 97, 121)) {\n\t\t\t\t\t\tbreak lab4;\n\t\t\t\t\t}\n\t\t\t\t\tbreak golab3;\n\t\t\t\t}\n\t\t\t\tif (this.cursor >= this.limit) {\n\t\t\t\t\tbreak lab0;\n\t\t\t\t}\n\t\t\t\tthis.cursor++;\n\t\t\t}\n\t\tgolab5:\n\t\t\twhile (true) {\n\t\t\t\tlab6 = true;\n\t\t\tlab6:\n\t\t\t\twhile (lab6 === true) {\n\t\t\t\t\tlab6 = false;\n\t\t\t\t\tif (! this.out_grouping$AIII(EnglishStemmer.g_v, 97, 121)) {\n\t\t\t\t\t\tbreak lab6;\n\t\t\t\t\t}\n\t\t\t\t\tbreak golab5;\n\t\t\t\t}\n\t\t\t\tif (this.cursor >= this.limit) {\n\t\t\t\t\tbreak lab0;\n\t\t\t\t}\n\t\t\t\tthis.cursor++;\n\t\t\t}\n\t\t}\n\t\tthis.I_p1 = this.cursor;\n\tgolab7:\n\t\twhile (true) {\n\t\t\tlab8 = true;\n\t\tlab8:\n\t\t\twhile (lab8 === true) {\n\t\t\t\tlab8 = false;\n\t\t\t\tif (! this.in_grouping$AIII(EnglishStemmer.g_v, 97, 121)) {\n\t\t\t\t\tbreak lab8;\n\t\t\t\t}\n\t\t\t\tbreak golab7;\n\t\t\t}\n\t\t\tif (this.cursor >= this.limit) {\n\t\t\t\tbreak lab0;\n\t\t\t}\n\t\t\tthis.cursor++;\n\t\t}\n\tgolab9:\n\t\twhile (true) {\n\t\t\tlab10 = true;\n\t\tlab10:\n\t\t\twhile (lab10 === true) {\n\t\t\t\tlab10 = false;\n\t\t\t\tif (! this.out_grouping$AIII(EnglishStemmer.g_v, 97, 121)) {\n\t\t\t\t\tbreak lab10;\n\t\t\t\t}\n\t\t\t\tbreak golab9;\n\t\t\t}\n\t\t\tif (this.cursor >= this.limit) {\n\t\t\t\tbreak lab0;\n\t\t\t}\n\t\t\tthis.cursor++;\n\t\t}\n\t\tthis.I_p2 = this.cursor;\n\t}\n\tthis.cursor = v_1;\n\treturn true;\n};\n\n/**\n * @return {!boolean}\n */\nEnglishStemmer.prototype.r_shortv$ = function () {\n\t/** @type {!number} */\n\tvar v_1;\n\t/** @type {!boolean} */\n\tvar lab0;\n\t/** @type {!boolean} */\n\tvar lab1;\n\tlab0 = true;\nlab0:\n\twhile (lab0 === true) {\n\t\tlab0 = false;\n\t\tv_1 = this.limit - this.cursor;\n\t\tlab1 = true;\n\tlab1:\n\t\twhile (lab1 === true) {\n\t\t\tlab1 = false;\n\t\t\tif (! this.out_grouping_b$AIII(EnglishStemmer.g_v_WXY, 89, 121)) {\n\t\t\t\tbreak lab1;\n\t\t\t}\n\t\t\tif (! this.in_grouping_b$AIII(EnglishStemmer.g_v, 97, 121)) {\n\t\t\t\tbreak lab1;\n\t\t\t}\n\t\t\tif (! this.out_grouping_b$AIII(EnglishStemmer.g_v, 97, 121)) {\n\t\t\t\tbreak lab1;\n\t\t\t}\n\t\t\tbreak lab0;\n\t\t}\n\t\tthis.cursor = this.limit - v_1;\n\t\tif (! this.out_grouping_b$AIII(EnglishStemmer.g_v, 97, 121)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (! this.in_grouping_b$AIII(EnglishStemmer.g_v, 97, 121)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this.cursor > this.limit_backward) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n};\n\n/**\n * @return {!boolean}\n */\nEnglishStemmer.prototype.r_R1$ = function () {\n\tif (! (this.I_p1 <= this.cursor)) {\n\t\treturn false;\n\t}\n\treturn true;\n};\n\n/**\n * @return {!boolean}\n */\nEnglishStemmer.prototype.r_R2$ = function () {\n\tif (! (this.I_p2 <= this.cursor)) {\n\t\treturn false;\n\t}\n\treturn true;\n};\n\n/**\n * @return {!boolean}\n */\nEnglishStemmer.prototype.r_Step_1a$ = function () {\n\t/** @type {!number} */\n\tvar among_var;\n\t/** @type {!number} */\n\tvar v_1;\n\t/** @type {!number} */\n\tvar v_2;\n\t/** @type {!boolean} */\n\tvar lab0;\n\t/** @type {!boolean} */\n\tvar lab1;\n\t/** @type {!boolean} */\n\tvar lab2;\n\t/** @type {!number} */\n\tvar c;\n\t/** @type {!boolean} */\n\tvar lab4;\n\tv_1 = this.limit - this.cursor;\n\tlab0 = true;\nlab0:\n\twhile (lab0 === true) {\n\t\tlab0 = false;\n\t\tthis.ket = this.cursor;\n\t\tamong_var = this.find_among_b$ALAmong$I(EnglishStemmer.a_1, 3);\n\t\tif (among_var === 0) {\n\t\t\tthis.cursor = this.limit - v_1;\n\t\t\tbreak lab0;\n\t\t}\n\t\tthis.bra = this.cursor;\n\t\tswitch (among_var) {\n\t\tcase 0:\n\t\t\tthis.cursor = this.limit - v_1;\n\t\t\tbreak lab0;\n\t\tcase 1:\n\t\t\tif (! this.slice_del$()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\tthis.ket = this.cursor;\n\tamong_var = this.find_among_b$ALAmong$I(EnglishStemmer.a_2, 6);\n\tif (among_var === 0) {\n\t\treturn false;\n\t}\n\tthis.bra = this.cursor;\n\tswitch (among_var) {\n\tcase 0:\n\t\treturn false;\n\tcase 1:\n\t\tif (! this.slice_from$S(\"ss\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 2:\n\t\tlab1 = true;\n\tlab1:\n\t\twhile (lab1 === true) {\n\t\t\tlab1 = false;\n\t\t\tv_2 = this.limit - this.cursor;\n\t\t\tlab2 = true;\n\t\tlab2:\n\t\t\twhile (lab2 === true) {\n\t\t\t\tlab2 = false;\n\t\t\t\tc = (this.cursor - 2 | 0);\n\t\t\t\tif (this.limit_backward > c || c > this.limit) {\n\t\t\t\t\tbreak lab2;\n\t\t\t\t}\n\t\t\t\tthis.cursor = c;\n\t\t\t\tif (! this.slice_from$S(\"i\")) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tbreak lab1;\n\t\t\t}\n\t\t\tthis.cursor = this.limit - v_2;\n\t\t\tif (! this.slice_from$S(\"ie\")) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tbreak;\n\tcase 3:\n\t\tif (this.cursor <= this.limit_backward) {\n\t\t\treturn false;\n\t\t}\n\t\tthis.cursor--;\n\tgolab3:\n\t\twhile (true) {\n\t\t\tlab4 = true;\n\t\tlab4:\n\t\t\twhile (lab4 === true) {\n\t\t\t\tlab4 = false;\n\t\t\t\tif (! this.in_grouping_b$AIII(EnglishStemmer.g_v, 97, 121)) {\n\t\t\t\t\tbreak lab4;\n\t\t\t\t}\n\t\t\t\tbreak golab3;\n\t\t\t}\n\t\t\tif (this.cursor <= this.limit_backward) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tthis.cursor--;\n\t\t}\n\t\tif (! this.slice_del$()) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\t}\n\treturn true;\n};\n\n/**\n * @return {!boolean}\n */\nEnglishStemmer.prototype.r_Step_1b$ = function () {\n\t/** @type {!number} */\n\tvar among_var;\n\t/** @type {!number} */\n\tvar v_1;\n\t/** @type {!number} */\n\tvar v_3;\n\t/** @type {!number} */\n\tvar v_4;\n\t/** @type {!boolean} */\n\tvar lab1;\n\t/** @type {!number} */\n\tvar c;\n\tthis.ket = this.cursor;\n\tamong_var = this.find_among_b$ALAmong$I(EnglishStemmer.a_4, 6);\n\tif (among_var === 0) {\n\t\treturn false;\n\t}\n\tthis.bra = this.cursor;\n\tswitch (among_var) {\n\tcase 0:\n\t\treturn false;\n\tcase 1:\n\t\tif (! this.r_R1$()) {\n\t\t\treturn false;\n\t\t}\n\t\tif (! this.slice_from$S(\"ee\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 2:\n\t\tv_1 = this.limit - this.cursor;\n\tgolab0:\n\t\twhile (true) {\n\t\t\tlab1 = true;\n\t\tlab1:\n\t\t\twhile (lab1 === true) {\n\t\t\t\tlab1 = false;\n\t\t\t\tif (! this.in_grouping_b$AIII(EnglishStemmer.g_v, 97, 121)) {\n\t\t\t\t\tbreak lab1;\n\t\t\t\t}\n\t\t\t\tbreak golab0;\n\t\t\t}\n\t\t\tif (this.cursor <= this.limit_backward) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tthis.cursor--;\n\t\t}\n\t\tthis.cursor = this.limit - v_1;\n\t\tif (! this.slice_del$()) {\n\t\t\treturn false;\n\t\t}\n\t\tv_3 = this.limit - this.cursor;\n\t\tamong_var = this.find_among_b$ALAmong$I(EnglishStemmer.a_3, 13);\n\t\tif (among_var === 0) {\n\t\t\treturn false;\n\t\t}\n\t\tthis.cursor = this.limit - v_3;\n\t\tswitch (among_var) {\n\t\tcase 0:\n\t\t\treturn false;\n\t\tcase 1:\n\t\t\tc = this.cursor;\n\t\t\tthis.insert$IIS(this.cursor, this.cursor, \"e\");\n\t\t\tthis.cursor = c;\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tthis.ket = this.cursor;\n\t\t\tif (this.cursor <= this.limit_backward) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tthis.cursor--;\n\t\t\tthis.bra = this.cursor;\n\t\t\tif (! this.slice_del$()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tif (this.cursor !== this.I_p1) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tv_4 = this.limit - this.cursor;\n\t\t\tif (! this.r_shortv$()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tthis.cursor = this.limit - v_4;\n\t\t\tc = this.cursor;\n\t\t\tthis.insert$IIS(this.cursor, this.cursor, \"e\");\n\t\t\tthis.cursor = c;\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\t}\n\treturn true;\n};\n\n/**\n * @return {!boolean}\n */\nEnglishStemmer.prototype.r_Step_1c$ = function () {\n\t/** @type {!number} */\n\tvar v_1;\n\t/** @type {!number} */\n\tvar v_2;\n\t/** @type {!boolean} */\n\tvar lab0;\n\t/** @type {!boolean} */\n\tvar lab1;\n\t/** @type {!boolean} */\n\tvar lab2;\n\tthis.ket = this.cursor;\n\tlab0 = true;\nlab0:\n\twhile (lab0 === true) {\n\t\tlab0 = false;\n\t\tv_1 = this.limit - this.cursor;\n\t\tlab1 = true;\n\tlab1:\n\t\twhile (lab1 === true) {\n\t\t\tlab1 = false;\n\t\t\tif (! this.eq_s_b$IS(1, \"y\")) {\n\t\t\t\tbreak lab1;\n\t\t\t}\n\t\t\tbreak lab0;\n\t\t}\n\t\tthis.cursor = this.limit - v_1;\n\t\tif (! this.eq_s_b$IS(1, \"Y\")) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tthis.bra = this.cursor;\n\tif (! this.out_grouping_b$AIII(EnglishStemmer.g_v, 97, 121)) {\n\t\treturn false;\n\t}\n\tv_2 = this.limit - this.cursor;\n\tlab2 = true;\nlab2:\n\twhile (lab2 === true) {\n\t\tlab2 = false;\n\t\tif (this.cursor > this.limit_backward) {\n\t\t\tbreak lab2;\n\t\t}\n\t\treturn false;\n\t}\n\tthis.cursor = this.limit - v_2;\n\tif (! this.slice_from$S(\"i\")) {\n\t\treturn false;\n\t}\n\treturn true;\n};\n\n/**\n * @return {!boolean}\n */\nEnglishStemmer.prototype.r_Step_2$ = function () {\n\t/** @type {!number} */\n\tvar among_var;\n\tthis.ket = this.cursor;\n\tamong_var = this.find_among_b$ALAmong$I(EnglishStemmer.a_5, 24);\n\tif (among_var === 0) {\n\t\treturn false;\n\t}\n\tthis.bra = this.cursor;\n\tif (! this.r_R1$()) {\n\t\treturn false;\n\t}\n\tswitch (among_var) {\n\tcase 0:\n\t\treturn false;\n\tcase 1:\n\t\tif (! this.slice_from$S(\"tion\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 2:\n\t\tif (! this.slice_from$S(\"ence\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 3:\n\t\tif (! this.slice_from$S(\"ance\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 4:\n\t\tif (! this.slice_from$S(\"able\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 5:\n\t\tif (! this.slice_from$S(\"ent\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 6:\n\t\tif (! this.slice_from$S(\"ize\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 7:\n\t\tif (! this.slice_from$S(\"ate\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 8:\n\t\tif (! this.slice_from$S(\"al\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 9:\n\t\tif (! this.slice_from$S(\"ful\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 10:\n\t\tif (! this.slice_from$S(\"ous\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 11:\n\t\tif (! this.slice_from$S(\"ive\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 12:\n\t\tif (! this.slice_from$S(\"ble\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 13:\n\t\tif (! this.eq_s_b$IS(1, \"l\")) {\n\t\t\treturn false;\n\t\t}\n\t\tif (! this.slice_from$S(\"og\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 14:\n\t\tif (! this.slice_from$S(\"ful\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 15:\n\t\tif (! this.slice_from$S(\"less\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 16:\n\t\tif (! this.in_grouping_b$AIII(EnglishStemmer.g_valid_LI, 99, 116)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (! this.slice_del$()) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\t}\n\treturn true;\n};\n\n/**\n * @return {!boolean}\n */\nEnglishStemmer.prototype.r_Step_3$ = function () {\n\t/** @type {!number} */\n\tvar among_var;\n\tthis.ket = this.cursor;\n\tamong_var = this.find_among_b$ALAmong$I(EnglishStemmer.a_6, 9);\n\tif (among_var === 0) {\n\t\treturn false;\n\t}\n\tthis.bra = this.cursor;\n\tif (! this.r_R1$()) {\n\t\treturn false;\n\t}\n\tswitch (among_var) {\n\tcase 0:\n\t\treturn false;\n\tcase 1:\n\t\tif (! this.slice_from$S(\"tion\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 2:\n\t\tif (! this.slice_from$S(\"ate\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 3:\n\t\tif (! this.slice_from$S(\"al\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 4:\n\t\tif (! this.slice_from$S(\"ic\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 5:\n\t\tif (! this.slice_del$()) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 6:\n\t\tif (! this.r_R2$()) {\n\t\t\treturn false;\n\t\t}\n\t\tif (! this.slice_del$()) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\t}\n\treturn true;\n};\n\n/**\n * @return {!boolean}\n */\nEnglishStemmer.prototype.r_Step_4$ = function () {\n\t/** @type {!number} */\n\tvar among_var;\n\t/** @type {!number} */\n\tvar v_1;\n\t/** @type {!boolean} */\n\tvar lab0;\n\t/** @type {!boolean} */\n\tvar lab1;\n\tthis.ket = this.cursor;\n\tamong_var = this.find_among_b$ALAmong$I(EnglishStemmer.a_7, 18);\n\tif (among_var === 0) {\n\t\treturn false;\n\t}\n\tthis.bra = this.cursor;\n\tif (! this.r_R2$()) {\n\t\treturn false;\n\t}\n\tswitch (among_var) {\n\tcase 0:\n\t\treturn false;\n\tcase 1:\n\t\tif (! this.slice_del$()) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 2:\n\t\tlab0 = true;\n\tlab0:\n\t\twhile (lab0 === true) {\n\t\t\tlab0 = false;\n\t\t\tv_1 = this.limit - this.cursor;\n\t\t\tlab1 = true;\n\t\tlab1:\n\t\t\twhile (lab1 === true) {\n\t\t\t\tlab1 = false;\n\t\t\t\tif (! this.eq_s_b$IS(1, \"s\")) {\n\t\t\t\t\tbreak lab1;\n\t\t\t\t}\n\t\t\t\tbreak lab0;\n\t\t\t}\n\t\t\tthis.cursor = this.limit - v_1;\n\t\t\tif (! this.eq_s_b$IS(1, \"t\")) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tif (! this.slice_del$()) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\t}\n\treturn true;\n};\n\n/**\n * @return {!boolean}\n */\nEnglishStemmer.prototype.r_Step_5$ = function () {\n\t/** @type {!number} */\n\tvar among_var;\n\t/** @type {!number} */\n\tvar v_1;\n\t/** @type {!number} */\n\tvar v_2;\n\t/** @type {!boolean} */\n\tvar lab0;\n\t/** @type {!boolean} */\n\tvar lab1;\n\t/** @type {!boolean} */\n\tvar lab2;\n\tthis.ket = this.cursor;\n\tamong_var = this.find_among_b$ALAmong$I(EnglishStemmer.a_8, 2);\n\tif (among_var === 0) {\n\t\treturn false;\n\t}\n\tthis.bra = this.cursor;\n\tswitch (among_var) {\n\tcase 0:\n\t\treturn false;\n\tcase 1:\n\t\tlab0 = true;\n\tlab0:\n\t\twhile (lab0 === true) {\n\t\t\tlab0 = false;\n\t\t\tv_1 = this.limit - this.cursor;\n\t\t\tlab1 = true;\n\t\tlab1:\n\t\t\twhile (lab1 === true) {\n\t\t\t\tlab1 = false;\n\t\t\t\tif (! this.r_R2$()) {\n\t\t\t\t\tbreak lab1;\n\t\t\t\t}\n\t\t\t\tbreak lab0;\n\t\t\t}\n\t\t\tthis.cursor = this.limit - v_1;\n\t\t\tif (! this.r_R1$()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tv_2 = this.limit - this.cursor;\n\t\t\tlab2 = true;\n\t\tlab2:\n\t\t\twhile (lab2 === true) {\n\t\t\t\tlab2 = false;\n\t\t\t\tif (! this.r_shortv$()) {\n\t\t\t\t\tbreak lab2;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tthis.cursor = this.limit - v_2;\n\t\t}\n\t\tif (! this.slice_del$()) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 2:\n\t\tif (! this.r_R2$()) {\n\t\t\treturn false;\n\t\t}\n\t\tif (! this.eq_s_b$IS(1, \"l\")) {\n\t\t\treturn false;\n\t\t}\n\t\tif (! this.slice_del$()) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\t}\n\treturn true;\n};\n\n/**\n * @return {!boolean}\n */\nEnglishStemmer.prototype.r_exception2$ = function () {\n\tthis.ket = this.cursor;\n\tif (this.find_among_b$ALAmong$I(EnglishStemmer.a_9, 8) === 0) {\n\t\treturn false;\n\t}\n\tthis.bra = this.cursor;\n\tif (this.cursor > this.limit_backward) {\n\t\treturn false;\n\t}\n\treturn true;\n};\n\n/**\n * @return {!boolean}\n */\nEnglishStemmer.prototype.r_exception1$ = function () {\n\t/** @type {!number} */\n\tvar among_var;\n\tthis.bra = this.cursor;\n\tamong_var = this.find_among$ALAmong$I(EnglishStemmer.a_10, 18);\n\tif (among_var === 0) {\n\t\treturn false;\n\t}\n\tthis.ket = this.cursor;\n\tif (this.cursor < this.limit) {\n\t\treturn false;\n\t}\n\tswitch (among_var) {\n\tcase 0:\n\t\treturn false;\n\tcase 1:\n\t\tif (! this.slice_from$S(\"ski\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 2:\n\t\tif (! this.slice_from$S(\"sky\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 3:\n\t\tif (! this.slice_from$S(\"die\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 4:\n\t\tif (! this.slice_from$S(\"lie\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 5:\n\t\tif (! this.slice_from$S(\"tie\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 6:\n\t\tif (! this.slice_from$S(\"idl\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 7:\n\t\tif (! this.slice_from$S(\"gentl\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 8:\n\t\tif (! this.slice_from$S(\"ugli\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 9:\n\t\tif (! this.slice_from$S(\"earli\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 10:\n\t\tif (! this.slice_from$S(\"onli\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 11:\n\t\tif (! this.slice_from$S(\"singl\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\t}\n\treturn true;\n};\n\n/**\n * @return {!boolean}\n */\nEnglishStemmer.prototype.r_postlude$ = function () {\n\t/** @type {!number} */\n\tvar v_1;\n\t/** @type {!number} */\n\tvar v_2;\n\t/** @type {!boolean} */\n\tvar lab1;\n\t/** @type {!boolean} */\n\tvar lab3;\n\tif (! this.B_Y_found) {\n\t\treturn false;\n\t}\nreplab0:\n\twhile (true) {\n\t\tv_1 = this.cursor;\n\t\tlab1 = true;\n\tlab1:\n\t\twhile (lab1 === true) {\n\t\t\tlab1 = false;\n\t\tgolab2:\n\t\t\twhile (true) {\n\t\t\t\tv_2 = this.cursor;\n\t\t\t\tlab3 = true;\n\t\t\tlab3:\n\t\t\t\twhile (lab3 === true) {\n\t\t\t\t\tlab3 = false;\n\t\t\t\t\tthis.bra = this.cursor;\n\t\t\t\t\tif (! this.eq_s$IS(1, \"Y\")) {\n\t\t\t\t\t\tbreak lab3;\n\t\t\t\t\t}\n\t\t\t\t\tthis.ket = this.cursor;\n\t\t\t\t\tthis.cursor = v_2;\n\t\t\t\t\tbreak golab2;\n\t\t\t\t}\n\t\t\t\tthis.cursor = v_2;\n\t\t\t\tif (this.cursor >= this.limit) {\n\t\t\t\t\tbreak lab1;\n\t\t\t\t}\n\t\t\t\tthis.cursor++;\n\t\t\t}\n\t\t\tif (! this.slice_from$S(\"y\")) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tcontinue replab0;\n\t\t}\n\t\tthis.cursor = v_1;\n\t\tbreak replab0;\n\t}\n\treturn true;\n};\n\n/**\n * @return {!boolean}\n */\nEnglishStemmer.prototype.stem$ = function () {\n\t/** @type {!number} */\n\tvar v_1;\n\t/** @type {!number} */\n\tvar v_2;\n\t/** @type {!number} */\n\tvar v_3;\n\t/** @type {!number} */\n\tvar v_4;\n\t/** @type {!number} */\n\tvar v_5;\n\t/** @type {!number} */\n\tvar v_6;\n\t/** @type {!number} */\n\tvar v_7;\n\t/** @type {!number} */\n\tvar v_8;\n\t/** @type {!number} */\n\tvar v_9;\n\t/** @type {!number} */\n\tvar v_10;\n\t/** @type {!number} */\n\tvar v_11;\n\t/** @type {!number} */\n\tvar v_12;\n\t/** @type {!number} */\n\tvar v_13;\n\t/** @type {!boolean} */\n\tvar lab0;\n\t/** @type {!boolean} */\n\tvar lab1;\n\t/** @type {!boolean} */\n\tvar lab2;\n\t/** @type {!boolean} */\n\tvar lab3;\n\t/** @type {!number} */\n\tvar c;\n\t/** @type {!boolean} */\n\tvar lab4;\n\t/** @type {!boolean} */\n\tvar lab5;\n\t/** @type {!boolean} */\n\tvar lab6;\n\t/** @type {!boolean} */\n\tvar lab7;\n\t/** @type {!boolean} */\n\tvar lab8;\n\t/** @type {!boolean} */\n\tvar lab9;\n\t/** @type {!boolean} */\n\tvar lab10;\n\t/** @type {!boolean} */\n\tvar lab11;\n\t/** @type {!boolean} */\n\tvar lab12;\n\t/** @type {!boolean} */\n\tvar lab13;\n\t/** @type {!boolean} */\n\tvar lab14;\n\t/** @type {!boolean} */\n\tvar lab15;\n\tlab0 = true;\nlab0:\n\twhile (lab0 === true) {\n\t\tlab0 = false;\n\t\tv_1 = this.cursor;\n\t\tlab1 = true;\n\tlab1:\n\t\twhile (lab1 === true) {\n\t\t\tlab1 = false;\n\t\t\tif (! this.r_exception1$()) {\n\t\t\t\tbreak lab1;\n\t\t\t}\n\t\t\tbreak lab0;\n\t\t}\n\t\tthis.cursor = v_1;\n\t\tlab2 = true;\n\tlab2:\n\t\twhile (lab2 === true) {\n\t\t\tlab2 = false;\n\t\t\tv_2 = this.cursor;\n\t\t\tlab3 = true;\n\t\tlab3:\n\t\t\twhile (lab3 === true) {\n\t\t\t\tlab3 = false;\n\t\t\t\tc = (this.cursor + 3 | 0);\n\t\t\t\tif (0 > c || c > this.limit) {\n\t\t\t\t\tbreak lab3;\n\t\t\t\t}\n\t\t\t\tthis.cursor = c;\n\t\t\t\tbreak lab2;\n\t\t\t}\n\t\t\tthis.cursor = v_2;\n\t\t\tbreak lab0;\n\t\t}\n\t\tthis.cursor = v_1;\n\t\tv_3 = this.cursor;\n\t\tlab4 = true;\n\tlab4:\n\t\twhile (lab4 === true) {\n\t\t\tlab4 = false;\n\t\t\tif (! this.r_prelude$()) {\n\t\t\t\tbreak lab4;\n\t\t\t}\n\t\t}\n\t\tthis.cursor = v_3;\n\t\tv_4 = this.cursor;\n\t\tlab5 = true;\n\tlab5:\n\t\twhile (lab5 === true) {\n\t\t\tlab5 = false;\n\t\t\tif (! this.r_mark_regions$()) {\n\t\t\t\tbreak lab5;\n\t\t\t}\n\t\t}\n\t\tthis.cursor = v_4;\n\t\tthis.limit_backward = this.cursor;\n\t\tthis.cursor = this.limit;\n\t\tv_5 = this.limit - this.cursor;\n\t\tlab6 = true;\n\tlab6:\n\t\twhile (lab6 === true) {\n\t\t\tlab6 = false;\n\t\t\tif (! this.r_Step_1a$()) {\n\t\t\t\tbreak lab6;\n\t\t\t}\n\t\t}\n\t\tthis.cursor = this.limit - v_5;\n\t\tlab7 = true;\n\tlab7:\n\t\twhile (lab7 === true) {\n\t\t\tlab7 = false;\n\t\t\tv_6 = this.limit - this.cursor;\n\t\t\tlab8 = true;\n\t\tlab8:\n\t\t\twhile (lab8 === true) {\n\t\t\t\tlab8 = false;\n\t\t\t\tif (! this.r_exception2$()) {\n\t\t\t\t\tbreak lab8;\n\t\t\t\t}\n\t\t\t\tbreak lab7;\n\t\t\t}\n\t\t\tthis.cursor = this.limit - v_6;\n\t\t\tv_7 = this.limit - this.cursor;\n\t\t\tlab9 = true;\n\t\tlab9:\n\t\t\twhile (lab9 === true) {\n\t\t\t\tlab9 = false;\n\t\t\t\tif (! this.r_Step_1b$()) {\n\t\t\t\t\tbreak lab9;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.cursor = this.limit - v_7;\n\t\t\tv_8 = this.limit - this.cursor;\n\t\t\tlab10 = true;\n\t\tlab10:\n\t\t\twhile (lab10 === true) {\n\t\t\t\tlab10 = false;\n\t\t\t\tif (! this.r_Step_1c$()) {\n\t\t\t\t\tbreak lab10;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.cursor = this.limit - v_8;\n\t\t\tv_9 = this.limit - this.cursor;\n\t\t\tlab11 = true;\n\t\tlab11:\n\t\t\twhile (lab11 === true) {\n\t\t\t\tlab11 = false;\n\t\t\t\tif (! this.r_Step_2$()) {\n\t\t\t\t\tbreak lab11;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.cursor = this.limit - v_9;\n\t\t\tv_10 = this.limit - this.cursor;\n\t\t\tlab12 = true;\n\t\tlab12:\n\t\t\twhile (lab12 === true) {\n\t\t\t\tlab12 = false;\n\t\t\t\tif (! this.r_Step_3$()) {\n\t\t\t\t\tbreak lab12;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.cursor = this.limit - v_10;\n\t\t\tv_11 = this.limit - this.cursor;\n\t\t\tlab13 = true;\n\t\tlab13:\n\t\t\twhile (lab13 === true) {\n\t\t\t\tlab13 = false;\n\t\t\t\tif (! this.r_Step_4$()) {\n\t\t\t\t\tbreak lab13;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.cursor = this.limit - v_11;\n\t\t\tv_12 = this.limit - this.cursor;\n\t\t\tlab14 = true;\n\t\tlab14:\n\t\t\twhile (lab14 === true) {\n\t\t\t\tlab14 = false;\n\t\t\t\tif (! this.r_Step_5$()) {\n\t\t\t\t\tbreak lab14;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.cursor = this.limit - v_12;\n\t\t}\n\t\tthis.cursor = this.limit_backward;\n\t\tv_13 = this.cursor;\n\t\tlab15 = true;\n\tlab15:\n\t\twhile (lab15 === true) {\n\t\t\tlab15 = false;\n\t\t\tif (! this.r_postlude$()) {\n\t\t\t\tbreak lab15;\n\t\t\t}\n\t\t}\n\t\tthis.cursor = v_13;\n\t}\n\treturn true;\n};\n\n/**\n * @param {*} o\n * @return {!boolean}\n */\nEnglishStemmer.prototype.equals$X = function (o) {\n\treturn o instanceof EnglishStemmer;\n};\n\n/**\n * @return {!number}\n */\nEnglishStemmer.prototype.hashCode$ = function () {\n\t/** @type {!string} */\n\tvar classname;\n\t/** @type {!number} */\n\tvar hash;\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {!number} */\n\tvar char;\n\tclassname = \"EnglishStemmer\";\n\thash = 0;\n\tif (classname.length === 0) {\n\t\treturn (hash | 0);\n\t}\n\tfor (i = 0; i < classname.length; i++) {\n\t\tchar = classname.charCodeAt(i);\n\t\thash = (hash << 5) - hash + char;\n\t\thash = hash & hash;\n\t}\n\treturn (hash | 0);\n};\n\n/**\n * class Among extends Object\n * @constructor\n */\nfunction Among() {\n}\n\n/**\n * @constructor\n * @param {!string} s\n * @param {!number} substring_i\n * @param {!number} result\n */\nfunction Among$SII(s, substring_i, result) {\n\tthis.s_size = s.length;\n\tthis.s = s;\n\tthis.substring_i = substring_i;\n\tthis.result = result;\n\tthis.method = null;\n\tthis.instance = null;\n};\n\nAmong$SII.prototype = new Among;\n\n/**\n * @constructor\n * @param {!string} s\n * @param {!number} substring_i\n * @param {!number} result\n * @param {*} method\n * @param {BaseStemmer} instance\n */\nfunction Among$SIIF$LBaseStemmer$B$LBaseStemmer$(s, substring_i, result, method, instance) {\n\tthis.s_size = s.length;\n\tthis.s = s;\n\tthis.substring_i = substring_i;\n\tthis.result = result;\n\tthis.method = method;\n\tthis.instance = instance;\n};\n\nAmong$SIIF$LBaseStemmer$B$LBaseStemmer$.prototype = new Among;\n\n/**\n * class Metadata extends Object\n * @constructor\n */\nfunction Metadata() {\n}\n\n/**\n * @constructor\n * @param {Oktavia} parent\n */\nfunction Metadata$LOktavia$(parent) {\n\tthis._parent = parent;\n\tthis._bitVector = new BitVector$();\n};\n\nMetadata$LOktavia$.prototype = new Metadata;\n\n/**\n * @return {!number}\n */\nMetadata.prototype._size$ = function () {\n\treturn this._bitVector.rank$I(this._bitVector.size$());\n};\n\n/**\n * @param {!number} index\n * @return {!string}\n */\nMetadata.prototype.getContent$I = function (index) {\n\t/** @type {!number} */\n\tvar startPosition;\n\t/** @type {!number} */\n\tvar length;\n\tif (index < 0 || this._size$() <= index) {\n\t\tthrow new Error(\"Section.getContent() : range error \" + (index + \"\"));\n\t}\n\tstartPosition = 0;\n\tif (index > 0) {\n\t\tstartPosition = this._bitVector.select$I(index - 1) + 1;\n\t}\n\tconsole.log(startPosition);\n\tlength = this._bitVector.select$I(index) - startPosition + 1;\n\tconsole.log(length);\n\treturn this._parent._getSubstring$II(startPosition, length);\n};\n\n/**\n * @param {!number} index\n * @return {!number}\n */\nMetadata.prototype.getStartPosition$I = function (index) {\n\t/** @type {!number} */\n\tvar startPosition;\n\tif (index < 0 || this._size$() <= index) {\n\t\tthrow new Error(\"Section.getContent() : range error \" + (index + \"\"));\n\t}\n\tstartPosition = 0;\n\tif (index > 0) {\n\t\tstartPosition = this._bitVector.select$I(index - 1) + 1;\n\t}\n\treturn (startPosition | 0);\n};\n\n/**\n * @param {SingleResult} result\n * @param {Array.<undefined|!number>} positions\n * @param {!string} word\n * @param {!boolean} stemmed\n */\nMetadata.prototype.grouping$LSingleResult$AISB = function (result, positions, word, stemmed) {\n};\n\n/**\n * @param {!number} index\n * @return {!string}\n */\nMetadata.prototype.getInformation$I = function (index) {\n\treturn '';\n};\n\n/**\n */\nMetadata.prototype._build$ = function () {\n\tthis._bitVector.build$();\n};\n\n/**\n * @param {!string} name\n * @param {!string} data\n * @param {!number} offset\n * @return {!number}\n */\nMetadata.prototype._load$SSI = function (name, data, offset) {\n\toffset = this._bitVector.load$SI(data, offset);\n\tthis._parent._metadataLabels.push(name);\n\tthis._parent._metadatas[name] = this;\n\treturn offset;\n};\n\n/**\n * @return {!string}\n */\nMetadata.prototype._dump$ = function () {\n\treturn this._bitVector.dump$();\n};\n\n/**\n * @param {CompressionReport} report\n * @return {!string}\n */\nMetadata.prototype._dump$LCompressionReport$ = function (report) {\n\treturn this._bitVector.dump$LCompressionReport$(report);\n};\n\n/**\n * class Section extends Metadata\n * @constructor\n */\nfunction Section() {\n}\n\nSection.prototype = new Metadata;\n/**\n * @constructor\n * @param {Oktavia} parent\n */\nfunction Section$LOktavia$(parent) {\n\tMetadata$LOktavia$.call(this, parent);\n\tthis._names = [  ];\n};\n\nSection$LOktavia$.prototype = new Section;\n\n/**\n * @param {!string} name\n */\nSection.prototype.setTail$S = function (name) {\n\tthis.setTail$SI(name, this._parent.contentSize$());\n};\n\n/**\n * @param {!string} name\n * @param {!number} index\n */\nSection.prototype.setTail$SI = function (name, index) {\n\tthis._names.push(name);\n\tthis._bitVector.set$I(index - 1);\n};\n\n/**\n * @return {!number}\n */\nSection.prototype.size$ = function () {\n\treturn (this._names.length | 0);\n};\n\n/**\n * @param {!number} position\n * @return {!number}\n */\nSection.prototype.getSectionIndex$I = function (position) {\n\tif (position < 0 || this._bitVector.size$() <= position) {\n\t\tthrow new Error(\"Section.getSectionIndex() : range error \" + (position + \"\"));\n\t}\n\treturn this._bitVector.rank$I(position);\n};\n\n/**\n * @param {!number} index\n * @return {!string}\n */\nSection.prototype.getName$I = function (index) {\n\tif (index < 0 || this.size$() <= index) {\n\t\tthrow new Error(\"Section.getName() : range error\");\n\t}\n\treturn (function (v) {\n\t\tif (! (v != null)) {\n\t\t\tdebugger;\n\t\t\tthrow new Error(\"[src/metadata.jsx:129:26] null access\\n        return this._names[index];\\n                          ^\\n\");\n\t\t}\n\t\treturn v;\n\t}(this._names[index]));\n};\n\n/**\n * @param {SingleResult} result\n * @param {Array.<undefined|!number>} positions\n * @param {!string} word\n * @param {!boolean} stemmed\n */\nSection.prototype.grouping$LSingleResult$AISB = function (result, positions, word, stemmed) {\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {undefined|!number} */\n\tvar position;\n\t/** @type {!number} */\n\tvar index;\n\t/** @type {SearchUnit} */\n\tvar unit;\n\tfor (i = 0; i < positions.length; i++) {\n\t\tposition = positions[i];\n\t\tindex = this.getSectionIndex$I((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/metadata.jsx:137:45] null access\\n            var index = this.getSectionIndex(position);\\n                                             ^^^^^^^^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(position)));\n\t\tunit = result.getSearchUnit$I(index);\n\t\tif (unit.startPosition < 0) {\n\t\t\tunit.startPosition = this.getStartPosition$I(index);\n\t\t}\n\t\tunit.addPosition$SIB(word, (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/metadata.jsx:143:35] null access\\n            unit.addPosition(word, position - unit.startPosition, stemmed);\\n                                   ^^^^^^^^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(position)) - unit.startPosition, stemmed);\n\t}\n};\n\n/**\n * @param {!number} index\n * @return {!string}\n */\nSection.prototype.getInformation$I = function (index) {\n\treturn this.getName$I(index);\n};\n\n/**\n * @param {Oktavia} parent\n * @param {!string} name\n * @param {!string} data\n * @param {!number} offset\n * @return {!number}\n */\nSection._load$LOktavia$SSI = function (parent, name, data, offset) {\n\t/** @type {LoadedStringListResult} */\n\tvar strs;\n\t/** @type {Section} */\n\tvar section;\n\tstrs = Binary$loadStringList$SI(data, offset);\n\tsection = new Section$LOktavia$(parent);\n\tsection._names = strs.result;\n\treturn section._load$SSI(name, data, strs.offset);\n};\n\nvar Section$_load$LOktavia$SSI = Section._load$LOktavia$SSI;\n\n/**\n * @return {!string}\n */\nSection.prototype._dump$ = function () {\n\treturn [ Binary$dump16bitNumber$I(0), Binary$dumpStringList$AS(this._names), Metadata.prototype._dump$.call(this) ].join('');\n};\n\n/**\n * @param {CompressionReport} report\n * @return {!string}\n */\nSection.prototype._dump$LCompressionReport$ = function (report) {\n\treport.add$II(1, 1);\n\treturn [ Binary$dump16bitNumber$I(0), Binary$dumpStringList$ASLCompressionReport$(this._names, report), Metadata.prototype._dump$LCompressionReport$.call(this, report) ].join('');\n};\n\n/**\n * class Splitter extends Metadata\n * @constructor\n */\nfunction Splitter() {\n}\n\nSplitter.prototype = new Metadata;\n/**\n * @constructor\n * @param {Oktavia} parent\n */\nfunction Splitter$LOktavia$(parent) {\n\tMetadata$LOktavia$.call(this, parent);\n\tthis.name = null;\n};\n\nSplitter$LOktavia$.prototype = new Splitter;\n\n/**\n * @constructor\n * @param {Oktavia} parent\n * @param {!string} name\n */\nfunction Splitter$LOktavia$S(parent, name) {\n\tMetadata$LOktavia$.call(this, parent);\n\tthis.name = name;\n};\n\nSplitter$LOktavia$S.prototype = new Splitter;\n\n/**\n * @return {!number}\n */\nSplitter.prototype.size$ = function () {\n\treturn this._size$();\n};\n\n/**\n */\nSplitter.prototype.split$ = function () {\n\tthis.split$I(this._parent.contentSize$());\n};\n\n/**\n * @param {!number} index\n */\nSplitter.prototype.split$I = function (index) {\n\tthis._bitVector.set$I(index - 1);\n};\n\n/**\n * @param {!number} position\n * @return {!number}\n */\nSplitter.prototype.getIndex$I = function (position) {\n\tif (position < 0 || this._bitVector.size$() <= position) {\n\t\tthrow new Error(\"Section.getSectionIndex() : range error\");\n\t}\n\treturn this._bitVector.rank$I(position);\n};\n\n/**\n * @param {SingleResult} result\n * @param {Array.<undefined|!number>} positions\n * @param {!string} word\n * @param {!boolean} stemmed\n */\nSplitter.prototype.grouping$LSingleResult$AISB = function (result, positions, word, stemmed) {\n};\n\n/**\n * @param {!number} index\n * @return {!string}\n */\nSplitter.prototype.getInformation$I = function (index) {\n\tif (this.name != null) {\n\t\treturn (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/metadata.jsx:221:23] null access\\n            return this.name + ((index + 1) as string);\\n                       ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(this.name)) + (index + 1 + \"\");\n\t}\n\treturn '';\n};\n\n/**\n * @param {Oktavia} parent\n * @param {!string} name\n * @param {!string} data\n * @param {!number} offset\n * @return {!number}\n */\nSplitter._load$LOktavia$SSI = function (parent, name, data, offset) {\n\t/** @type {Splitter} */\n\tvar section;\n\tsection = new Splitter$LOktavia$(parent);\n\treturn section._load$SSI(name, data, offset);\n};\n\nvar Splitter$_load$LOktavia$SSI = Splitter._load$LOktavia$SSI;\n\n/**\n * @return {!string}\n */\nSplitter.prototype._dump$ = function () {\n\treturn [ Binary$dump16bitNumber$I(1), Metadata.prototype._dump$.call(this) ].join('');\n};\n\n/**\n * @param {CompressionReport} report\n * @return {!string}\n */\nSplitter.prototype._dump$LCompressionReport$ = function (report) {\n\treport.add$II(1, 1);\n\treturn [ Binary$dump16bitNumber$I(1), Metadata.prototype._dump$LCompressionReport$.call(this, report) ].join('');\n};\n\n/**\n * class Table extends Metadata\n * @constructor\n */\nfunction Table() {\n}\n\nTable.prototype = new Metadata;\n/**\n * @constructor\n * @param {Oktavia} parent\n * @param {Array.<undefined|!string>} headers\n */\nfunction Table$LOktavia$AS(parent, headers) {\n\tMetadata$LOktavia$.call(this, parent);\n\tthis._headers = headers;\n\tthis._columnTails = new BitVector$();\n};\n\nTable$LOktavia$AS.prototype = new Table;\n\n/**\n * @return {!number}\n */\nTable.prototype.rowSize$ = function () {\n\treturn this._size$();\n};\n\n/**\n * @return {!number}\n */\nTable.prototype.columnSize$ = function () {\n\treturn (this._headers.length | 0);\n};\n\n/**\n */\nTable.prototype.setColumnTail$ = function () {\n\t/** @type {!number} */\n\tvar index;\n\tindex = this._parent.contentSize$();\n\tthis._parent.addEndOfBlock$();\n\tthis._columnTails.set$I(index - 1);\n};\n\n/**\n */\nTable.prototype.setRowTail$ = function () {\n\t/** @type {!number} */\n\tvar index;\n\tindex = this._parent.contentSize$();\n\tthis._bitVector.set$I(index - 1);\n};\n\n/**\n * @param {!number} position\n * @return {Array.<undefined|!number>}\n */\nTable.prototype.getCell$I = function (position) {\n\t/** @type {!number} */\n\tvar row;\n\t/** @type {!number} */\n\tvar currentColumn;\n\t/** @type {!number} */\n\tvar lastRowColumn;\n\t/** @type {!number} */\n\tvar startPosition;\n\t/** @type {Array.<undefined|!number>} */\n\tvar result;\n\tif (position < 0 || this._bitVector.size$() <= position) {\n\t\tthrow new Error(\"Section.getSectionIndex() : range error \" + (position + \"\"));\n\t}\n\trow = this._bitVector.rank$I(position);\n\tcurrentColumn = this._columnTails.rank$I(position);\n\tlastRowColumn = 0;\n\tif (row > 0) {\n\t\tstartPosition = this._bitVector.select$I(row - 1) + 1;\n\t\tlastRowColumn = this._columnTails.rank$I(startPosition);\n\t}\n\tresult = [ row, currentColumn - lastRowColumn ];\n\treturn result;\n};\n\n/**\n * @param {!number} rowIndex\n * @return {Object.<string, undefined|!string>}\n */\nTable.prototype.getRowContent$I = function (rowIndex) {\n\t/** @type {!string} */\n\tvar content;\n\t/** @type {Array.<undefined|!string>} */\n\tvar values;\n\t/** @type {Object.<string, undefined|!string>} */\n\tvar result;\n\t/** @type {!number} */\n\tvar i;\n\tcontent = this.getContent$I(rowIndex);\n\tvalues = content.split(Oktavia.eob, this._headers.length);\n\tresult = ({  });\n\tfor (i in this._headers) {\n\t\tif (i < values.length) {\n\t\t\tresult[this._headers[i]] = values[i];\n\t\t} else {\n\t\t\tresult[this._headers[i]] = '';\n\t\t}\n\t}\n\treturn result;\n};\n\n/**\n * @param {SingleResult} result\n * @param {Array.<undefined|!number>} positions\n * @param {!string} word\n * @param {!boolean} stemmed\n */\nTable.prototype.grouping$LSingleResult$AISB = function (result, positions, word, stemmed) {\n};\n\n/**\n * @param {!number} index\n * @return {!string}\n */\nTable.prototype.getInformation$I = function (index) {\n\treturn '';\n};\n\n/**\n */\nTable.prototype._build$ = function () {\n\tthis._bitVector.build$();\n\tthis._columnTails.build$();\n};\n\n/**\n * @param {Oktavia} parent\n * @param {!string} name\n * @param {!string} data\n * @param {!number} offset\n * @return {!number}\n */\nTable._load$LOktavia$SSI = function (parent, name, data, offset) {\n\t/** @type {LoadedStringListResult} */\n\tvar strs;\n\t/** @type {Table} */\n\tvar table;\n\tstrs = Binary$loadStringList$SI(data, offset);\n\ttable = new Table$LOktavia$AS(parent, strs.result);\n\toffset = table._load$SSI(name, data, strs.offset);\n\treturn table._columnTails.load$SI(data, offset);\n};\n\nvar Table$_load$LOktavia$SSI = Table._load$LOktavia$SSI;\n\n/**\n * @return {!string}\n */\nTable.prototype._dump$ = function () {\n\treturn [ Binary$dump16bitNumber$I(2), Binary$dumpStringList$AS(this._headers), Metadata.prototype._dump$.call(this), this._columnTails.dump$() ].join('');\n};\n\n/**\n * @param {CompressionReport} report\n * @return {!string}\n */\nTable.prototype._dump$LCompressionReport$ = function (report) {\n\treport.add$II(1, 1);\n\treturn [ Binary$dump16bitNumber$I(2), Binary$dumpStringList$ASLCompressionReport$(this._headers, report), Metadata.prototype._dump$LCompressionReport$.call(this, report), this._columnTails.dump$LCompressionReport$(report) ].join('');\n};\n\n/**\n * class Block extends Metadata\n * @constructor\n */\nfunction Block() {\n}\n\nBlock.prototype = new Metadata;\n/**\n * @constructor\n * @param {Oktavia} parent\n */\nfunction Block$LOktavia$(parent) {\n\tMetadata$LOktavia$.call(this, parent);\n\tthis._names = [  ];\n\tthis._start = false;\n};\n\nBlock$LOktavia$.prototype = new Block;\n\n/**\n * @param {!string} blockName\n */\nBlock.prototype.startBlock$S = function (blockName) {\n\tthis.startBlock$SI(blockName, this._parent.contentSize$());\n};\n\n/**\n * @param {!string} blockName\n * @param {!number} index\n */\nBlock.prototype.startBlock$SI = function (blockName, index) {\n\tif (this._start) {\n\t\tthrow new Error('Splitter `' + (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/metadata.jsx:380:54] null access\\n            throw new Error(\\'Splitter `\\' + this._names[this._names.length - 1] + \\'` is not closed\\');\\n                                                      ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(this._names[this._names.length - 1])) + '` is not closed');\n\t}\n\tthis._start = true;\n\tthis._names.push(blockName);\n\tthis._bitVector.set$I(index - 1);\n};\n\n/**\n */\nBlock.prototype.endBlock$ = function () {\n\tthis.endBlock$I(this._parent.contentSize$());\n};\n\n/**\n * @param {!number} index\n */\nBlock.prototype.endBlock$I = function (index) {\n\tif (! this._start) {\n\t\tthrow new Error('Splitter is not started');\n\t}\n\tthis._start = false;\n\tthis._bitVector.set$I(index - 1);\n};\n\n/**\n * @return {!number}\n */\nBlock.prototype.size$ = function () {\n\treturn (this._names.length | 0);\n};\n\n/**\n * @param {!number} position\n * @return {!number}\n */\nBlock.prototype.blockIndex$I = function (position) {\n\t/** @type {!number} */\n\tvar result;\n\tif (position < 0 || this._parent._fmindex.size$() - 1 <= position) {\n\t\tthrow new Error(\"Block.blockIndex() : range error \" + (position + \"\"));\n\t}\n\tif (position >= this._bitVector.size$()) {\n\t\tposition = (this._bitVector.size$() - 1 | 0);\n\t\tresult = (this._bitVector.rank$I(position) + 1 | 0);\n\t} else {\n\t\tresult = this._bitVector.rank$I(position);\n\t}\n\treturn result;\n};\n\n/**\n * @param {!number} position\n * @return {!boolean}\n */\nBlock.prototype.inBlock$I = function (position) {\n\t/** @type {!number} */\n\tvar blockIndex;\n\tblockIndex = this.blockIndex$I(position);\n\treturn blockIndex % 2 !== 0;\n};\n\n/**\n * @param {!number} position\n * @return {!string}\n */\nBlock.prototype.getBlockContent$I = function (position) {\n\t/** @type {!number} */\n\tvar blockIndex;\n\t/** @type {!string} */\n\tvar result;\n\tblockIndex = this.blockIndex$I(position);\n\tif (blockIndex % 2 !== 0) {\n\t\tresult = this.getContent$I(blockIndex);\n\t} else {\n\t\tresult = '';\n\t}\n\treturn result;\n};\n\n/**\n * @param {!number} position\n * @return {!string}\n */\nBlock.prototype.getBlockName$I = function (position) {\n\t/** @type {!number} */\n\tvar blockIndex;\n\t/** @type {!string} */\n\tvar result;\n\tblockIndex = this.blockIndex$I(position);\n\tif (blockIndex % 2 !== 0) {\n\t\tresult = (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/metadata.jsx:453:32] null access\\n            result = this._names[blockIndex >>> 1];\\n                                ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(this._names[blockIndex >>> 1]));\n\t} else {\n\t\tresult = '';\n\t}\n\treturn result;\n};\n\n/**\n * @param {SingleResult} result\n * @param {Array.<undefined|!number>} positions\n * @param {!string} word\n * @param {!boolean} stemmed\n */\nBlock.prototype.grouping$LSingleResult$AISB = function (result, positions, word, stemmed) {\n};\n\n/**\n * @param {!number} index\n * @return {!string}\n */\nBlock.prototype.getInformation$I = function (index) {\n\treturn '';\n};\n\n/**\n * @param {Oktavia} parent\n * @param {!string} name\n * @param {!string} data\n * @param {!number} offset\n * @return {!number}\n */\nBlock._load$LOktavia$SSI = function (parent, name, data, offset) {\n\t/** @type {LoadedStringListResult} */\n\tvar strs;\n\t/** @type {Block} */\n\tvar block;\n\tstrs = Binary$loadStringList$SI(data, offset);\n\tblock = new Block$LOktavia$(parent);\n\tblock._names = strs.result;\n\treturn block._load$SSI(name, data, strs.offset);\n};\n\nvar Block$_load$LOktavia$SSI = Block._load$LOktavia$SSI;\n\n/**\n * @return {!string}\n */\nBlock.prototype._dump$ = function () {\n\treturn [ Binary$dump16bitNumber$I(3), Binary$dumpStringList$AS(this._names), Metadata.prototype._dump$.call(this) ].join('');\n};\n\n/**\n * @param {CompressionReport} report\n * @return {!string}\n */\nBlock.prototype._dump$LCompressionReport$ = function (report) {\n\treport.add$II(1, 1);\n\treturn [ Binary$dump16bitNumber$I(3), Binary$dumpStringList$ASLCompressionReport$(this._names, report), Metadata.prototype._dump$LCompressionReport$.call(this, report) ].join('');\n};\n\n/**\n * class FMIndex extends Object\n * @constructor\n */\nfunction FMIndex() {\n}\n\n/**\n * @constructor\n */\nfunction FMIndex$() {\n\tthis._ssize = 0;\n\t(this._ddic = 0, this._head = 0);\n\tthis._substr = \"\";\n\tthis._sv = new WaveletMatrix$();\n\tthis._posdic = [  ];\n\tthis._idic = [  ];\n\tthis._rlt = [  ];\n\tthis._rlt.length = 65536;\n};\n\nFMIndex$.prototype = new FMIndex;\n\n/**\n */\nFMIndex.prototype.clear$ = function () {\n\tthis._sv.clear$();\n\tthis._posdic.length = 0;\n\tthis._idic.length = 0;\n\tthis._ddic = 0;\n\tthis._head = 0;\n\tthis._substr = \"\";\n};\n\n/**\n * @return {!number}\n */\nFMIndex.prototype.size$ = function () {\n\treturn this._sv.size$();\n};\n\n/**\n * @return {!number}\n */\nFMIndex.prototype.contentSize$ = function () {\n\treturn this._substr.length;\n};\n\n/**\n * @param {!string} key\n * @return {!number}\n */\nFMIndex.prototype.getRows$S = function (key) {\n\t/** @type {Array.<undefined|!number>} */\n\tvar pos;\n\tpos = [  ];\n\treturn this.getRows$SAI(key, pos);\n};\n\n/**\n * @param {!string} key\n * @param {Array.<undefined|!number>} pos\n * @return {!number}\n */\nFMIndex.prototype.getRows$SAI = function (key, pos) {\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {!number} */\n\tvar code;\n\t/** @type {!number} */\n\tvar first;\n\t/** @type {undefined|!number} */\n\tvar last;\n\t/** @type {!number} */\n\tvar c;\n\ti = key.length - 1;\n\tcode = key.charCodeAt(i);\n\tfirst = (function (v) {\n\t\tif (! (v != null)) {\n\t\t\tdebugger;\n\t\t\tthrow new Error(\"[src/fm-index.jsx:67:29] null access\\n        var first = this._rlt[code] + 1;\\n                             ^\\n\");\n\t\t}\n\t\treturn v;\n\t}(this._rlt[code])) + 1;\n\tlast = this._rlt[code + 1];\n\twhile (first <= (function (v) {\n\t\tif (! (v != null)) {\n\t\t\tdebugger;\n\t\t\tthrow new Error(\"[src/fm-index.jsx:69:24] null access\\n        while (first <= last)\\n                        ^^^^\\n\");\n\t\t}\n\t\treturn v;\n\t}(last))) {\n\t\tif (i === 0) {\n\t\t\tpos[0] = (-- first | 0);\n\t\t\tpos[1] = -- last;\n\t\t\treturn ((function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/fm-index.jsx:75:24] null access\\n                return (last - first  + 1);\\n                        ^^^^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(last)) - first + 1 | 0);\n\t\t}\n\t\ti--;\n\t\tc = key.charCodeAt(i);\n\t\tfirst = (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/fm-index.jsx:79:29] null access\\n            first = this._rlt[c] + this._sv.rank(first - 1, c) + 1;\\n                             ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(this._rlt[c])) + this._sv.rank$II(first - 1, c) + 1;\n\t\tlast = (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/fm-index.jsx:80:29] null access\\n            last  = this._rlt[c] + this._sv.rank(last,      c);\\n                             ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(this._rlt[c])) + this._sv.rank$II((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/fm-index.jsx:80:49] null access\\n            last  = this._rlt[c] + this._sv.rank(last,      c);\\n                                                 ^^^^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(last)), c);\n\t}\n\treturn 0;\n};\n\n/**\n * @param {!number} i\n * @return {!number}\n */\nFMIndex.prototype.getPosition$I = function (i) {\n\t/** @type {!number} */\n\tvar pos;\n\t/** @type {!number} */\n\tvar c;\n\tif (i >= this.size$()) {\n\t\tthrow new Error(\"FMIndex.getPosition() : range error\");\n\t}\n\tpos = 0;\n\twhile (i !== this._head) {\n\t\tif (i % this._ddic === 0) {\n\t\t\tpos += (function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/fm-index.jsx:96:36] null access\\n                pos += (this._posdic[i / this._ddic] + 1);\\n                                    ^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(this._posdic[i / this._ddic])) + 1;\n\t\t\tbreak;\n\t\t}\n\t\tc = this._sv.get$I(i);\n\t\ti = (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/fm-index.jsx:100:25] null access\\n            i = this._rlt[c] + this._sv.rank(i, c); //LF\\n                         ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(this._rlt[c])) + this._sv.rank$II(i, c);\n\t\tpos++;\n\t}\n\treturn (pos % this.size$() | 0);\n};\n\n/**\n * @param {!number} pos\n * @param {!number} len\n * @return {!string}\n */\nFMIndex.prototype.getSubstring$II = function (pos, len) {\n\t/** @type {!number} */\n\tvar pos_end;\n\t/** @type {!number} */\n\tvar pos_tmp;\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {!number} */\n\tvar pos_idic;\n\t/** @type {!string} */\n\tvar substr;\n\t/** @type {!number} */\n\tvar c;\n\tif (pos >= this.size$()) {\n\t\tthrow new Error(\"FMIndex.getSubstring() : range error\");\n\t}\n\tpos_end = Math.min(pos + len, this.size$());\n\tpos_tmp = this.size$() - 1;\n\ti = this._head;\n\tpos_idic = Math.floor((pos_end + this._ddic - 2) / this._ddic);\n\tif (pos_idic < this._idic.length) {\n\t\tpos_tmp = pos_idic * this._ddic;\n\t\ti = (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/fm-index.jsx:119:32] null access\\n            i       = this._idic[pos_idic];\\n                                ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(this._idic[pos_idic]));\n\t}\n\tsubstr = \"\";\n\twhile (pos_tmp >= pos) {\n\t\tc = this._sv.get$I(i);\n\t\ti = (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/fm-index.jsx:126:25] null access\\n            i = this._rlt[c] + this._sv.rank(i, c); //LF\\n                         ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(this._rlt[c])) + this._sv.rank$II(i, c);\n\t\tif (pos_tmp < pos_end) {\n\t\t\tsubstr = String.fromCharCode(c) + substr;\n\t\t}\n\t\tif (pos_tmp === 0) {\n\t\t\tbreak;\n\t\t}\n\t\tpos_tmp--;\n\t}\n\treturn substr;\n};\n\n/**\n */\nFMIndex.prototype.build$ = function () {\n\tthis.build$SIIB(String.fromCharCode(0), 65535, 20, false);\n};\n\n/**\n * @param {!string} end_marker\n * @param {!number} ddic\n * @param {!boolean} verbose\n */\nFMIndex.prototype.build$SIB = function (end_marker, ddic, verbose) {\n\tthis.build$SIIB(end_marker, 65535, ddic, verbose);\n};\n\n/**\n * @param {!string} end_marker\n * @param {!number} maxChar\n * @param {!number} ddic\n * @param {!boolean} verbose\n */\nFMIndex.prototype.build$SIIB = function (end_marker, maxChar, ddic, verbose) {\n\t/** @type {BurrowsWheelerTransform} */\n\tvar b;\n\t/** @type {!string} */\n\tvar s;\n\t/** @type {!number} */\n\tvar c;\n\tif (verbose) {\n\t\tconsole.time(\"building burrows-wheeler transform\");\n\t}\n\tthis._substr += end_marker;\n\tb = new BurrowsWheelerTransform$();\n\tb.build$S(this._substr);\n\ts = b.get$();\n\tthis._ssize = s.length;\n\tthis._head = b.head$();\n\tb.clear$();\n\tthis._substr = \"\";\n\tif (verbose) {\n\t\tconsole.timeEnd(\"building burrows-wheeler transform\");\n\t}\n\tif (verbose) {\n\t\tconsole.time(\"building wavelet matrix\");\n\t}\n\tthis._sv.setMaxCharCode$I(maxChar);\n\tif (verbose) {\n\t\tconsole.log(\"  maxCharCode: \", maxChar);\n\t\tconsole.log(\"  bitSize: \", this._sv.bitsize$());\n\t}\n\tthis._sv.build$S(s);\n\tif (verbose) {\n\t\tconsole.timeEnd(\"building wavelet matrix\");\n\t}\n\tif (verbose) {\n\t\tconsole.time(\"caching rank less than\");\n\t}\n\tfor (c = 0; c < maxChar; c++) {\n\t\tthis._rlt[c] = this._sv.rank_less_than$II(this._sv.size$(), c);\n\t}\n\tif (verbose) {\n\t\tconsole.timeEnd(\"caching rank less than\");\n\t}\n\tthis._ddic = ddic;\n\tif (verbose) {\n\t\tconsole.time(\"building dictionaries\");\n\t}\n\tthis._buildDictionaries$();\n\tif (verbose) {\n\t\tconsole.timeEnd(\"building dictionaries\");\n\t\tconsole.log('');\n\t}\n};\n\n/**\n */\nFMIndex.prototype._buildDictionaries$ = function () {\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {!number} */\n\tvar pos;\n\t/** @type {!number} */\n\tvar c;\n\tfor (i = 0; i < this._ssize / this._ddic + 1; i++) {\n\t\tthis._posdic.push(0);\n\t\tthis._idic.push(0);\n\t}\n\ti = this._head;\n\tpos = this.size$() - 1;\n\tdo {\n\t\tif (i % this._ddic === 0) {\n\t\t\tthis._posdic[Math.floor(i / this._ddic)] = (pos | 0);\n\t\t}\n\t\tif (pos % this._ddic === 0) {\n\t\t\tthis._idic[Math.floor(pos / this._ddic)] = (i | 0);\n\t\t}\n\t\tc = this._sv.get$I(i);\n\t\ti = (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/fm-index.jsx:228:25] null access\\n            i = this._rlt[c] + this._sv.rank(i, c); //LF\\n                         ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(this._rlt[c])) + this._sv.rank$II(i, c);\n\t\tpos--;\n\t} while (i !== this._head);\n};\n\n/**\n * @param {!string} doc\n */\nFMIndex.prototype.push$S = function (doc) {\n\tif (doc.length <= 0) {\n\t\tthrow new Error(\"FMIndex::push(): empty string\");\n\t}\n\tthis._substr += doc;\n};\n\n/**\n * @param {!string} keyword\n * @return {Array.<undefined|!number>}\n */\nFMIndex.prototype.search$S = function (keyword) {\n\t/** @type {Object.<string, undefined|!number>} */\n\tvar result_map;\n\t/** @type {Array.<undefined|!number>} */\n\tvar result;\n\t/** @type {Array.<undefined|!number>} */\n\tvar position;\n\t/** @type {!number} */\n\tvar rows;\n\t/** @type {undefined|!number} */\n\tvar first;\n\t/** @type {undefined|!number} */\n\tvar last;\n\t/** @type {undefined|!number} */\n\tvar i;\n\tresult_map = ({  });\n\tresult = [  ];\n\tposition = [  ];\n\trows = this.getRows$SAI(keyword, position);\n\tif (rows > 0) {\n\t\tfirst = position[0];\n\t\tlast = position[1];\n\t\tfor (i = first; (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/fm-index.jsx:252:32] null access\\n            for (var i = first; i <= last; i++)\\n                                ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(i)) <= (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/fm-index.jsx:252:37] null access\\n            for (var i = first; i <= last; i++)\\n                                     ^^^^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(last)); i++) {\n\t\t\tresult.push(this.getPosition$I((function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/fm-index.jsx:254:45] null access\\n                result.push(this.getPosition(i));\\n                                             ^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(i))));\n\t\t}\n\t}\n\treturn result;\n};\n\n/**\n * @return {!string}\n */\nFMIndex.prototype.dump$ = function () {\n\treturn this.dump$B(false);\n};\n\n/**\n * @param {!boolean} verbose\n * @return {!string}\n */\nFMIndex.prototype.dump$B = function (verbose) {\n\t/** @type {Array.<undefined|!string>} */\n\tvar contents;\n\t/** @type {CompressionReport} */\n\tvar report;\n\t/** @type {!number} */\n\tvar i;\n\tcontents = [  ];\n\treport = new CompressionReport$();\n\tcontents.push(Binary$dump32bitNumber$N(this._ddic));\n\tcontents.push(Binary$dump32bitNumber$N(this._ssize));\n\tcontents.push(Binary$dump32bitNumber$N(this._head));\n\treport.add$II(6, 6);\n\tcontents.push(this._sv.dump$LCompressionReport$(report));\n\tif (verbose) {\n\t\tconsole.log(\"Serializing FM-index\");\n\t\tconsole.log('    Wavelet Matrix: ' + (contents[3].length * 2 + \"\") + ' bytes (' + (report.rate$() + \"\") + '%)');\n\t}\n\tcontents.push(Binary$dump32bitNumber$N(this._posdic.length));\n\tfor (i in this._posdic) {\n\t\tcontents.push(Binary$dump32bitNumber$N((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/fm-index.jsx:282:61] null access\\n            contents.push(Binary.dump32bitNumber(this._posdic[i]));\\n                                                             ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(this._posdic[i]))));\n\t}\n\tfor (i in this._idic) {\n\t\tcontents.push(Binary$dump32bitNumber$N((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/fm-index.jsx:286:59] null access\\n            contents.push(Binary.dump32bitNumber(this._idic[i]));\\n                                                           ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(this._idic[i]))));\n\t}\n\tif (verbose) {\n\t\tconsole.log('    Dictionary Cache: ' + (this._idic.length * 16 + \"\") + ' bytes');\n\t}\n\treturn contents.join(\"\");\n};\n\n/**\n * @param {!string} data\n * @return {!number}\n */\nFMIndex.prototype.load$S = function (data) {\n\treturn this.load$SI(data, 0);\n};\n\n/**\n * @param {!string} data\n * @param {!number} offset\n * @return {!number}\n */\nFMIndex.prototype.load$SI = function (data, offset) {\n\t/** @type {!number} */\n\tvar maxChar;\n\t/** @type {!number} */\n\tvar c;\n\t/** @type {!number} */\n\tvar size;\n\t/** @type {!number} */\n\tvar i;\n\tthis._ddic = (Binary$load32bitNumber$SI(data, offset) | 0);\n\tthis._ssize = (Binary$load32bitNumber$SI(data, offset + 2) | 0);\n\tthis._head = (Binary$load32bitNumber$SI(data, offset + 4) | 0);\n\toffset = this._sv.load$SI(data, offset + 6);\n\tmaxChar = Math.pow(2, this._sv.bitsize$());\n\tfor (c = 0; c < maxChar; c++) {\n\t\tthis._rlt[c] = this._sv.rank_less_than$II(this._sv.size$(), c);\n\t}\n\tsize = Binary$load32bitNumber$SI(data, offset);\n\toffset += 2;\n\tfor (i = 0; i < size; (i++, offset += 2)) {\n\t\tthis._posdic.push(Binary$load32bitNumber$SI(data, offset));\n\t}\n\tfor (i = 0; i < size; (i++, offset += 2)) {\n\t\tthis._idic.push(Binary$load32bitNumber$SI(data, offset));\n\t}\n\treturn offset;\n};\n\n/**\n * class Tag extends Object\n * @constructor\n */\nfunction Tag() {\n}\n\n/**\n * @constructor\n * @param {!string} name\n */\nfunction Tag$S(name) {\n\tthis.name = name;\n\tthis.attributes = ({  });\n\tthis.isSelfClosing = false;\n};\n\nTag$S.prototype = new Tag;\n\n/**\n * class _Common extends Object\n * @constructor\n */\nfunction _Common() {\n}\n\n/**\n * @constructor\n */\nfunction _Common$() {\n};\n\n_Common$.prototype = new _Common;\n\n/**\n * class _State extends Object\n * @constructor\n */\nfunction _State() {\n}\n\n/**\n * @constructor\n */\nfunction _State$() {\n};\n\n_State$.prototype = new _State;\n\n/**\n * class SAXHandler extends Object\n * @constructor\n */\nfunction SAXHandler() {\n}\n\n/**\n * @constructor\n */\nfunction SAXHandler$() {\n\tthis.position = 0;\n\tthis.column = 0;\n\tthis.line = 0;\n};\n\nSAXHandler$.prototype = new SAXHandler;\n\n/**\n * @param {Error} error\n */\nSAXHandler.prototype.onerror$LError$ = function (error) {\n};\n\n/**\n * @param {!string} text\n */\nSAXHandler.prototype.ontext$S = function (text) {\n};\n\n/**\n * @param {!string} doctype\n */\nSAXHandler.prototype.ondoctype$S = function (doctype) {\n};\n\n/**\n * @param {!string} name\n * @param {!string} body\n */\nSAXHandler.prototype.onprocessinginstruction$SS = function (name, body) {\n};\n\n/**\n * @param {!string} sgmlDecl\n */\nSAXHandler.prototype.onsgmldeclaration$S = function (sgmlDecl) {\n};\n\n/**\n * @param {!string} tagname\n * @param {Object.<string, undefined|!string>} attributes\n */\nSAXHandler.prototype.onopentag$SHS = function (tagname, attributes) {\n};\n\n/**\n * @param {!string} tagname\n */\nSAXHandler.prototype.onclosetag$S = function (tagname) {\n};\n\n/**\n * @param {!string} name\n * @param {!string} value\n */\nSAXHandler.prototype.onattribute$SS = function (name, value) {\n};\n\n/**\n * @param {!string} comment\n */\nSAXHandler.prototype.oncomment$S = function (comment) {\n};\n\n/**\n */\nSAXHandler.prototype.onopencdata$ = function () {\n};\n\n/**\n * @param {!string} cdata\n */\nSAXHandler.prototype.oncdata$S = function (cdata) {\n};\n\n/**\n */\nSAXHandler.prototype.onclosecdata$ = function () {\n};\n\n/**\n */\nSAXHandler.prototype.onend$ = function () {\n};\n\n/**\n */\nSAXHandler.prototype.onready$ = function () {\n};\n\n/**\n * @param {!string} script\n */\nSAXHandler.prototype.onscript$S = function (script) {\n};\n\n/**\n * class _HTMLHandler extends SAXHandler\n * @constructor\n */\nfunction _HTMLHandler() {\n}\n\n_HTMLHandler.prototype = new SAXHandler;\n/**\n * @constructor\n * @param {Object.<string, undefined|Array.<undefined|!string>>} styles\n * @param {!boolean} escape\n */\nfunction _HTMLHandler$HASB(styles, escape) {\n\tSAXHandler$.call(this);\n\tthis.text = [  ];\n\tthis.escape = escape;\n\tthis.styles = styles;\n};\n\n_HTMLHandler$HASB.prototype = new _HTMLHandler;\n\n/**\n * @param {!string} str\n * @return {!string}\n */\n_HTMLHandler.escapeHTML$S = function (str) {\n\treturn str.replace(/\\n/g, \"<br/>\").replace(/&/g, \"&amp;\").replace(/\"/g, \"&quot;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n};\n\nvar _HTMLHandler$escapeHTML$S = _HTMLHandler.escapeHTML$S;\n\n/**\n * @param {!string} tagname\n * @param {Object.<string, undefined|!string>} attributes\n */\n_HTMLHandler.prototype.onopentag$SHS = function (tagname, attributes) {\n\tthis.text.push((function (v) {\n\t\tif (! (v != null)) {\n\t\t\tdebugger;\n\t\t\tthrow new Error(\"[src/style.jsx:23:43] null access\\n        this.text.push(this.styles[tagname][0]);\\n                                           ^\\n\");\n\t\t}\n\t\treturn v;\n\t}(this.styles[tagname][0])));\n};\n\n/**\n * @param {!string} tagname\n */\n_HTMLHandler.prototype.onclosetag$S = function (tagname) {\n\tthis.text.push((function (v) {\n\t\tif (! (v != null)) {\n\t\t\tdebugger;\n\t\t\tthrow new Error(\"[src/style.jsx:28:43] null access\\n        this.text.push(this.styles[tagname][1]);\\n                                           ^\\n\");\n\t\t}\n\t\treturn v;\n\t}(this.styles[tagname][1])));\n};\n\n/**\n * @param {!string} text\n */\n_HTMLHandler.prototype.ontext$S = function (text) {\n\tif (this.escape) {\n\t\tthis.text.push(_HTMLHandler$escapeHTML$S(text));\n\t} else {\n\t\tthis.text.push(text);\n\t}\n};\n\n/**\n * @return {!string}\n */\n_HTMLHandler.prototype.result$ = function () {\n\treturn this.text.join('');\n};\n\n/**\n * class SAXParser extends Object\n * @constructor\n */\nfunction SAXParser() {\n}\n\n/**\n * @constructor\n * @param {SAXHandler} handler\n */\nfunction SAXParser$LSAXHandler$(handler) {\n\tthis.q = \"\";\n\tthis.c = \"\";\n\tthis.bufferCheckPosition = 0;\n\tthis.looseCase = \"\";\n\tthis.tags = [  ];\n\tthis.closed = false;\n\tthis.closedRoot = false;\n\tthis.sawRoot = false;\n\tthis.tag = null;\n\tthis.error = null;\n\tthis.handler = null;\n\tthis.ENTITIES = null;\n\tthis.strict = false;\n\tthis.tagName = \"\";\n\tthis.state = 0;\n\tthis.line = 0;\n\tthis.column = 0;\n\tthis.position = 0;\n\tthis.startTagPosition = 0;\n\tthis.attribName = \"\";\n\tthis.attribValue = \"\";\n\tthis.script = \"\";\n\tthis.textNode = \"\";\n\tthis.attribList = null;\n\tthis.noscript = false;\n\tthis.cdata = \"\";\n\tthis.procInstBody = \"\";\n\tthis.procInstName = \"\";\n\tthis.doctype = \"\";\n\tthis.entity = \"\";\n\tthis.sgmlDecl = \"\";\n\tthis.comment = \"\";\n\tthis.preTags = 0;\n\tthis._init$LSAXHandler$B(handler, false);\n};\n\nSAXParser$LSAXHandler$.prototype = new SAXParser;\n\n/**\n * @constructor\n * @param {SAXHandler} handler\n * @param {!boolean} strict\n */\nfunction SAXParser$LSAXHandler$B(handler, strict) {\n\tthis.q = \"\";\n\tthis.c = \"\";\n\tthis.bufferCheckPosition = 0;\n\tthis.looseCase = \"\";\n\tthis.tags = [  ];\n\tthis.closed = false;\n\tthis.closedRoot = false;\n\tthis.sawRoot = false;\n\tthis.tag = null;\n\tthis.error = null;\n\tthis.handler = null;\n\tthis.ENTITIES = null;\n\tthis.strict = false;\n\tthis.tagName = \"\";\n\tthis.state = 0;\n\tthis.line = 0;\n\tthis.column = 0;\n\tthis.position = 0;\n\tthis.startTagPosition = 0;\n\tthis.attribName = \"\";\n\tthis.attribValue = \"\";\n\tthis.script = \"\";\n\tthis.textNode = \"\";\n\tthis.attribList = null;\n\tthis.noscript = false;\n\tthis.cdata = \"\";\n\tthis.procInstBody = \"\";\n\tthis.procInstName = \"\";\n\tthis.doctype = \"\";\n\tthis.entity = \"\";\n\tthis.sgmlDecl = \"\";\n\tthis.comment = \"\";\n\tthis.preTags = 0;\n\tthis._init$LSAXHandler$B(handler, strict);\n};\n\nSAXParser$LSAXHandler$B.prototype = new SAXParser;\n\n/**\n * @param {SAXHandler} handler\n * @param {!boolean} strict\n */\nSAXParser.prototype._init$LSAXHandler$B = function (handler, strict) {\n\tthis.handler = handler;\n\tthis.clearBuffers$();\n\tthis.q = \"\";\n\tthis.bufferCheckPosition = (_Common.MAX_BUFFER_LENGTH | 0);\n\tthis.looseCase = 'toLowerCase';\n\tthis.tags = [  ];\n\tthis.closed = this.closedRoot = this.sawRoot = false;\n\tthis.tag = null;\n\tthis.error = null;\n\tthis.strict = strict;\n\tthis.noscript = strict;\n\tthis.state = (_State.BEGIN | 0);\n\tthis.ENTITIES = _Entities$entity_list$();\n\tthis.attribList = [  ];\n\tthis.noscript = false;\n\tthis.preTags = 0;\n\tthis.handler.onready$();\n};\n\n/**\n * @param {!boolean} flag\n */\nSAXParser.prototype.set_noscript$B = function (flag) {\n\tthis.noscript = flag;\n};\n\n/**\n * @return {SAXParser}\n */\nSAXParser.prototype.resume$ = function () {\n\tthis.error = null;\n\treturn this;\n};\n\n/**\n * @return {SAXParser}\n */\nSAXParser.prototype.close$ = function () {\n\treturn this.parse$S('');\n};\n\n/**\n * @param {!string} chunk\n * @return {SAXParser}\n */\nSAXParser.prototype.parse$S = function (chunk) {\n\t/** @type {Char} */\n\tvar _;\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {!string} */\n\tvar c;\n\t/** @type {!number} */\n\tvar starti;\n\t/** @type {!number} */\n\tvar pad;\n\t/** @type {!number} */\n\tvar returnState;\n\t_ = new Char$();\n\tif (this.error) {\n\t\tthrow this.error;\n\t}\n\tif (this.closed) {\n\t\treturn this.emiterror$S(\"Cannot write after close. Assign an onready handler.\");\n\t}\n\t(i = 0, c = \"\");\n\twhile (this.c = c = chunk.charAt(i++)) {\n\t\tthis.position++;\n\t\tif (c === \"\\n\") {\n\t\t\tthis.handler.line++;\n\t\t\tthis.handler.column = 0;\n\t\t} else {\n\t\t\tthis.handler.column++;\n\t\t}\n\t\tswitch (this.state) {\n\t\tcase _State.BEGIN:\n\t\t\tif (c === \"<\") {\n\t\t\t\tthis.state = (_State.OPEN_WAKA | 0);\n\t\t\t\tthis.startTagPosition = this.position;\n\t\t\t} else {\n\t\t\t\tif (_.not$HBS(_.whitespace, c)) {\n\t\t\t\t\tthis.strictFail$S(\"Non-whitespace before first tag.\");\n\t\t\t\t\tthis.textNode = c;\n\t\t\t\t\tthis.state = (_State.TEXT | 0);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.TEXT:\n\t\t\tif (this.sawRoot && ! this.closedRoot) {\n\t\t\t\tstarti = i - 1;\n\t\t\t\twhile (c && c !== \"<\" && c !== \"&\") {\n\t\t\t\t\tc = chunk.charAt(i++);\n\t\t\t\t\tif (c) {\n\t\t\t\t\t\tthis.position++;\n\t\t\t\t\t\tif (c === \"\\n\") {\n\t\t\t\t\t\t\tthis.handler.line++;\n\t\t\t\t\t\t\tthis.handler.column = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.handler.column++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.textNode += chunk.substring(starti, i - 1);\n\t\t\t}\n\t\t\tif (c === \"<\") {\n\t\t\t\tthis.state = (_State.OPEN_WAKA | 0);\n\t\t\t\tthis.startTagPosition = this.position;\n\t\t\t} else {\n\t\t\t\tif (_.not$HBS(_.whitespace, c) && (! this.sawRoot || this.closedRoot)) {\n\t\t\t\t\tthis.strictFail$S(\"Text data outside of root node.\");\n\t\t\t\t}\n\t\t\t\tif (c === \"&\") {\n\t\t\t\t\tthis.state = (_State.TEXT_ENTITY | 0);\n\t\t\t\t} else {\n\t\t\t\t\tthis.textNode += c;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.SCRIPT:\n\t\t\tif (c === \"<\") {\n\t\t\t\tthis.state = (_State.SCRIPT_ENDING | 0);\n\t\t\t} else {\n\t\t\t\tthis.script += c;\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.SCRIPT_ENDING:\n\t\t\tif (c === \"/\") {\n\t\t\t\tthis.state = (_State.CLOSE_TAG | 0);\n\t\t\t} else {\n\t\t\t\tthis.script += \"<\" + c;\n\t\t\t\tthis.state = (_State.SCRIPT | 0);\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.OPEN_WAKA:\n\t\t\tif (c === \"!\") {\n\t\t\t\tthis.state = (_State.SGML_DECL | 0);\n\t\t\t\tthis.sgmlDecl = \"\";\n\t\t\t} else {\n\t\t\t\tif (_.is$HBS(_.whitespace, c)) {\n\t\t\t\t} else {\n\t\t\t\t\tif (_.is$LRegExp$S(_.nameStart, c)) {\n\t\t\t\t\t\tthis.state = (_State.OPEN_TAG | 0);\n\t\t\t\t\t\tthis.tagName = c;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (c === \"/\") {\n\t\t\t\t\t\t\tthis.state = (_State.CLOSE_TAG | 0);\n\t\t\t\t\t\t\tthis.tagName = \"\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (c === \"?\") {\n\t\t\t\t\t\t\t\tthis.state = (_State.PROC_INST | 0);\n\t\t\t\t\t\t\t\tthis.procInstName = this.procInstBody = \"\";\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.strictFail$S(\"Unencoded <\");\n\t\t\t\t\t\t\t\tif (this.startTagPosition + 1 < this.position) {\n\t\t\t\t\t\t\t\t\tpad = this.position - this.startTagPosition;\n\t\t\t\t\t\t\t\t\tfor (i = 0; i < pad; i++) {\n\t\t\t\t\t\t\t\t\t\tc = \" \" + c;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tthis.textNode += \"<\" + c;\n\t\t\t\t\t\t\t\tthis.state = (_State.TEXT | 0);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.SGML_DECL:\n\t\t\tif ((this.sgmlDecl + c).toUpperCase() === _.CDATA) {\n\t\t\t\tthis.closetext_if_exist$();\n\t\t\t\tthis.handler.onopencdata$();\n\t\t\t\tthis.state = (_State.CDATA | 0);\n\t\t\t\tthis.sgmlDecl = \"\";\n\t\t\t\tthis.cdata = \"\";\n\t\t\t} else {\n\t\t\t\tif (this.sgmlDecl + c === \"--\") {\n\t\t\t\t\tthis.state = (_State.COMMENT | 0);\n\t\t\t\t\tthis.comment = \"\";\n\t\t\t\t\tthis.sgmlDecl = \"\";\n\t\t\t\t} else {\n\t\t\t\t\tif ((this.sgmlDecl + c).toUpperCase() === _.DOCTYPE) {\n\t\t\t\t\t\tthis.state = (_State.DOCTYPE | 0);\n\t\t\t\t\t\tif (this.doctype || this.sawRoot) {\n\t\t\t\t\t\t\tthis.strictFail$S(\"Inappropriately located doctype declaration\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.doctype = \"\";\n\t\t\t\t\t\tthis.sgmlDecl = \"\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (c === \">\") {\n\t\t\t\t\t\t\tthis.closetext_if_exist$();\n\t\t\t\t\t\t\tthis.handler.onsgmldeclaration$S(this.sgmlDecl);\n\t\t\t\t\t\t\tthis.sgmlDecl = \"\";\n\t\t\t\t\t\t\tthis.state = (_State.TEXT | 0);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (_.is$HBS(_.quote, c)) {\n\t\t\t\t\t\t\t\tthis.state = (_State.SGML_DECL_QUOTED | 0);\n\t\t\t\t\t\t\t\tthis.sgmlDecl += c;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.sgmlDecl += c;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.SGML_DECL_QUOTED:\n\t\t\tif (c === this.q) {\n\t\t\t\tthis.state = (_State.SGML_DECL | 0);\n\t\t\t\tthis.q = \"\";\n\t\t\t}\n\t\t\tthis.sgmlDecl += c;\n\t\t\tcontinue;\n\t\tcase _State.DOCTYPE:\n\t\t\tif (c === \">\") {\n\t\t\t\tthis.state = (_State.TEXT | 0);\n\t\t\t\tthis.closetext_if_exist$();\n\t\t\t\tthis.handler.ondoctype$S(this.doctype);\n\t\t\t} else {\n\t\t\t\tthis.doctype += c;\n\t\t\t\tif (c === \"[\") {\n\t\t\t\t\tthis.state = (_State.DOCTYPE_DTD | 0);\n\t\t\t\t} else {\n\t\t\t\t\tif (_.is$HBS(_.quote, c)) {\n\t\t\t\t\t\tthis.state = (_State.DOCTYPE_QUOTED | 0);\n\t\t\t\t\t\tthis.q = c;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.DOCTYPE_QUOTED:\n\t\t\tthis.doctype += c;\n\t\t\tif (c === this.q) {\n\t\t\t\tthis.q = \"\";\n\t\t\t\tthis.state = (_State.DOCTYPE | 0);\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.DOCTYPE_DTD:\n\t\t\tthis.doctype += c;\n\t\t\tif (c === \"]\") {\n\t\t\t\tthis.state = (_State.DOCTYPE | 0);\n\t\t\t} else {\n\t\t\t\tif (_.is$HBS(_.quote, c)) {\n\t\t\t\t\tthis.state = (_State.DOCTYPE_DTD_QUOTED | 0);\n\t\t\t\t\tthis.q = c;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.DOCTYPE_DTD_QUOTED:\n\t\t\tthis.doctype += c;\n\t\t\tif (c === this.q) {\n\t\t\t\tthis.state = (_State.DOCTYPE_DTD | 0);\n\t\t\t\tthis.q = \"\";\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.COMMENT:\n\t\t\tif (c === \"-\") {\n\t\t\t\tthis.state = (_State.COMMENT_ENDING | 0);\n\t\t\t} else {\n\t\t\t\tthis.comment += c;\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.COMMENT_ENDING:\n\t\t\tif (c === \"-\") {\n\t\t\t\tthis.state = (_State.COMMENT_ENDED | 0);\n\t\t\t\tthis.comment = this.textopts$S(this.comment);\n\t\t\t\tif (this.comment) {\n\t\t\t\t\tthis.closetext_if_exist$();\n\t\t\t\t\tthis.handler.oncomment$S(this.comment);\n\t\t\t\t}\n\t\t\t\tthis.comment = \"\";\n\t\t\t} else {\n\t\t\t\tthis.comment += \"-\" + c;\n\t\t\t\tthis.state = (_State.COMMENT | 0);\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.COMMENT_ENDED:\n\t\t\tif (c !== \">\") {\n\t\t\t\tthis.strictFail$S(\"Malformed comment\");\n\t\t\t\tthis.comment += \"--\" + c;\n\t\t\t\tthis.state = (_State.COMMENT | 0);\n\t\t\t} else {\n\t\t\t\tthis.state = (_State.TEXT | 0);\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.CDATA:\n\t\t\tif (c === \"]\") {\n\t\t\t\tthis.state = (_State.CDATA_ENDING | 0);\n\t\t\t} else {\n\t\t\t\tthis.cdata += c;\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.CDATA_ENDING:\n\t\t\tif (c === \"]\") {\n\t\t\t\tthis.state = (_State.CDATA_ENDING_2 | 0);\n\t\t\t} else {\n\t\t\t\tthis.cdata += \"]\" + c;\n\t\t\t\tthis.state = (_State.CDATA | 0);\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.CDATA_ENDING_2:\n\t\t\tif (c === \">\") {\n\t\t\t\tif (this.cdata) {\n\t\t\t\t\tthis.closetext_if_exist$();\n\t\t\t\t}\n\t\t\t\tthis.handler.oncdata$S(this.cdata);\n\t\t\t\tthis.handler.onclosecdata$();\n\t\t\t\tthis.cdata = \"\";\n\t\t\t\tthis.state = (_State.TEXT | 0);\n\t\t\t} else {\n\t\t\t\tif (c === \"]\") {\n\t\t\t\t\tthis.cdata += \"]\";\n\t\t\t\t} else {\n\t\t\t\t\tthis.cdata += \"]]\" + c;\n\t\t\t\t\tthis.state = (_State.CDATA | 0);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.PROC_INST:\n\t\t\tif (c === \"?\") {\n\t\t\t\tthis.state = (_State.PROC_INST_ENDING | 0);\n\t\t\t} else {\n\t\t\t\tif (_.is$HBS(_.whitespace, c)) {\n\t\t\t\t\tthis.state = (_State.PROC_INST_BODY | 0);\n\t\t\t\t} else {\n\t\t\t\t\tthis.procInstName += c;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.PROC_INST_BODY:\n\t\t\tif (! this.procInstBody && _.is$HBS(_.whitespace, c)) {\n\t\t\t\tcontinue;\n\t\t\t} else {\n\t\t\t\tif (c === \"?\") {\n\t\t\t\t\tthis.state = (_State.PROC_INST_ENDING | 0);\n\t\t\t\t} else {\n\t\t\t\t\tthis.procInstBody += c;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.PROC_INST_ENDING:\n\t\t\tif (c === \">\") {\n\t\t\t\tthis.closetext_if_exist$();\n\t\t\t\tthis.handler.onprocessinginstruction$SS(this.procInstName, this.procInstBody);\n\t\t\t\tthis.procInstName = this.procInstBody = \"\";\n\t\t\t\tthis.state = (_State.TEXT | 0);\n\t\t\t} else {\n\t\t\t\tthis.procInstBody += \"?\" + c;\n\t\t\t\tthis.state = (_State.PROC_INST_BODY | 0);\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.OPEN_TAG:\n\t\t\tif (_.is$LRegExp$S(_.nameBody, c)) {\n\t\t\t\tthis.tagName += c;\n\t\t\t} else {\n\t\t\t\tthis.newTag$();\n\t\t\t\tif (c === \">\") {\n\t\t\t\t\tthis.openTag$();\n\t\t\t\t} else {\n\t\t\t\t\tif (c === \"/\") {\n\t\t\t\t\t\tthis.state = (_State.OPEN_TAG_SLASH | 0);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (_.not$HBS(_.whitespace, c)) {\n\t\t\t\t\t\t\tthis.strictFail$S(\"Invalid character in tag name\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.state = (_State.ATTRIB | 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.OPEN_TAG_SLASH:\n\t\t\tif (c === \">\") {\n\t\t\t\tthis.openTag$B(true);\n\t\t\t\tthis.closeTag$();\n\t\t\t} else {\n\t\t\t\tthis.strictFail$S(\"Forward-slash in opening tag not followed by >\");\n\t\t\t\tthis.state = (_State.ATTRIB | 0);\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.ATTRIB:\n\t\t\tif (_.is$HBS(_.whitespace, c)) {\n\t\t\t\tcontinue;\n\t\t\t} else {\n\t\t\t\tif (c === \">\") {\n\t\t\t\t\tthis.openTag$();\n\t\t\t\t} else {\n\t\t\t\t\tif (c === \"/\") {\n\t\t\t\t\t\tthis.state = (_State.OPEN_TAG_SLASH | 0);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (_.is$LRegExp$S(_.nameStart, c)) {\n\t\t\t\t\t\t\tthis.attribName = c;\n\t\t\t\t\t\t\tthis.attribValue = \"\";\n\t\t\t\t\t\t\tthis.state = (_State.ATTRIB_NAME | 0);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.strictFail$S(\"Invalid attribute name\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.ATTRIB_NAME:\n\t\t\tif (c === \"=\") {\n\t\t\t\tthis.state = (_State.ATTRIB_VALUE | 0);\n\t\t\t} else {\n\t\t\t\tif (c === \">\") {\n\t\t\t\t\tthis.strictFail$S(\"Attribute without value\");\n\t\t\t\t\tthis.attribValue = this.attribName;\n\t\t\t\t\tthis.attrib$();\n\t\t\t\t\tthis.openTag$();\n\t\t\t\t} else {\n\t\t\t\t\tif (_.is$HBS(_.whitespace, c)) {\n\t\t\t\t\t\tthis.state = (_State.ATTRIB_NAME_SAW_WHITE | 0);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (_.is$LRegExp$S(_.nameBody, c)) {\n\t\t\t\t\t\t\tthis.attribName += c;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.strictFail$S(\"Invalid attribute name\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.ATTRIB_NAME_SAW_WHITE:\n\t\t\tif (c === \"=\") {\n\t\t\t\tthis.state = (_State.ATTRIB_VALUE | 0);\n\t\t\t} else {\n\t\t\t\tif (_.is$HBS(_.whitespace, c)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t} else {\n\t\t\t\t\tthis.strictFail$S(\"Attribute without value\");\n\t\t\t\t\tthis.tag.attributes[this.attribName] = \"\";\n\t\t\t\t\tthis.attribValue = \"\";\n\t\t\t\t\tthis.closetext_if_exist$();\n\t\t\t\t\tthis.handler.onattribute$SS(this.attribName, \"\");\n\t\t\t\t\tthis.attribName = \"\";\n\t\t\t\t\tif (c === \">\") {\n\t\t\t\t\t\tthis.openTag$();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (_.is$LRegExp$S(_.nameStart, c)) {\n\t\t\t\t\t\t\tthis.attribName = c;\n\t\t\t\t\t\t\tthis.state = (_State.ATTRIB_NAME | 0);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.strictFail$S(\"Invalid attribute name\");\n\t\t\t\t\t\t\tthis.state = (_State.ATTRIB | 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.ATTRIB_VALUE:\n\t\t\tif (_.is$HBS(_.whitespace, c)) {\n\t\t\t\tcontinue;\n\t\t\t} else {\n\t\t\t\tif (_.is$HBS(_.quote, c)) {\n\t\t\t\t\tthis.q = c;\n\t\t\t\t\tthis.state = (_State.ATTRIB_VALUE_QUOTED | 0);\n\t\t\t\t} else {\n\t\t\t\t\tthis.strictFail$S(\"Unquoted attribute value\");\n\t\t\t\t\tthis.state = (_State.ATTRIB_VALUE_UNQUOTED | 0);\n\t\t\t\t\tthis.attribValue = c;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.ATTRIB_VALUE_QUOTED:\n\t\t\tif (c !== this.q) {\n\t\t\t\tif (c === \"&\") {\n\t\t\t\t\tthis.state = (_State.ATTRIB_VALUE_ENTITY_Q | 0);\n\t\t\t\t} else {\n\t\t\t\t\tthis.attribValue += c;\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthis.attrib$();\n\t\t\tthis.q = \"\";\n\t\t\tthis.state = (_State.ATTRIB | 0);\n\t\t\tcontinue;\n\t\tcase _State.ATTRIB_VALUE_UNQUOTED:\n\t\t\tif (_.not$HBS(_.attribEnd, c)) {\n\t\t\t\tif (c === \"&\") {\n\t\t\t\t\tthis.state = (_State.ATTRIB_VALUE_ENTITY_U | 0);\n\t\t\t\t} else {\n\t\t\t\t\tthis.attribValue += c;\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthis.attrib$();\n\t\t\tif (c === \">\") {\n\t\t\t\tthis.openTag$();\n\t\t\t} else {\n\t\t\t\tthis.state = (_State.ATTRIB | 0);\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.CLOSE_TAG:\n\t\t\tif (! this.tagName) {\n\t\t\t\tif (_.is$HBS(_.whitespace, c)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t} else {\n\t\t\t\t\tif (_.not$LRegExp$S(_.nameStart, c)) {\n\t\t\t\t\t\tif (this.script) {\n\t\t\t\t\t\t\tthis.script += \"</\" + c;\n\t\t\t\t\t\t\tthis.state = (_State.SCRIPT | 0);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.strictFail$S(\"Invalid tagname in closing tag.\");\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.tagName = c;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (c === \">\") {\n\t\t\t\t\tthis.closeTag$();\n\t\t\t\t} else {\n\t\t\t\t\tif (_.is$LRegExp$S(_.nameBody, c)) {\n\t\t\t\t\t\tthis.tagName += c;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (this.script) {\n\t\t\t\t\t\t\tthis.script += \"</\" + this.tagName;\n\t\t\t\t\t\t\tthis.tagName = \"\";\n\t\t\t\t\t\t\tthis.state = (_State.SCRIPT | 0);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (_.not$HBS(_.whitespace, c)) {\n\t\t\t\t\t\t\t\tthis.strictFail$S(\"Invalid tagname in closing tag\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.state = (_State.CLOSE_TAG_SAW_WHITE | 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.CLOSE_TAG_SAW_WHITE:\n\t\t\tif (_.is$HBS(_.whitespace, c)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (c === \">\") {\n\t\t\t\tthis.closeTag$();\n\t\t\t} else {\n\t\t\t\tthis.strictFail$S(\"Invalid characters in closing tag\");\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.TEXT_ENTITY:\n\t\t\tif (c === \";\") {\n\t\t\t\tthis.textNode += this.parseEntity$();\n\t\t\t\tthis.entity = \"\";\n\t\t\t\tthis.state = (_State.TEXT | 0);\n\t\t\t} else {\n\t\t\t\tif (_.is$HBS(_.entity, c)) {\n\t\t\t\t\tthis.entity += c;\n\t\t\t\t} else {\n\t\t\t\t\tthis.strictFail$S(\"Invalid character entity\");\n\t\t\t\t\tthis.textNode += \"&\" + this.entity + c;\n\t\t\t\t\tthis.entity = \"\";\n\t\t\t\t\tthis.state = (_State.TEXT | 0);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.ATTRIB_VALUE_ENTITY_Q:\n\t\tcase _State.ATTRIB_VALUE_ENTITY_U:\n\t\t\tif (this.state === _State.ATTRIB_VALUE_ENTITY_Q) {\n\t\t\t\treturnState = _State.ATTRIB_VALUE_QUOTED;\n\t\t\t} else {\n\t\t\t\treturnState = _State.ATTRIB_VALUE_UNQUOTED;\n\t\t\t}\n\t\t\tif (c === \";\") {\n\t\t\t\tthis.attribValue += this.parseEntity$();\n\t\t\t\tthis.entity = \"\";\n\t\t\t\tthis.state = (returnState | 0);\n\t\t\t} else {\n\t\t\t\tif (_.is$HBS(_.entity, c)) {\n\t\t\t\t\tthis.entity += c;\n\t\t\t\t} else {\n\t\t\t\t\tthis.strictFail$S(\"Invalid character entity\");\n\t\t\t\t\tthis.attribValue += \"&\" + this.entity + c;\n\t\t\t\t\tthis.entity = \"\";\n\t\t\t\t\tthis.state = (returnState | 0);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcontinue;\n\t\tdefault:\n\t\t\tthrow new Error(\"Unknown state: \" + (this.state + \"\"));\n\t\t}\n\t}\n\tthis.end$();\n\treturn this;\n};\n\n/**\n */\nSAXParser.prototype.clearBuffers$ = function () {\n\tthis.comment = '';\n\tthis.sgmlDecl = '';\n\tthis.textNode = '';\n\tthis.tagName = '';\n\tthis.doctype = '';\n\tthis.procInstName = '';\n\tthis.procInstBody = '';\n\tthis.entity = '';\n\tthis.attribName = '';\n\tthis.attribValue = '';\n\tthis.cdata = '';\n\tthis.script = '';\n};\n\n/**\n */\nSAXParser.prototype.closetext_if_exist$ = function () {\n\tif (this.textNode !== '') {\n\t\tthis.closetext$();\n\t}\n};\n\n/**\n */\nSAXParser.prototype.closetext$ = function () {\n\t/** @type {!string} */\n\tvar text;\n\tif (this.preTags === 0) {\n\t\ttext = this.textopts$S(this.textNode);\n\t\tif (text) {\n\t\t\tthis.handler.ontext$S(text);\n\t\t}\n\t} else {\n\t\tif (this.textNode) {\n\t\t\tthis.handler.ontext$S(this.textNode);\n\t\t}\n\t}\n\tthis.textNode = \"\";\n};\n\n/**\n * @param {!string} text\n * @return {!string}\n */\nSAXParser.prototype.textopts$S = function (text) {\n\ttext = text.replace(/[\\n\\t]/g, ' ');\n\ttext = text.replace(/\\s\\s+/g, \" \");\n\treturn text;\n};\n\n/**\n * @param {!string} er\n * @return {SAXParser}\n */\nSAXParser.prototype.emiterror$S = function (er) {\n\t/** @type {Error} */\n\tvar error;\n\tthis.closetext$();\n\ter += \"\\nLine: \" + (this.line + \"\") + \"\\nColumn: \" + (this.column + \"\") + \"\\nChar: \" + this.c;\n\terror = new Error(er);\n\tthis.error = error;\n\tthis.handler.onerror$LError$(error);\n\treturn this;\n};\n\n/**\n */\nSAXParser.prototype.end$ = function () {\n\tif (! this.closedRoot) {\n\t\tthis.strictFail$S(\"Unclosed root tag\");\n\t}\n\tif (this.state !== _State.TEXT) {\n\t\tthis.emiterror$S(\"Unexpected end\");\n\t}\n\tthis.closetext$();\n\tthis.c = \"\";\n\tthis.closed = true;\n\tthis.handler.onend$();\n};\n\n/**\n * @param {!string} message\n */\nSAXParser.prototype.strictFail$S = function (message) {\n\tif (this.strict) {\n\t\tthis.emiterror$S(message);\n\t}\n};\n\n/**\n */\nSAXParser.prototype.newTag$ = function () {\n\t/** @type {!boolean} */\n\tvar parent;\n\t/** @type {Tag} */\n\tvar tag;\n\tif (! this.strict) {\n\t\tthis.tagName = this.tagName.toLowerCase();\n\t}\n\tparent = !! (this.tags[this.tags.length - 1] || this);\n\ttag = this.tag = new Tag$S(this.tagName);\n\tthis.attribList.length = 0;\n};\n\n/**\n */\nSAXParser.prototype.attrib$ = function () {\n\tif (! this.strict) {\n\t\tthis.attribName = this.attribName.toLowerCase();\n\t}\n\tif ($__jsx_ObjectHasOwnProperty.call(this.tag.attributes, this.attribName)) {\n\t\tthis.attribName = this.attribValue = \"\";\n\t\treturn;\n\t}\n\tthis.tag.attributes[this.attribName] = this.attribValue;\n\tthis.closetext_if_exist$();\n\tthis.handler.onattribute$SS(this.attribName, this.attribValue);\n\tthis.attribName = this.attribValue = \"\";\n};\n\n/**\n */\nSAXParser.prototype.openTag$ = function () {\n\tthis.openTag$B(false);\n};\n\n/**\n * @param {!boolean} selfClosing\n */\nSAXParser.prototype.openTag$B = function (selfClosing) {\n\tthis.tag.isSelfClosing = selfClosing;\n\tthis.sawRoot = true;\n\tthis.tags.push(this.tag);\n\tthis.closetext_if_exist$();\n\tthis.handler.onopentag$SHS(this.tag.name, this.tag.attributes);\n\tif (this.tag.name === 'pre') {\n\t\tthis.preTags++;\n\t}\n\tif (! selfClosing) {\n\t\tif (! this.noscript && this.tagName.toLowerCase() === \"script\") {\n\t\t\tthis.state = (_State.SCRIPT | 0);\n\t\t} else {\n\t\t\tthis.state = (_State.TEXT | 0);\n\t\t}\n\t\tthis.tag = null;\n\t\tthis.tagName = \"\";\n\t}\n\tthis.attribName = this.attribValue = \"\";\n\tthis.attribList.length = 0;\n};\n\n/**\n */\nSAXParser.prototype.closeTag$ = function () {\n\t/** @type {!number} */\n\tvar t;\n\t/** @type {!string} */\n\tvar tagName;\n\t/** @type {!string} */\n\tvar closeTo;\n\t/** @type {Tag} */\n\tvar close;\n\t/** @type {!number} */\n\tvar s;\n\t/** @type {Tag} */\n\tvar tag;\n\t/** @type {Tag} */\n\tvar parent;\n\tif (! this.tagName) {\n\t\tthis.strictFail$S(\"Weird empty close tag.\");\n\t\tthis.textNode += \"</>\";\n\t\tthis.state = (_State.TEXT | 0);\n\t\treturn;\n\t}\n\tif (this.script) {\n\t\tif (this.tagName !== \"script\") {\n\t\t\tthis.script += \"</\" + this.tagName + \">\";\n\t\t\tthis.tagName = \"\";\n\t\t\tthis.state = (_State.SCRIPT | 0);\n\t\t\treturn;\n\t\t}\n\t\tthis.closetext_if_exist$();\n\t\tthis.handler.onscript$S(this.script);\n\t\tthis.script = \"\";\n\t}\n\tt = this.tags.length;\n\ttagName = this.tagName;\n\tif (! this.strict) {\n\t\ttagName = tagName.toLowerCase();\n\t}\n\tcloseTo = tagName;\n\twhile (t--) {\n\t\tclose = this.tags[t];\n\t\tif (close.name !== closeTo) {\n\t\t\tthis.strictFail$S(\"Unexpected close tag\");\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (t < 0) {\n\t\tthis.strictFail$S(\"Unmatched closing tag: \" + this.tagName);\n\t\tthis.textNode += \"</\" + this.tagName + \">\";\n\t\tthis.state = (_State.TEXT | 0);\n\t\treturn;\n\t}\n\tthis.tagName = tagName;\n\ts = this.tags.length;\n\twhile (s-- > t) {\n\t\ttag = this.tag = this.tags.pop();\n\t\tthis.tagName = this.tag.name;\n\t\tthis.closetext_if_exist$();\n\t\tthis.handler.onclosetag$S(this.tagName);\n\t\tparent = this.tags[this.tags.length - 1];\n\t\tif (this.tagName === 'pre') {\n\t\t\tthis.preTags--;\n\t\t}\n\t}\n\tif (t === 0) {\n\t\tthis.closedRoot = true;\n\t}\n\tthis.tagName = this.attribValue = this.attribName = \"\";\n\tthis.attribList.length = 0;\n\tthis.state = (_State.TEXT | 0);\n};\n\n/**\n * @return {!string}\n */\nSAXParser.prototype.parseEntity$ = function () {\n\t/** @type {!string} */\n\tvar entity;\n\t/** @type {!string} */\n\tvar entityLC;\n\t/** @type {!number} */\n\tvar num;\n\t/** @type {!string} */\n\tvar numStr;\n\tentity = this.entity;\n\tentityLC = entity.toLowerCase();\n\tnum = 0;\n\tnumStr = \"\";\n\tif (this.ENTITIES[entity]) {\n\t\treturn (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/sax.jsx:977:32] null access\\n            return this.ENTITIES[entity];\\n                                ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(this.ENTITIES[entity]));\n\t}\n\tif (this.ENTITIES[entityLC]) {\n\t\treturn (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/sax.jsx:981:32] null access\\n            return this.ENTITIES[entityLC];\\n                                ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(this.ENTITIES[entityLC]));\n\t}\n\tentity = entityLC;\n\tif (entity.charAt(0) === \"#\") {\n\t\tif (entity.charAt(1) === \"x\") {\n\t\t\tentity = entity.slice(2);\n\t\t\tnum = $__jsx_parseInt(entity, 16);\n\t\t\tnumStr = num.toString(16);\n\t\t} else {\n\t\t\tentity = entity.slice(1);\n\t\t\tnum = $__jsx_parseInt(entity, 10);\n\t\t\tnumStr = num.toString(10);\n\t\t}\n\t}\n\tentity = entity.replace(/^0+/, \"\");\n\tif (numStr.toLowerCase() !== entity) {\n\t\tthis.strictFail$S(\"Invalid character entity\");\n\t\treturn \"&\" + this.entity + \";\";\n\t}\n\treturn String.fromCharCode(num);\n};\n\n/**\n * class Char extends Object\n * @constructor\n */\nfunction Char() {\n}\n\n/**\n * @constructor\n */\nfunction Char$() {\n\t/** @type {!string} */\n\tvar whitespace;\n\t/** @type {!string} */\n\tvar number;\n\t/** @type {!string} */\n\tvar letter;\n\t/** @type {!string} */\n\tvar quote;\n\t/** @type {!string} */\n\tvar entity;\n\t/** @type {!string} */\n\tvar attribEnd;\n\twhitespace = \"\\r\\n\\t \";\n\tnumber = \"0124356789\";\n\tletter = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\tquote = \"'\\\"\";\n\tentity = number + letter + \"#\";\n\tattribEnd = whitespace + \">\";\n\tthis.CDATA = \"[CDATA[\";\n\tthis.DOCTYPE = \"DOCTYPE\";\n\tthis.XML_NAMESPACE = \"http://www.w3.org/XML/1998/namespace\";\n\tthis.whitespace = this._charClass$S(whitespace);\n\tthis.number = this._charClass$S(number);\n\tthis.letter = this._charClass$S(letter);\n\tthis.quote = this._charClass$S(quote);\n\tthis.entity = this._charClass$S(entity);\n\tthis.attribEnd = this._charClass$S(attribEnd);\n\tthis.nameStart = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/;\n\tthis.nameBody = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040\\.\\d-]/;\n};\n\nChar$.prototype = new Char;\n\n/**\n * @param {!string} str\n * @return {Object.<string, undefined|!boolean>}\n */\nChar.prototype._charClass$S = function (str) {\n\t/** @type {Object.<string, undefined|!boolean>} */\n\tvar result;\n\t/** @type {!number} */\n\tvar i;\n\tresult = ({  });\n\tfor (i = 0; i < str.length; i++) {\n\t\tresult[str.slice(i, i + 1)] = true;\n\t}\n\treturn result;\n};\n\n/**\n * @param {RegExp} charclass\n * @param {!string} c\n * @return {!boolean}\n */\nChar.prototype.is$LRegExp$S = function (charclass, c) {\n\treturn charclass.test(c);\n};\n\n/**\n * @param {Object.<string, undefined|!boolean>} charclass\n * @param {!string} c\n * @return {!boolean}\n */\nChar.prototype.is$HBS = function (charclass, c) {\n\treturn $__jsx_ObjectHasOwnProperty.call(charclass, c);\n};\n\n/**\n * @param {RegExp} charclass\n * @param {!string} c\n * @return {!boolean}\n */\nChar.prototype.not$LRegExp$S = function (charclass, c) {\n\treturn ! this.is$LRegExp$S(charclass, c);\n};\n\n/**\n * @param {Object.<string, undefined|!boolean>} charclass\n * @param {!string} c\n * @return {!boolean}\n */\nChar.prototype.not$HBS = function (charclass, c) {\n\treturn ! this.is$HBS(charclass, c);\n};\n\n/**\n * class _Entities extends Object\n * @constructor\n */\nfunction _Entities() {\n}\n\n/**\n * @constructor\n */\nfunction _Entities$() {\n};\n\n_Entities$.prototype = new _Entities;\n\n/**\n * @return {Object.<string, undefined|!string>}\n */\n_Entities.entity_list$ = function () {\n\t/** @type {Object.<string, undefined|!string>} */\n\tvar result;\n\t/** @type {!string} */\n\tvar key;\n\t/** @type {*} */\n\tvar value;\n\tresult = ({  });\n\tfor (key in _Entities._entities) {\n\t\tvalue = _Entities._entities[key];\n\t\tif (typeof value === 'string') {\n\t\t\tresult[key] = value + \"\";\n\t\t} else {\n\t\t\tif (typeof value === 'number') {\n\t\t\t\tresult[key] = String.fromCharCode(value | 0);\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n};\n\nvar _Entities$entity_list$ = _Entities.entity_list$;\n\n/**\n * class BitVector extends Object\n * @constructor\n */\nfunction BitVector() {\n}\n\n/**\n * @constructor\n */\nfunction BitVector$() {\n\tthis._size = 0;\n\tthis._size1 = 0;\n\tthis._r = [  ];\n\tthis._v = [  ];\n\tthis.clear$();\n};\n\nBitVector$.prototype = new BitVector;\n\n/**\n */\nBitVector.prototype.build$ = function () {\n\t/** @type {!number} */\n\tvar i;\n\tthis._size1 = 0;\n\tfor (i = 0; i < this._v.length; i++) {\n\t\tif (i % BitVector.BLOCK_RATE === 0) {\n\t\t\tthis._r.push(this.size$B(true));\n\t\t}\n\t\tthis._size1 += this._rank32$IIB((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/bit-vector.jsx:37:47] null access\\n            this._size1 += this._rank32(this._v[i], BitVector.SMALL_BLOCK_SIZE, true);\\n                                               ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(this._v[i])), BitVector.SMALL_BLOCK_SIZE, true);\n\t}\n};\n\n/**\n */\nBitVector.prototype.clear$ = function () {\n\tthis._v.length = 0;\n\tthis._r.length = 0;\n\tthis._size = 0;\n\tthis._size1 = 0;\n};\n\n/**\n * @return {!number}\n */\nBitVector.prototype.size$ = function () {\n\treturn this._size;\n};\n\n/**\n * @param {!boolean} b\n * @return {!number}\n */\nBitVector.prototype.size$B = function (b) {\n\treturn (b ? this._size1 : this._size - this._size1);\n};\n\n/**\n * @param {!number} value\n */\nBitVector.prototype.set$I = function (value) {\n\tthis.set$IB(value, true);\n};\n\n/**\n * @param {!number} value\n * @param {!boolean} flag\n */\nBitVector.prototype.set$IB = function (value, flag) {\n\t/** @type {!number} */\n\tvar q;\n\t/** @type {!number} */\n\tvar r;\n\t/** @type {!number} */\n\tvar m;\n\tif (value >= this.size$()) {\n\t\tthis._size = (value + 1 | 0);\n\t}\n\tq = (value / BitVector.SMALL_BLOCK_SIZE | 0);\n\tr = (value % BitVector.SMALL_BLOCK_SIZE | 0);\n\twhile (q >= this._v.length) {\n\t\tthis._v.push(0);\n\t}\n\tm = 0x1 << r;\n\tif (flag) {\n\t\tthis._v[q] |= m;\n\t} else {\n\t\tthis._v[q] &= ~ m;\n\t}\n};\n\n/**\n * @param {!number} value\n * @return {!boolean}\n */\nBitVector.prototype.get$I = function (value) {\n\t/** @type {!number} */\n\tvar q;\n\t/** @type {!number} */\n\tvar r;\n\t/** @type {!number} */\n\tvar m;\n\tif (value >= this.size$()) {\n\t\tthrow new Error(\"BitVector.get() : range error\");\n\t}\n\tq = (value / BitVector.SMALL_BLOCK_SIZE | 0);\n\tr = (value % BitVector.SMALL_BLOCK_SIZE | 0);\n\tm = 0x1 << r;\n\treturn !! ((function (v) {\n\t\tif (! (v != null)) {\n\t\t\tdebugger;\n\t\t\tthrow new Error(\"[src/bit-vector.jsx:96:23] null access\\n        return (this._v[q] & m) as boolean;\\n                       ^\\n\");\n\t\t}\n\t\treturn v;\n\t}(this._v[q])) & m);\n};\n\n/**\n * @param {!number} i\n * @return {!number}\n */\nBitVector.prototype.rank$I = function (i) {\n\treturn this.rank$IB(i, true);\n};\n\n/**\n * @param {!number} i\n * @param {!boolean} b\n * @return {!number}\n */\nBitVector.prototype.rank$IB = function (i, b) {\n\t/** @type {!number} */\n\tvar q_large;\n\t/** @type {!number} */\n\tvar q_small;\n\t/** @type {!number} */\n\tvar r;\n\t/** @type {!number} */\n\tvar rank;\n\t/** @type {!number} */\n\tvar begin;\n\t/** @type {!number} */\n\tvar j;\n\tif (i > this.size$()) {\n\t\tthrow new Error(\"BitVector.rank() : range error\");\n\t}\n\tif (i === 0) {\n\t\treturn 0;\n\t}\n\ti--;\n\tq_large = (Math.floor(i / BitVector.LARGE_BLOCK_SIZE) | 0);\n\tq_small = (Math.floor(i / BitVector.SMALL_BLOCK_SIZE) | 0);\n\tr = (Math.floor(i % BitVector.SMALL_BLOCK_SIZE) | 0);\n\trank = ((function (v) {\n\t\tif (! (v != null)) {\n\t\t\tdebugger;\n\t\t\tthrow new Error(\"[src/bit-vector.jsx:118:32] null access\\n        var rank : int = this._r[q_large];\\n                                ^\\n\");\n\t\t}\n\t\treturn v;\n\t}(this._r[q_large])) | 0);\n\tif (! b) {\n\t\trank = q_large * BitVector.LARGE_BLOCK_SIZE - rank;\n\t}\n\tbegin = q_large * BitVector.BLOCK_RATE;\n\tfor (j = begin; j < q_small; j++) {\n\t\trank += this._rank32$IIB((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/bit-vector.jsx:126:40] null access\\n            rank += this._rank32(this._v[j], BitVector.SMALL_BLOCK_SIZE, b);\\n                                        ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(this._v[j])), BitVector.SMALL_BLOCK_SIZE, b);\n\t}\n\trank += this._rank32$IIB((function (v) {\n\t\tif (! (v != null)) {\n\t\t\tdebugger;\n\t\t\tthrow new Error(\"[src/bit-vector.jsx:128:36] null access\\n        rank += this._rank32(this._v[q_small], r + 1, b);\\n                                    ^\\n\");\n\t\t}\n\t\treturn v;\n\t}(this._v[q_small])), r + 1, b);\n\treturn rank;\n};\n\n/**\n * @param {!number} i\n * @return {!number}\n */\nBitVector.prototype.select$I = function (i) {\n\treturn this.select$IB(i, true);\n};\n\n/**\n * @param {!number} i\n * @param {!boolean} b\n * @return {!number}\n */\nBitVector.prototype.select$IB = function (i, b) {\n\t/** @type {!number} */\n\tvar left;\n\t/** @type {!number} */\n\tvar right;\n\t/** @type {!number} */\n\tvar pivot;\n\t/** @type {undefined|!number} */\n\tvar rank;\n\t/** @type {!number} */\n\tvar j;\n\tif (i >= this.size$B(b)) {\n\t\tthrow new Error(\"BitVector.select() : range error\");\n\t}\n\tleft = 0;\n\tright = this._r.length;\n\twhile (left < right) {\n\t\tpivot = Math.floor((left + right) / 2);\n\t\trank = this._r[pivot];\n\t\tif (! b) {\n\t\t\trank = pivot * BitVector.LARGE_BLOCK_SIZE - (function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/bit-vector.jsx:152:60] null access\\n                rank = pivot * BitVector.LARGE_BLOCK_SIZE - rank;\\n                                                            ^^^^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(rank));\n\t\t}\n\t\tif (i < (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/bit-vector.jsx:154:20] null access\\n            if (i < rank)\\n                    ^^^^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(rank))) {\n\t\t\tright = pivot;\n\t\t} else {\n\t\t\tleft = pivot + 1;\n\t\t}\n\t}\n\tright--;\n\tif (b) {\n\t\ti -= ((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/bit-vector.jsx:167:24] null access\\n            i -= this._r[right];\\n                        ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(this._r[right])) | 0);\n\t} else {\n\t\ti -= (right * BitVector.LARGE_BLOCK_SIZE - (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/bit-vector.jsx:171:61] null access\\n            i -= right * BitVector.LARGE_BLOCK_SIZE - this._r[right];\\n                                                             ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(this._r[right])) | 0);\n\t}\n\tj = right * BitVector.BLOCK_RATE;\n\twhile (1) {\n\t\trank = this._rank32$IIB((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/bit-vector.jsx:176:43] null access\\n            var rank = this._rank32(this._v[j], BitVector.SMALL_BLOCK_SIZE, b);\\n                                           ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(this._v[j])), BitVector.SMALL_BLOCK_SIZE, b);\n\t\tif (i < (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/bit-vector.jsx:177:20] null access\\n            if (i < rank)\\n                    ^^^^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(rank))) {\n\t\t\tbreak;\n\t\t}\n\t\tj++;\n\t\ti -= ((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/bit-vector.jsx:182:17] null access\\n            i -= rank;\\n                 ^^^^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(rank)) | 0);\n\t}\n\treturn (j * BitVector.SMALL_BLOCK_SIZE + this._select32$IIB((function (v) {\n\t\tif (! (v != null)) {\n\t\t\tdebugger;\n\t\t\tthrow new Error(\"[src/bit-vector.jsx:184:70] null access\\n        return j * BitVector.SMALL_BLOCK_SIZE + this._select32(this._v[j], i, b);\\n                                                                      ^\\n\");\n\t\t}\n\t\treturn v;\n\t}(this._v[j])), i, b) | 0);\n};\n\n/**\n * @param {!number} x\n * @param {!number} i\n * @param {!boolean} b\n * @return {!number}\n */\nBitVector.prototype._rank32$IIB = function (x, i, b) {\n\tif (! b) {\n\t\tx = ~ x;\n\t}\n\tx <<= BitVector.SMALL_BLOCK_SIZE - i;\n\tx = ((x & 0xaaaaaaaa) >>> 1) + (x & 0x55555555);\n\tx = ((x & 0xcccccccc) >>> 2) + (x & 0x33333333);\n\tx = ((x & 0xf0f0f0f0) >>> 4) + (x & 0x0f0f0f0f);\n\tx = ((x & 0xff00ff00) >>> 8) + (x & 0x00ff00ff);\n\tx = ((x & 0xffff0000) >>> 16) + (x & 0x0000ffff);\n\treturn x;\n};\n\n/**\n * @param {!number} x\n * @param {!number} i\n * @param {!boolean} b\n * @return {!number}\n */\nBitVector.prototype._select32$IIB = function (x, i, b) {\n\t/** @type {!number} */\n\tvar x1;\n\t/** @type {!number} */\n\tvar x2;\n\t/** @type {!number} */\n\tvar x3;\n\t/** @type {!number} */\n\tvar x4;\n\t/** @type {!number} */\n\tvar x5;\n\t/** @type {!number} */\n\tvar pos;\n\t/** @type {!number} */\n\tvar v5;\n\t/** @type {!number} */\n\tvar v4;\n\t/** @type {!number} */\n\tvar v3;\n\t/** @type {!number} */\n\tvar v2;\n\t/** @type {!number} */\n\tvar v1;\n\t/** @type {!number} */\n\tvar v0;\n\tif (! b) {\n\t\tx = ~ x;\n\t}\n\tx1 = ((x & 0xaaaaaaaa) >>> 1) + (x & 0x55555555);\n\tx2 = ((x1 & 0xcccccccc) >>> 2) + (x1 & 0x33333333);\n\tx3 = ((x2 & 0xf0f0f0f0) >>> 4) + (x2 & 0x0f0f0f0f);\n\tx4 = ((x3 & 0xff00ff00) >>> 8) + (x3 & 0x00ff00ff);\n\tx5 = ((x4 & 0xffff0000) >>> 16) + (x4 & 0x0000ffff);\n\ti++;\n\tpos = 0;\n\tv5 = x5 & 0xffffffff;\n\tif (i > v5) {\n\t\ti -= (v5 | 0);\n\t\tpos += 32;\n\t}\n\tv4 = x4 >>> pos & 0x0000ffff;\n\tif (i > v4) {\n\t\ti -= (v4 | 0);\n\t\tpos += 16;\n\t}\n\tv3 = x3 >>> pos & 0x000000ff;\n\tif (i > v3) {\n\t\ti -= (v3 | 0);\n\t\tpos += 8;\n\t}\n\tv2 = x2 >>> pos & 0x0000000f;\n\tif (i > v2) {\n\t\ti -= (v2 | 0);\n\t\tpos += 4;\n\t}\n\tv1 = x1 >>> pos & 0x00000003;\n\tif (i > v1) {\n\t\ti -= (v1 | 0);\n\t\tpos += 2;\n\t}\n\tv0 = x >>> pos & 0x00000001;\n\tif (i > v0) {\n\t\ti -= (v0 | 0);\n\t\tpos += 1;\n\t}\n\treturn (pos | 0);\n};\n\n/**\n * @return {!string}\n */\nBitVector.prototype.dump$ = function () {\n\t/** @type {Array.<undefined|!string>} */\n\tvar contents;\n\tcontents = [  ];\n\tcontents.push(Binary$dump32bitNumber$N(this._size));\n\tcontents.push(Binary$dump32bitNumberList$AN(this._v));\n\treturn contents.join('');\n};\n\n/**\n * @param {CompressionReport} report\n * @return {!string}\n */\nBitVector.prototype.dump$LCompressionReport$ = function (report) {\n\t/** @type {Array.<undefined|!string>} */\n\tvar contents;\n\tcontents = [  ];\n\tcontents.push(Binary$dump32bitNumber$N(this._size));\n\treport.add$II(2, 2);\n\tcontents.push(Binary$dump32bitNumberList$ANLCompressionReport$(this._v, report));\n\treturn contents.join('');\n};\n\n/**\n * @param {!string} data\n * @return {!number}\n */\nBitVector.prototype.load$S = function (data) {\n\treturn this.load$SI(data, 0);\n};\n\n/**\n * @param {!string} data\n * @param {!number} offset\n * @return {!number}\n */\nBitVector.prototype.load$SI = function (data, offset) {\n\t/** @type {LoadedNumberListResult} */\n\tvar result;\n\tthis.clear$();\n\tthis._size = (Binary$load32bitNumber$SI(data, offset) | 0);\n\tresult = Binary$load32bitNumberList$SI(data, offset + 2);\n\tthis._v = result.result;\n\tthis.build$();\n\treturn result.offset;\n};\n\n/**\n * class WaveletMatrix extends Object\n * @constructor\n */\nfunction WaveletMatrix() {\n}\n\n/**\n * @constructor\n */\nfunction WaveletMatrix$() {\n\tthis._size = 0;\n\tthis._range = ({  });\n\tthis._bv = [  ];\n\tthis._seps = [  ];\n\tthis._bitsize = 16;\n\tthis.clear$();\n};\n\nWaveletMatrix$.prototype = new WaveletMatrix;\n\n/**\n * @return {!number}\n */\nWaveletMatrix.prototype.bitsize$ = function () {\n\treturn this._bitsize;\n};\n\n/**\n * @param {!number} charCode\n */\nWaveletMatrix.prototype.setMaxCharCode$I = function (charCode) {\n\tthis._bitsize = (Math.ceil(Math.log(charCode) / Math.LN2) | 0);\n};\n\n/**\n */\nWaveletMatrix.prototype.clear$ = function () {\n\tthis._bv.length = 0;\n\tthis._seps.length = 0;\n\tthis._size = 0;\n};\n\n/**\n * @param {!string} v\n */\nWaveletMatrix.prototype.build$S = function (v) {\n\t/** @type {!number} */\n\tvar size;\n\t/** @type {!number} */\n\tvar bitsize;\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {!number} */\n\tvar depth;\n\t/** @type {Object.<string, undefined|!number>} */\n\tvar range_tmp;\n\t/** @type {!number} */\n\tvar code;\n\t/** @type {!boolean} */\n\tvar bit;\n\t/** @type {!number} */\n\tvar key;\n\t/** @type {Object.<string, undefined|!number>} */\n\tvar range_rev;\n\t/** @type {!string} */\n\tvar range_key;\n\t/** @type {!number} */\n\tvar value;\n\t/** @type {!number} */\n\tvar pos0;\n\t/** @type {undefined|!number} */\n\tvar pos1;\n\t/** @type {!string} */\n\tvar range_rev_key;\n\t/** @type {!number} */\n\tvar begin;\n\t/** @type {undefined|!number} */\n\tvar end;\n\t/** @type {!number} */\n\tvar num0;\n\t/** @type {!number} */\n\tvar num1;\n\tthis.clear$();\n\tsize = v.length;\n\tbitsize = this.bitsize$();\n\tfor (i = 0; i < bitsize; i++) {\n\t\tthis._bv.push(new BitVector$());\n\t\tthis._seps.push(0);\n\t}\n\tthis._size = (size | 0);\n\tfor (i = 0; i < size; i++) {\n\t\tthis._bv[0].set$IB(i, this._uint2bit$II(v.charCodeAt(i), 0));\n\t}\n\tthis._bv[0].build$();\n\tthis._seps[0] = this._bv[0].size$B(false);\n\tthis._range[0 + \"\"] = 0;\n\tthis._range[1 + \"\"] = this._seps[0];\n\tdepth = 1;\n\twhile (depth < bitsize) {\n\t\trange_tmp = WaveletMatrix$_shallow_copy$HI(this._range);\n\t\tfor (i = 0; i < size; i++) {\n\t\t\tcode = v.charCodeAt(i);\n\t\t\tbit = this._uint2bit$II(code, depth);\n\t\t\tkey = code >>> bitsize - depth;\n\t\t\tthis._bv[depth].set$IB((function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/wavelet-matrix.jsx:76:45] null access\\n                this._bv[depth].set(range_tmp[key as string], bit);\\n                                             ^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(range_tmp[key + \"\"])), bit);\n\t\t\trange_tmp[key + \"\"]++;\n\t\t}\n\t\tthis._bv[depth].build$();\n\t\tthis._seps[depth] = this._bv[depth].size$B(false);\n\t\trange_rev = ({  });\n\t\tfor (range_key in this._range) {\n\t\t\tvalue = (function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/wavelet-matrix.jsx:85:45] null access\\n                var value : int = this._range[range_key];\\n                                             ^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(this._range[range_key]));\n\t\t\tif (value != range_tmp[range_key]) {\n\t\t\t\trange_rev[value + \"\"] = range_key | 0;\n\t\t\t}\n\t\t}\n\t\tthis._range = ({  });\n\t\tpos0 = 0;\n\t\tpos1 = this._seps[depth];\n\t\tfor (range_rev_key in range_rev) {\n\t\t\tbegin = range_rev_key | 0;\n\t\t\tvalue = (function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/wavelet-matrix.jsx:97:37] null access\\n                var value = range_rev[range_rev_key];\\n                                     ^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(range_rev[range_rev_key]));\n\t\t\tend = range_tmp[value + \"\"];\n\t\t\tnum0 = this._bv[depth].rank$IB((function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/wavelet-matrix.jsx:99:49] null access\\n                var num0  = this._bv[depth].rank(end  , false) -\\n                                                 ^^^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(end)), false) - this._bv[depth].rank$IB(begin, false);\n\t\t\tnum1 = (function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/wavelet-matrix.jsx:101:28] null access\\n                var num1  = end - begin - num0;\\n                            ^^^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(end)) - begin - num0;\n\t\t\tif (num0 > 0) {\n\t\t\t\tthis._range[(value << 1) + \"\"] = (pos0 | 0);\n\t\t\t\tpos0 += num0;\n\t\t\t}\n\t\t\tif (num1 > 0) {\n\t\t\t\tthis._range[(value << 1) + 1 + \"\"] = pos1;\n\t\t\t\tpos1 += (num1 | 0);\n\t\t\t}\n\t\t}\n\t\tdepth++;\n\t}\n};\n\n/**\n * @return {!number}\n */\nWaveletMatrix.prototype.size$ = function () {\n\treturn this._size;\n};\n\n/**\n * @param {!number} c\n * @return {!number}\n */\nWaveletMatrix.prototype.size$I = function (c) {\n\treturn this.rank$II(this.size$(), c);\n};\n\n/**\n * @param {!number} i\n * @return {!number}\n */\nWaveletMatrix.prototype.get$I = function (i) {\n\t/** @type {!number} */\n\tvar value;\n\t/** @type {!number} */\n\tvar depth;\n\t/** @type {!boolean} */\n\tvar bit;\n\tif (i >= this.size$()) {\n\t\tthrow new Error(\"WaveletMatrix.get() : range error\");\n\t}\n\tvalue = 0;\n\tdepth = 0;\n\twhile (depth < this.bitsize$()) {\n\t\tbit = this._bv[depth].get$I(i);\n\t\ti = this._bv[depth].rank$IB(i, bit);\n\t\tvalue <<= 1;\n\t\tif (bit) {\n\t\t\ti += (function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/wavelet-matrix.jsx:142:31] null access\\n                i += this._seps[depth];\\n                               ^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(this._seps[depth]));\n\t\t\tvalue += 1;\n\t\t}\n\t\tdepth++;\n\t}\n\treturn (value | 0);\n};\n\n/**\n * @param {!number} i\n * @param {!number} c\n * @return {!number}\n */\nWaveletMatrix.prototype.rank$II = function (i, c) {\n\t/** @type {undefined|!number} */\n\tvar begin;\n\t/** @type {!number} */\n\tvar end;\n\t/** @type {!number} */\n\tvar depth;\n\t/** @type {!boolean} */\n\tvar bit;\n\tif (i > this.size$()) {\n\t\tthrow new Error(\"WaveletMatrix.rank(): range error\");\n\t}\n\tif (i === 0) {\n\t\treturn 0;\n\t}\n\tbegin = this._range[c + \"\"];\n\tif (begin == null) {\n\t\treturn 0;\n\t}\n\tend = i;\n\tdepth = 0;\n\twhile (depth < this.bitsize$()) {\n\t\tbit = this._uint2bit$II(c, depth);\n\t\tend = this._bv[depth].rank$IB(end, bit);\n\t\tif (bit) {\n\t\t\tend += (function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/wavelet-matrix.jsx:174:33] null access\\n                end += this._seps[depth];\\n                                 ^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(this._seps[depth]));\n\t\t}\n\t\tdepth++;\n\t}\n\treturn (end - (function (v) {\n\t\tif (! (v != null)) {\n\t\t\tdebugger;\n\t\t\tthrow new Error(\"[src/wavelet-matrix.jsx:178:21] null access\\n        return end - begin;\\n                     ^^^^^\\n\");\n\t\t}\n\t\treturn v;\n\t}(begin)) | 0);\n};\n\n/**\n * @param {!number} i\n * @param {!number} c\n * @return {!number}\n */\nWaveletMatrix.prototype.rank_less_than$II = function (i, c) {\n\t/** @type {!number} */\n\tvar begin;\n\t/** @type {!number} */\n\tvar end;\n\t/** @type {!number} */\n\tvar depth;\n\t/** @type {!number} */\n\tvar rlt;\n\t/** @type {!number} */\n\tvar rank0_begin;\n\t/** @type {!number} */\n\tvar rank0_end;\n\tif (i > this.size$()) {\n\t\tthrow new Error(\"WaveletMatrix.rank_less_than(): range error\");\n\t}\n\tif (i === 0) {\n\t\treturn 0;\n\t}\n\tbegin = 0;\n\tend = i;\n\tdepth = 0;\n\trlt = 0;\n\twhile (depth < this.bitsize$()) {\n\t\trank0_begin = this._bv[depth].rank$IB(begin, false);\n\t\trank0_end = this._bv[depth].rank$IB(end, false);\n\t\tif (this._uint2bit$II(c, depth)) {\n\t\t\trlt += rank0_end - rank0_begin;\n\t\t\tbegin += (function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/wavelet-matrix.jsx:203:36] null access\\n                begin += (this._seps[depth] - rank0_begin);\\n                                    ^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(this._seps[depth])) - rank0_begin;\n\t\t\tend += (function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/wavelet-matrix.jsx:204:36] null access\\n                end   += (this._seps[depth] - rank0_end);\\n                                    ^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(this._seps[depth])) - rank0_end;\n\t\t} else {\n\t\t\tbegin = rank0_begin;\n\t\t\tend = rank0_end;\n\t\t}\n\t\tdepth++;\n\t}\n\treturn (rlt | 0);\n};\n\n/**\n * @return {!string}\n */\nWaveletMatrix.prototype.dump$ = function () {\n\t/** @type {Array.<undefined|!string>} */\n\tvar contents;\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {Array.<undefined|!string>} */\n\tvar range_contents;\n\t/** @type {!number} */\n\tvar counter;\n\t/** @type {!string} */\n\tvar key;\n\tcontents = [ Binary$dump16bitNumber$I(this._bitsize), Binary$dump32bitNumber$N(this._size) ];\n\tfor (i = 0; i < this.bitsize$(); i++) {\n\t\tcontents.push(this._bv[i].dump$());\n\t}\n\tfor (i = 0; i < this.bitsize$(); i++) {\n\t\tcontents.push(Binary$dump32bitNumber$N((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/wavelet-matrix.jsx:228:59] null access\\n            contents.push(Binary.dump32bitNumber(this._seps[i]));\\n                                                           ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(this._seps[i]))));\n\t}\n\trange_contents = [  ];\n\tcounter = 0;\n\tfor (key in this._range) {\n\t\trange_contents.push(Binary$dump32bitNumber$N(key | 0));\n\t\trange_contents.push(Binary$dump32bitNumber$N((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/wavelet-matrix.jsx:235:66] null access\\n            range_contents.push(Binary.dump32bitNumber(this._range[key]));\\n                                                                  ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(this._range[key]))));\n\t\tcounter++;\n\t}\n\tcontents.push(Binary$dump32bitNumber$N(counter));\n\treturn contents.join('') + range_contents.join('');\n};\n\n/**\n * @param {CompressionReport} report\n * @return {!string}\n */\nWaveletMatrix.prototype.dump$LCompressionReport$ = function (report) {\n\t/** @type {Array.<undefined|!string>} */\n\tvar contents;\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {Array.<undefined|!string>} */\n\tvar range_contents;\n\t/** @type {!number} */\n\tvar counter;\n\t/** @type {!string} */\n\tvar key;\n\tcontents = [ Binary$dump16bitNumber$I(this._bitsize), Binary$dump32bitNumber$N(this._size) ];\n\treport.add$II(3, 3);\n\tfor (i = 0; i < this.bitsize$(); i++) {\n\t\tcontents.push(this._bv[i].dump$LCompressionReport$(report));\n\t}\n\tfor (i = 0; i < this.bitsize$(); i++) {\n\t\tcontents.push(Binary$dump32bitNumber$N((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/wavelet-matrix.jsx:255:59] null access\\n            contents.push(Binary.dump32bitNumber(this._seps[i]));\\n                                                           ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(this._seps[i]))));\n\t\treport.add$II(2, 2);\n\t}\n\trange_contents = [  ];\n\tcounter = 0;\n\tfor (key in this._range) {\n\t\trange_contents.push(Binary$dump32bitNumber$N(key | 0));\n\t\trange_contents.push(Binary$dump32bitNumber$N((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/wavelet-matrix.jsx:263:66] null access\\n            range_contents.push(Binary.dump32bitNumber(this._range[key]));\\n                                                                  ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(this._range[key]))));\n\t\treport.add$II(4, 4);\n\t\tcounter++;\n\t}\n\treport.add$II(2, 2);\n\tcontents.push(Binary$dump32bitNumber$N(counter));\n\treturn contents.join('') + range_contents.join('');\n};\n\n/**\n * @param {!string} data\n * @return {!number}\n */\nWaveletMatrix.prototype.load$S = function (data) {\n\treturn this.load$SI(data, 0);\n};\n\n/**\n * @param {!string} data\n * @param {!number} offset\n * @return {!number}\n */\nWaveletMatrix.prototype.load$SI = function (data, offset) {\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {BitVector} */\n\tvar bit_vector;\n\t/** @type {!number} */\n\tvar sep;\n\t/** @type {!number} */\n\tvar range_size;\n\t/** @type {!number} */\n\tvar key;\n\t/** @type {!number} */\n\tvar value;\n\tthis.clear$();\n\tthis._bitsize = Binary$load16bitNumber$SI(data, offset++);\n\tthis._size = (Binary$load32bitNumber$SI(data, offset) | 0);\n\toffset += 2;\n\tfor (i = 0; i < this.bitsize$(); i++) {\n\t\tbit_vector = new BitVector$();\n\t\toffset = bit_vector.load$SI(data, offset);\n\t\tthis._bv.push(bit_vector);\n\t}\n\tsep = 0;\n\tfor (i = 0; i < this.bitsize$(); (i++, offset += 2)) {\n\t\tthis._seps.push(Binary$load32bitNumber$SI(data, offset));\n\t}\n\trange_size = Binary$load32bitNumber$SI(data, offset);\n\toffset += 2;\n\tfor (i = 0; i < range_size; (i++, offset += 4)) {\n\t\tkey = Binary$load32bitNumber$SI(data, offset);\n\t\tvalue = Binary$load32bitNumber$SI(data, offset + 2);\n\t\tthis._range[key + \"\"] = (value | 0);\n\t}\n\treturn offset;\n};\n\n/**\n * @param {Object.<string, undefined|!number>} input\n * @return {Object.<string, undefined|!number>}\n */\nWaveletMatrix._shallow_copy$HI = function (input) {\n\t/** @type {Object.<string, undefined|!number>} */\n\tvar result;\n\t/** @type {!string} */\n\tvar key;\n\tresult = ({  });\n\tfor (key in input) {\n\t\tresult[key] = input[key];\n\t}\n\treturn result;\n};\n\nvar WaveletMatrix$_shallow_copy$HI = WaveletMatrix._shallow_copy$HI;\n\n/**\n * @param {!number} c\n * @param {!number} i\n * @return {!boolean}\n */\nWaveletMatrix.prototype._uint2bit$II = function (c, i) {\n\treturn (c >>> this._bitsize - 1 - i & 0x1) === 0x1;\n};\n\n/**\n * class BurrowsWheelerTransform extends Object\n * @constructor\n */\nfunction BurrowsWheelerTransform() {\n}\n\n/**\n * @constructor\n */\nfunction BurrowsWheelerTransform$() {\n\tthis._str = \"\";\n\tthis._size = 0;\n\tthis._head = 0;\n\tthis._suffixarray = [  ];\n};\n\nBurrowsWheelerTransform$.prototype = new BurrowsWheelerTransform;\n\n/**\n * @return {!number}\n */\nBurrowsWheelerTransform.prototype.size$ = function () {\n\treturn this._size;\n};\n\n/**\n * @return {!number}\n */\nBurrowsWheelerTransform.prototype.head$ = function () {\n\treturn this._head;\n};\n\n/**\n */\nBurrowsWheelerTransform.prototype.clear$ = function () {\n\tthis._str = \"\";\n\tthis._size = 0;\n\tthis._head = 0;\n\tthis._suffixarray.length = 0;\n};\n\n/**\n * @param {!string} str\n */\nBurrowsWheelerTransform.prototype.build$S = function (str) {\n\tthis._str = str;\n\tthis._size = this._str.length;\n\tthis._suffixarray = SAIS$make$S(str);\n\tthis._head = (this._suffixarray.indexOf(0) | 0);\n};\n\n/**\n * @param {!number} i\n * @return {!string}\n */\nBurrowsWheelerTransform.prototype.get$I = function (i) {\n\t/** @type {!number} */\n\tvar size;\n\t/** @type {!number} */\n\tvar index;\n\tsize = this.size$();\n\tif (i >= size) {\n\t\tthrow new Error(\"BurrowsWheelerTransform.get() : range error\");\n\t}\n\tindex = ((function (v) {\n\t\tif (! (v != null)) {\n\t\t\tdebugger;\n\t\t\tthrow new Error(\"[src/burrows-wheeler-transform.jsx:52:38] null access\\n        var index = (this._suffixarray[i] + size - 1) % size;\\n                                      ^\\n\");\n\t\t}\n\t\treturn v;\n\t}(this._suffixarray[i])) + size - 1) % size;\n\treturn this._str.charAt(index);\n};\n\n/**\n * @return {!string}\n */\nBurrowsWheelerTransform.prototype.get$ = function () {\n\t/** @type {Array.<undefined|!string>} */\n\tvar str;\n\t/** @type {!number} */\n\tvar size;\n\t/** @type {!number} */\n\tvar i;\n\tstr = [  ];\n\tsize = this.size$();\n\tfor (i = 0; i < size; i++) {\n\t\tstr.push(this.get$I(i));\n\t}\n\treturn str.join(\"\");\n};\n\n/**\n * @param {!string} replace\n * @return {!string}\n */\nBurrowsWheelerTransform.prototype.get$S = function (replace) {\n\t/** @type {!string} */\n\tvar result;\n\tresult = this.get$();\n\treturn result.replace(BurrowsWheelerTransform.END_MARKER, replace);\n};\n\n/**\n * class OArray extends Object\n * @constructor\n */\nfunction OArray() {\n}\n\n/**\n * @constructor\n * @param {Array.<undefined|!number>} array\n */\nfunction OArray$AI(array) {\n\tthis.array = array;\n\tthis.offset = 0;\n};\n\nOArray$AI.prototype = new OArray;\n\n/**\n * @constructor\n * @param {Array.<undefined|!number>} array\n * @param {!number} offset\n */\nfunction OArray$AII(array, offset) {\n\tthis.array = array;\n\tthis.offset = offset;\n};\n\nOArray$AII.prototype = new OArray;\n\n/**\n * @param {!number} index\n * @return {!number}\n */\nOArray.prototype.get$I = function (index) {\n\treturn (function (v) {\n\t\tif (! (v != null)) {\n\t\t\tdebugger;\n\t\t\tthrow new Error(\"[src/sais.jsx:27:25] null access\\n        return this.array[index + this.offset];\\n                         ^\\n\");\n\t\t}\n\t\treturn v;\n\t}(this.array[index + this.offset]));\n};\n\n/**\n * @param {!number} index\n * @param {!number} value\n */\nOArray.prototype.set$II = function (index, value) {\n\tthis.array[index + this.offset] = value;\n};\n\n/**\n * @param {!number} index\n * @return {!boolean}\n */\nOArray.prototype.isS$I = function (index) {\n\treturn (function (v) {\n\t\tif (! (v != null)) {\n\t\t\tdebugger;\n\t\t\tthrow new Error(\"[src/sais.jsx:37:25] null access\\n        return this.array[index + this.offset] < this.array[index + this.offset + 1];\\n                         ^\\n\");\n\t\t}\n\t\treturn v;\n\t}(this.array[index + this.offset])) < (function (v) {\n\t\tif (! (v != null)) {\n\t\t\tdebugger;\n\t\t\tthrow new Error(\"[src/sais.jsx:37:59] null access\\n        return this.array[index + this.offset] < this.array[index + this.offset + 1];\\n                                                           ^\\n\");\n\t\t}\n\t\treturn v;\n\t}(this.array[index + this.offset + 1]));\n};\n\n/**\n * @param {!number} index1\n * @param {!number} index2\n * @return {!boolean}\n */\nOArray.prototype.compare$II = function (index1, index2) {\n\treturn this.array[index1 + this.offset] == this.array[index2 + this.offset];\n};\n\n/**\n * class SAIS extends Object\n * @constructor\n */\nfunction SAIS() {\n}\n\n/**\n * @constructor\n */\nfunction SAIS$() {\n};\n\nSAIS$.prototype = new SAIS;\n\n/**\n * @param {BitVector} t\n * @param {!number} i\n * @return {!boolean}\n */\nSAIS._isLMS$LBitVector$I = function (t, i) {\n\treturn i > 0 && t.get$I(i) && ! t.get$I(i - 1);\n};\n\nvar SAIS$_isLMS$LBitVector$I = SAIS._isLMS$LBitVector$I;\n\n/**\n * @param {OArray} s\n * @param {Array.<undefined|!number>} bkt\n * @param {!number} n\n * @param {!number} K\n * @param {!boolean} end\n */\nSAIS._getBuckets$LOArray$AIIIB = function (s, bkt, n, K, end) {\n\t/** @type {!number} */\n\tvar sum;\n\t/** @type {!number} */\n\tvar i;\n\tsum = 0;\n\tfor (i = 0; i <= K; i++) {\n\t\tbkt[i] = 0;\n\t}\n\tfor (i = 0; i < n; i++) {\n\t\tbkt[s.get$I(i)]++;\n\t}\n\tfor (i = 0; i <= K; i++) {\n\t\tsum += (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/sais.jsx:68:22] null access\\n            sum += bkt[i];\\n                      ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(bkt[i]));\n\t\tbkt[i] = ((end ? sum : sum - (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/sais.jsx:69:42] null access\\n            bkt[i] = end ? sum : sum - bkt[i];\\n                                          ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(bkt[i]))) | 0);\n\t}\n};\n\nvar SAIS$_getBuckets$LOArray$AIIIB = SAIS._getBuckets$LOArray$AIIIB;\n\n/**\n * @param {BitVector} t\n * @param {Array.<undefined|!number>} SA\n * @param {OArray} s\n * @param {Array.<undefined|!number>} bkt\n * @param {!number} n\n * @param {!number} K\n * @param {!boolean} end\n */\nSAIS._induceSAl$LBitVector$AILOArray$AIIIB = function (t, SA, s, bkt, n, K, end) {\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {!number} */\n\tvar j;\n\tSAIS$_getBuckets$LOArray$AIIIB(s, bkt, n, K, end);\n\tfor (i = 0; i < n; i++) {\n\t\tj = (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/sais.jsx:79:22] null access\\n            var j = SA[i] - 1;\\n                      ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(SA[i])) - 1;\n\t\tif (j >= 0 && ! t.get$I(j)) {\n\t\t\tSA[bkt[s.get$I(j)]++] = (j | 0);\n\t\t}\n\t}\n};\n\nvar SAIS$_induceSAl$LBitVector$AILOArray$AIIIB = SAIS._induceSAl$LBitVector$AILOArray$AIIIB;\n\n/**\n * @param {BitVector} t\n * @param {Array.<undefined|!number>} SA\n * @param {OArray} s\n * @param {Array.<undefined|!number>} bkt\n * @param {!number} n\n * @param {!number} K\n * @param {!boolean} end\n */\nSAIS._induceSAs$LBitVector$AILOArray$AIIIB = function (t, SA, s, bkt, n, K, end) {\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {!number} */\n\tvar j;\n\tSAIS$_getBuckets$LOArray$AIIIB(s, bkt, n, K, end);\n\tfor (i = n - 1; i >= 0; i--) {\n\t\tj = (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/sais.jsx:93:22] null access\\n            var j = SA[i] - 1;\\n                      ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(SA[i])) - 1;\n\t\tif (j >= 0 && t.get$I(j)) {\n\t\t\tSA[-- bkt[s.get$I(j)]] = (j | 0);\n\t\t}\n\t}\n};\n\nvar SAIS$_induceSAs$LBitVector$AILOArray$AIIIB = SAIS._induceSAs$LBitVector$AILOArray$AIIIB;\n\n/**\n * @param {!string} source\n * @return {Array.<undefined|!number>}\n */\nSAIS.make$S = function (source) {\n\t/** @type {Array.<undefined|!number>} */\n\tvar charCodes;\n\t/** @type {!number} */\n\tvar maxCode;\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {!number} */\n\tvar code;\n\t/** @type {Array.<undefined|!number>} */\n\tvar SA;\n\t/** @type {OArray} */\n\tvar s;\n\tcharCodes = [  ];\n\tcharCodes.length = source.length;\n\tmaxCode = 0;\n\tfor (i = 0; i < source.length; i++) {\n\t\tcode = source.charCodeAt(i);\n\t\tcharCodes[i] = (code | 0);\n\t\tmaxCode = (code > maxCode ? code : maxCode);\n\t}\n\tSA = [  ];\n\tSA.length = source.length;\n\ts = new OArray$AI(charCodes);\n\tSAIS$_make$LOArray$AIII(s, SA, source.length, maxCode);\n\treturn SA;\n};\n\nvar SAIS$make$S = SAIS.make$S;\n\n/**\n * @param {OArray} s\n * @param {Array.<undefined|!number>} SA\n * @param {!number} n\n * @param {!number} K\n */\nSAIS._make$LOArray$AIII = function (s, SA, n, K) {\n\t/** @type {BitVector} */\n\tvar t;\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {Array.<undefined|!number>} */\n\tvar bkt;\n\t/** @type {!number} */\n\tvar n1;\n\t/** @type {!number} */\n\tvar name;\n\t/** @type {!number} */\n\tvar prev;\n\t/** @type {undefined|!number} */\n\tvar pos;\n\t/** @type {!boolean} */\n\tvar diff;\n\t/** @type {!number} */\n\tvar d;\n\t/** @type {!number} */\n\tvar j;\n\t/** @type {Array.<undefined|!number>} */\n\tvar SA1;\n\t/** @type {OArray} */\n\tvar s1;\n\tt = new BitVector$();\n\tt.set$IB(n - 2, false);\n\tt.set$IB(n - 1, true);\n\tfor (i = n - 3; i >= 0; i--) {\n\t\tt.set$IB(i, s.isS$I(i) || s.compare$II(i, i + 1) && t.get$I(i + 1));\n\t}\n\tbkt = [  ];\n\tbkt.length = K + 1;\n\tSAIS$_getBuckets$LOArray$AIIIB(s, bkt, n, K, true);\n\tfor (i = 0; i < n; i++) {\n\t\tSA[i] = (- 1 | 0);\n\t}\n\tfor (i = 1; i < n; i++) {\n\t\tif (SAIS$_isLMS$LBitVector$I(t, i)) {\n\t\t\tSA[-- bkt[s.get$I(i)]] = (i | 0);\n\t\t}\n\t}\n\tSAIS$_induceSAl$LBitVector$AILOArray$AIIIB(t, SA, s, bkt, n, K, false);\n\tSAIS$_induceSAs$LBitVector$AILOArray$AIIIB(t, SA, s, bkt, n, K, true);\n\tn1 = 0;\n\tfor (i = 0; i < n; i++) {\n\t\tif (SAIS$_isLMS$LBitVector$I(t, (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/sais.jsx:157:33] null access\\n            if (SAIS._isLMS(t, SA[i]))\\n                                 ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(SA[i])))) {\n\t\t\tSA[n1++] = SA[i];\n\t\t}\n\t}\n\tfor (i = n1; i < n; i++) {\n\t\tSA[i] = (- 1 | 0);\n\t}\n\tname = 0;\n\tprev = - 1;\n\tfor (i = 0; i < n1; i++) {\n\t\tpos = SA[i];\n\t\tdiff = false;\n\t\tfor (d = 0; d < n; d++) {\n\t\t\tif (prev === - 1 || ! s.compare$II((function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/sais.jsx:176:45] null access\\n                if (prev == -1 || !s.compare(pos + d, prev + d) || t.get(pos + d) != t.get(prev + d))\\n                                             ^^^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(pos)) + d, prev + d) || t.get$I((function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/sais.jsx:176:73] null access\\n                if (prev == -1 || !s.compare(pos + d, prev + d) || t.get(pos + d) != t.get(prev + d))\\n                                                                         ^^^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(pos)) + d) !== t.get$I(prev + d)) {\n\t\t\t\tdiff = true;\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\tif (d > 0 && (SAIS$_isLMS$LBitVector$I(t, (function (v) {\n\t\t\t\t\tif (! (v != null)) {\n\t\t\t\t\t\tdebugger;\n\t\t\t\t\t\tthrow new Error(\"[src/sais.jsx:181:50] null access\\n                else if (d > 0 && (SAIS._isLMS(t, pos+d) || SAIS._isLMS(t, prev + d)))\\n                                                  ^^^\\n\");\n\t\t\t\t\t}\n\t\t\t\t\treturn v;\n\t\t\t\t}(pos)) + d) || SAIS$_isLMS$LBitVector$I(t, prev + d))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (diff) {\n\t\t\tname++;\n\t\t\tprev = (function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/sais.jsx:189:23] null access\\n                prev = pos;\\n                       ^^^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(pos));\n\t\t}\n\t\tpos = (((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/sais.jsx:191:19] null access\\n            pos = (pos % 2 == 0) ? pos / 2 : (pos - 1) / 2;\\n                   ^^^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(pos)) % 2 === 0 ? (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/sais.jsx:191:35] null access\\n            pos = (pos % 2 == 0) ? pos / 2 : (pos - 1) / 2;\\n                                   ^^^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(pos)) / 2 : ((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/sais.jsx:191:46] null access\\n            pos = (pos % 2 == 0) ? pos / 2 : (pos - 1) / 2;\\n                                              ^^^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(pos)) - 1) / 2) | 0);\n\t\tSA[n1 + (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/sais.jsx:192:20] null access\\n            SA[n1 + pos] = name - 1;\\n                    ^^^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(pos))] = (name - 1 | 0);\n\t}\n\tfor ((i = n - 1, j = n - 1); i >= n1; i--) {\n\t\tif ((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/sais.jsx:196:18] null access\\n            if (SA[i] >= 0)\\n                  ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(SA[i])) >= 0) {\n\t\t\tSA[j--] = SA[i];\n\t\t}\n\t}\n\tSA1 = SA;\n\ts1 = new OArray$AII(SA, n - n1);\n\tif (name < n1) {\n\t\tSAIS$_make$LOArray$AIII(s1, SA1, n1, name - 1);\n\t} else {\n\t\tfor (i = 0; i < n1; i++) {\n\t\t\tSA1[s1.get$I(i)] = (i | 0);\n\t\t}\n\t}\n\tbkt = [  ];\n\tbkt.length = K + 1;\n\tSAIS$_getBuckets$LOArray$AIIIB(s, bkt, n, K, true);\n\tfor ((i = 1, j = 0); i < n; i++) {\n\t\tif (SAIS$_isLMS$LBitVector$I(t, i)) {\n\t\t\ts1.set$II(j++, i);\n\t\t}\n\t}\n\tfor (i = 0; i < n1; i++) {\n\t\tSA1[i] = s1.get$I((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/sais.jsx:235:31] null access\\n            SA1[i] = s1.get(SA1[i]); // get index in s\\n                               ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(SA1[i])));\n\t}\n\tfor (i = n1; i < n; i++) {\n\t\tSA[i] = (- 1 | 0);\n\t}\n\tfor (i = n1 - 1; i >= 0; i--) {\n\t\tj = (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/sais.jsx:243:18] null access\\n            j = SA[i];\\n                  ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(SA[i]));\n\t\tSA[i] = (- 1 | 0);\n\t\tSA[-- bkt[s.get$I(j)]] = (j | 0);\n\t}\n\tSAIS$_induceSAl$LBitVector$AILOArray$AIIIB(t, SA, s, bkt, n, K, false);\n\tSAIS$_induceSAs$LBitVector$AILOArray$AIIIB(t, SA, s, bkt, n, K, true);\n};\n\nvar SAIS$_make$LOArray$AIII = SAIS._make$LOArray$AIII;\n\nOktaviaSearch._stemmer = null;\nOktaviaSearch._instance = null;\n$__jsx_lazy_init(Oktavia, \"eof\", function () {\n\treturn String.fromCharCode(0);\n});\n$__jsx_lazy_init(Oktavia, \"eob\", function () {\n\treturn String.fromCharCode(1);\n});\n$__jsx_lazy_init(Oktavia, \"unknown\", function () {\n\treturn String.fromCharCode(3);\n});\nBinary._base64EncodeChars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n$__jsx_lazy_init(Binary, \"_base64DecodeChars\", function () {\n\treturn [ - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, 62, - 1, - 1, - 1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, - 1, - 1, - 1, - 1, - 1, - 1, - 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, - 1, - 1, - 1, - 1, - 1, - 1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, - 1, - 1, - 1, - 1, - 1 ];\n});\n$__jsx_lazy_init(Style, \"console\", function () {\n\treturn ({ 'title': [ '\\x1B[32m\\x1b[4m', '\\x1B[39m\\x1b[0m' ], 'url': [ '\\x1B[34m', '\\x1B[39m' ], 'hit': [ '\\x1B[4m', '\\x1B[0m' ], 'del': [ '\\x1B[9m', '\\x1B[0m' ], 'summary': [ '\\x1B[90m', '\\x1B[39m' ] });\n});\n$__jsx_lazy_init(Style, \"html\", function () {\n\treturn ({ 'title': [ '<span class=\"title\">', '</span>' ], 'url': [ '<span class=\"url\">', '</span>' ], 'hit': [ '<span class=\"hit\">', '</span>' ], 'del': [ '<del>', '</del>' ], 'summary': [ '<span class=\"reuslt\">', '</span>' ] });\n});\n$__jsx_lazy_init(Style, \"ignore\", function () {\n\treturn ({ 'tilte': [ '', '' ], 'url': [ '', '' ], 'hit': [ '', '' ], 'del': [ '', '' ], 'summary': [ '', '' ] });\n});\nEnglishStemmer.serialVersionUID = 1;\n$__jsx_lazy_init(EnglishStemmer, \"methodObject\", function () {\n\treturn new EnglishStemmer$();\n});\n$__jsx_lazy_init(EnglishStemmer, \"a_0\", function () {\n\treturn [ new Among$SII(\"arsen\", - 1, - 1), new Among$SII(\"commun\", - 1, - 1), new Among$SII(\"gener\", - 1, - 1) ];\n});\n$__jsx_lazy_init(EnglishStemmer, \"a_1\", function () {\n\treturn [ new Among$SII(\"'\", - 1, 1), new Among$SII(\"'s'\", 0, 1), new Among$SII(\"'s\", - 1, 1) ];\n});\n$__jsx_lazy_init(EnglishStemmer, \"a_2\", function () {\n\treturn [ new Among$SII(\"ied\", - 1, 2), new Among$SII(\"s\", - 1, 3), new Among$SII(\"ies\", 1, 2), new Among$SII(\"sses\", 1, 1), new Among$SII(\"ss\", 1, - 1), new Among$SII(\"us\", 1, - 1) ];\n});\n$__jsx_lazy_init(EnglishStemmer, \"a_3\", function () {\n\treturn [ new Among$SII(\"\", - 1, 3), new Among$SII(\"bb\", 0, 2), new Among$SII(\"dd\", 0, 2), new Among$SII(\"ff\", 0, 2), new Among$SII(\"gg\", 0, 2), new Among$SII(\"bl\", 0, 1), new Among$SII(\"mm\", 0, 2), new Among$SII(\"nn\", 0, 2), new Among$SII(\"pp\", 0, 2), new Among$SII(\"rr\", 0, 2), new Among$SII(\"at\", 0, 1), new Among$SII(\"tt\", 0, 2), new Among$SII(\"iz\", 0, 1) ];\n});\n$__jsx_lazy_init(EnglishStemmer, \"a_4\", function () {\n\treturn [ new Among$SII(\"ed\", - 1, 2), new Among$SII(\"eed\", 0, 1), new Among$SII(\"ing\", - 1, 2), new Among$SII(\"edly\", - 1, 2), new Among$SII(\"eedly\", 3, 1), new Among$SII(\"ingly\", - 1, 2) ];\n});\n$__jsx_lazy_init(EnglishStemmer, \"a_5\", function () {\n\treturn [ new Among$SII(\"anci\", - 1, 3), new Among$SII(\"enci\", - 1, 2), new Among$SII(\"ogi\", - 1, 13), new Among$SII(\"li\", - 1, 16), new Among$SII(\"bli\", 3, 12), new Among$SII(\"abli\", 4, 4), new Among$SII(\"alli\", 3, 8), new Among$SII(\"fulli\", 3, 14), new Among$SII(\"lessli\", 3, 15), new Among$SII(\"ousli\", 3, 10), new Among$SII(\"entli\", 3, 5), new Among$SII(\"aliti\", - 1, 8), new Among$SII(\"biliti\", - 1, 12), new Among$SII(\"iviti\", - 1, 11), new Among$SII(\"tional\", - 1, 1), new Among$SII(\"ational\", 14, 7), new Among$SII(\"alism\", - 1, 8), new Among$SII(\"ation\", - 1, 7), new Among$SII(\"ization\", 17, 6), new Among$SII(\"izer\", - 1, 6), new Among$SII(\"ator\", - 1, 7), new Among$SII(\"iveness\", - 1, 11), new Among$SII(\"fulness\", - 1, 9), new Among$SII(\"ousness\", - 1, 10) ];\n});\n$__jsx_lazy_init(EnglishStemmer, \"a_6\", function () {\n\treturn [ new Among$SII(\"icate\", - 1, 4), new Among$SII(\"ative\", - 1, 6), new Among$SII(\"alize\", - 1, 3), new Among$SII(\"iciti\", - 1, 4), new Among$SII(\"ical\", - 1, 4), new Among$SII(\"tional\", - 1, 1), new Among$SII(\"ational\", 5, 2), new Among$SII(\"ful\", - 1, 5), new Among$SII(\"ness\", - 1, 5) ];\n});\n$__jsx_lazy_init(EnglishStemmer, \"a_7\", function () {\n\treturn [ new Among$SII(\"ic\", - 1, 1), new Among$SII(\"ance\", - 1, 1), new Among$SII(\"ence\", - 1, 1), new Among$SII(\"able\", - 1, 1), new Among$SII(\"ible\", - 1, 1), new Among$SII(\"ate\", - 1, 1), new Among$SII(\"ive\", - 1, 1), new Among$SII(\"ize\", - 1, 1), new Among$SII(\"iti\", - 1, 1), new Among$SII(\"al\", - 1, 1), new Among$SII(\"ism\", - 1, 1), new Among$SII(\"ion\", - 1, 2), new Among$SII(\"er\", - 1, 1), new Among$SII(\"ous\", - 1, 1), new Among$SII(\"ant\", - 1, 1), new Among$SII(\"ent\", - 1, 1), new Among$SII(\"ment\", 15, 1), new Among$SII(\"ement\", 16, 1) ];\n});\n$__jsx_lazy_init(EnglishStemmer, \"a_8\", function () {\n\treturn [ new Among$SII(\"e\", - 1, 1), new Among$SII(\"l\", - 1, 2) ];\n});\n$__jsx_lazy_init(EnglishStemmer, \"a_9\", function () {\n\treturn [ new Among$SII(\"succeed\", - 1, - 1), new Among$SII(\"proceed\", - 1, - 1), new Among$SII(\"exceed\", - 1, - 1), new Among$SII(\"canning\", - 1, - 1), new Among$SII(\"inning\", - 1, - 1), new Among$SII(\"earring\", - 1, - 1), new Among$SII(\"herring\", - 1, - 1), new Among$SII(\"outing\", - 1, - 1) ];\n});\n$__jsx_lazy_init(EnglishStemmer, \"a_10\", function () {\n\treturn [ new Among$SII(\"andes\", - 1, - 1), new Among$SII(\"atlas\", - 1, - 1), new Among$SII(\"bias\", - 1, - 1), new Among$SII(\"cosmos\", - 1, - 1), new Among$SII(\"dying\", - 1, 3), new Among$SII(\"early\", - 1, 9), new Among$SII(\"gently\", - 1, 7), new Among$SII(\"howe\", - 1, - 1), new Among$SII(\"idly\", - 1, 6), new Among$SII(\"lying\", - 1, 4), new Among$SII(\"news\", - 1, - 1), new Among$SII(\"only\", - 1, 10), new Among$SII(\"singly\", - 1, 11), new Among$SII(\"skies\", - 1, 2), new Among$SII(\"skis\", - 1, 1), new Among$SII(\"sky\", - 1, - 1), new Among$SII(\"tying\", - 1, 5), new Among$SII(\"ugly\", - 1, 8) ];\n});\n$__jsx_lazy_init(EnglishStemmer, \"g_v\", function () {\n\treturn [ 17, 65, 16, 1 ];\n});\n$__jsx_lazy_init(EnglishStemmer, \"g_v_WXY\", function () {\n\treturn [ 1, 17, 65, 208, 1 ];\n});\n$__jsx_lazy_init(EnglishStemmer, \"g_valid_LI\", function () {\n\treturn [ 55, 141, 2 ];\n});\n$__jsx_lazy_init(_Common, \"buffers\", function () {\n\treturn [ \"comment\", \"sgmlDecl\", \"textNode\", \"tagName\", \"doctype\", \"procInstName\", \"procInstBody\", \"entity\", \"attribName\", \"attribValue\", \"cdata\", \"script\" ];\n});\n$__jsx_lazy_init(_Common, \"EVENTS\", function () {\n\treturn [ \"text\", \"processinginstruction\", \"sgmldeclaration\", \"doctype\", \"comment\", \"attribute\", \"opentag\", \"closetag\", \"opencdata\", \"cdata\", \"clo_State.CDATA\", \"error\", \"end\", \"ready\", \"script\", \"opennamespace\", \"closenamespace\" ];\n});\n$__jsx_lazy_init(_Common, \"MAX_BUFFER_LENGTH\", function () {\n\treturn 64 * 1024;\n});\n_State.BEGIN = 1;\n_State.TEXT = 2;\n_State.TEXT_ENTITY = 3;\n_State.OPEN_WAKA = 4;\n_State.SGML_DECL = 5;\n_State.SGML_DECL_QUOTED = 6;\n_State.DOCTYPE = 7;\n_State.DOCTYPE_QUOTED = 8;\n_State.DOCTYPE_DTD = 9;\n_State.DOCTYPE_DTD_QUOTED = 10;\n_State.COMMENT_STARTING = 11;\n_State.COMMENT = 12;\n_State.COMMENT_ENDING = 13;\n_State.COMMENT_ENDED = 14;\n_State.CDATA = 15;\n_State.CDATA_ENDING = 16;\n_State.CDATA_ENDING_2 = 17;\n_State.PROC_INST = 18;\n_State.PROC_INST_BODY = 19;\n_State.PROC_INST_ENDING = 20;\n_State.OPEN_TAG = 21;\n_State.OPEN_TAG_SLASH = 22;\n_State.ATTRIB = 23;\n_State.ATTRIB_NAME = 24;\n_State.ATTRIB_NAME_SAW_WHITE = 25;\n_State.ATTRIB_VALUE = 26;\n_State.ATTRIB_VALUE_QUOTED = 27;\n_State.ATTRIB_VALUE_UNQUOTED = 28;\n_State.ATTRIB_VALUE_ENTITY_Q = 29;\n_State.ATTRIB_VALUE_ENTITY_U = 30;\n_State.CLOSE_TAG = 31;\n_State.CLOSE_TAG_SAW_WHITE = 32;\n_State.SCRIPT = 33;\n_State.SCRIPT_ENDING = 34;\n$__jsx_lazy_init(_Entities, \"_entities\", function () {\n\treturn ({ \"amp\": \"&\", \"gt\": \">\", \"lt\": \"<\", \"quot\": \"\\\"\", \"apos\": \"'\", \"AElig\": 198, \"Aacute\": 193, \"Acirc\": 194, \"Agrave\": 192, \"Aring\": 197, \"Atilde\": 195, \"Auml\": 196, \"Ccedil\": 199, \"ETH\": 208, \"Eacute\": 201, \"Ecirc\": 202, \"Egrave\": 200, \"Euml\": 203, \"Iacute\": 205, \"Icirc\": 206, \"Igrave\": 204, \"Iuml\": 207, \"Ntilde\": 209, \"Oacute\": 211, \"Ocirc\": 212, \"Ograve\": 210, \"Oslash\": 216, \"Otilde\": 213, \"Ouml\": 214, \"THORN\": 222, \"Uacute\": 218, \"Ucirc\": 219, \"Ugrave\": 217, \"Uuml\": 220, \"Yacute\": 221, \"aacute\": 225, \"acirc\": 226, \"aelig\": 230, \"agrave\": 224, \"aring\": 229, \"atilde\": 227, \"auml\": 228, \"ccedil\": 231, \"eacute\": 233, \"ecirc\": 234, \"egrave\": 232, \"eth\": 240, \"euml\": 235, \"iacute\": 237, \"icirc\": 238, \"igrave\": 236, \"iuml\": 239, \"ntilde\": 241, \"oacute\": 243, \"ocirc\": 244, \"ograve\": 242, \"oslash\": 248, \"otilde\": 245, \"ouml\": 246, \"szlig\": 223, \"thorn\": 254, \"uacute\": 250, \"ucirc\": 251, \"ugrave\": 249, \"uuml\": 252, \"yacute\": 253, \"yuml\": 255, \"copy\": 169, \"reg\": 174, \"nbsp\": 160, \"iexcl\": 161, \"cent\": 162, \"pound\": 163, \"curren\": 164, \"yen\": 165, \"brvbar\": 166, \"sect\": 167, \"uml\": 168, \"ordf\": 170, \"laquo\": 171, \"not\": 172, \"shy\": 173, \"macr\": 175, \"deg\": 176, \"plusmn\": 177, \"sup1\": 185, \"sup2\": 178, \"sup3\": 179, \"acute\": 180, \"micro\": 181, \"para\": 182, \"middot\": 183, \"cedil\": 184, \"ordm\": 186, \"raquo\": 187, \"frac14\": 188, \"frac12\": 189, \"frac34\": 190, \"iquest\": 191, \"times\": 215, \"divide\": 247, \"OElig\": 338, \"oelig\": 339, \"Scaron\": 352, \"scaron\": 353, \"Yuml\": 376, \"fnof\": 402, \"circ\": 710, \"tilde\": 732, \"Alpha\": 913, \"Beta\": 914, \"Gamma\": 915, \"Delta\": 916, \"Epsilon\": 917, \"Zeta\": 918, \"Eta\": 919, \"Theta\": 920, \"Iota\": 921, \"Kappa\": 922, \"Lambda\": 923, \"Mu\": 924, \"Nu\": 925, \"Xi\": 926, \"Omicron\": 927, \"Pi\": 928, \"Rho\": 929, \"Sigma\": 931, \"Tau\": 932, \"Upsilon\": 933, \"Phi\": 934, \"Chi\": 935, \"Psi\": 936, \"Omega\": 937, \"alpha\": 945, \"beta\": 946, \"gamma\": 947, \"delta\": 948, \"epsilon\": 949, \"zeta\": 950, \"eta\": 951, \"theta\": 952, \"iota\": 953, \"kappa\": 954, \"lambda\": 955, \"mu\": 956, \"nu\": 957, \"xi\": 958, \"omicron\": 959, \"pi\": 960, \"rho\": 961, \"sigmaf\": 962, \"sigma\": 963, \"tau\": 964, \"upsilon\": 965, \"phi\": 966, \"chi\": 967, \"psi\": 968, \"omega\": 969, \"thetasym\": 977, \"upsih\": 978, \"piv\": 982, \"ensp\": 8194, \"emsp\": 8195, \"thinsp\": 8201, \"zwnj\": 8204, \"zwj\": 8205, \"lrm\": 8206, \"rlm\": 8207, \"ndash\": 8211, \"mdash\": 8212, \"lsquo\": 8216, \"rsquo\": 8217, \"sbquo\": 8218, \"ldquo\": 8220, \"rdquo\": 8221, \"bdquo\": 8222, \"dagger\": 8224, \"Dagger\": 8225, \"bull\": 8226, \"hellip\": 8230, \"permil\": 8240, \"prime\": 8242, \"Prime\": 8243, \"lsaquo\": 8249, \"rsaquo\": 8250, \"oline\": 8254, \"frasl\": 8260, \"euro\": 8364, \"image\": 8465, \"weierp\": 8472, \"real\": 8476, \"trade\": 8482, \"alefsym\": 8501, \"larr\": 8592, \"uarr\": 8593, \"rarr\": 8594, \"darr\": 8595, \"harr\": 8596, \"crarr\": 8629, \"lArr\": 8656, \"uArr\": 8657, \"rArr\": 8658, \"dArr\": 8659, \"hArr\": 8660, \"forall\": 8704, \"part\": 8706, \"exist\": 8707, \"empty\": 8709, \"nabla\": 8711, \"isin\": 8712, \"notin\": 8713, \"ni\": 8715, \"prod\": 8719, \"sum\": 8721, \"minus\": 8722, \"lowast\": 8727, \"radic\": 8730, \"prop\": 8733, \"infin\": 8734, \"ang\": 8736, \"and\": 8743, \"or\": 8744, \"cap\": 8745, \"cup\": 8746, \"int\": 8747, \"there4\": 8756, \"sim\": 8764, \"cong\": 8773, \"asymp\": 8776, \"ne\": 8800, \"equiv\": 8801, \"le\": 8804, \"ge\": 8805, \"sub\": 8834, \"sup\": 8835, \"nsub\": 8836, \"sube\": 8838, \"supe\": 8839, \"oplus\": 8853, \"otimes\": 8855, \"perp\": 8869, \"sdot\": 8901, \"lceil\": 8968, \"rceil\": 8969, \"lfloor\": 8970, \"rfloor\": 8971, \"lang\": 9001, \"rang\": 9002, \"loz\": 9674, \"spades\": 9824, \"clubs\": 9827, \"hearts\": 9829, \"diams\": 9830 });\n});\nBitVector.SMALL_BLOCK_SIZE = 32;\nBitVector.LARGE_BLOCK_SIZE = 256;\nBitVector.BLOCK_RATE = 8;\n$__jsx_lazy_init(BurrowsWheelerTransform, \"END_MARKER\", function () {\n\treturn String.fromCharCode(0);\n});\nvar $__jsx_classMap = {\n\t\"tool/web/oktavia-english-search.jsx\": {\n\t\t_Main: _Main,\n\t\t_Main$: _Main$\n\t},\n\t\"tool/web/oktavia-search.jsx\": {\n\t\t_Result: _Result,\n\t\t_Result$SSSI: _Result$SSSI,\n\t\t_Proposal: _Proposal,\n\t\t_Proposal$SSI: _Proposal$SSI,\n\t\tOktaviaSearch: OktaviaSearch,\n\t\tOktaviaSearch$I: OktaviaSearch$I,\n\t\t_Main: _Main$0,\n\t\t_Main$: _Main$0$\n\t},\n\t\"src/oktavia.jsx\": {\n\t\tOktavia: Oktavia,\n\t\tOktavia$: Oktavia$\n\t},\n\t\"src/binary-util.jsx\": {\n\t\tBinary: Binary,\n\t\tBinary$: Binary$,\n\t\tLoadedStringResult: LoadedStringResult,\n\t\tLoadedStringResult$SI: LoadedStringResult$SI,\n\t\tLoadedStringListResult: LoadedStringListResult,\n\t\tLoadedStringListResult$SI: LoadedStringListResult$SI,\n\t\tLoadedStringListMapResult: LoadedStringListMapResult,\n\t\tLoadedStringListMapResult$SI: LoadedStringListMapResult$SI,\n\t\tLoadedNumberListResult: LoadedNumberListResult,\n\t\tLoadedNumberListResult$SI: LoadedNumberListResult$SI,\n\t\tCompressionReport: CompressionReport,\n\t\tCompressionReport$: CompressionReport$\n\t},\n\t\"src/query.jsx\": {\n\t\tQuery: Query,\n\t\tQuery$: Query$\n\t},\n\t\"src/query-string-parser.jsx\": {\n\t\tQueryStringParser: QueryStringParser,\n\t\tQueryStringParser$: QueryStringParser$\n\t},\n\t\"src/search-result.jsx\": {\n\t\tProposal: Proposal,\n\t\tProposal$II: Proposal$II,\n\t\tPosition: Position,\n\t\tPosition$SIB: Position$SIB,\n\t\tSearchUnit: SearchUnit,\n\t\tSearchUnit$I: SearchUnit$I,\n\t\tSingleResult: SingleResult,\n\t\tSingleResult$: SingleResult$,\n\t\tSingleResult$SBB: SingleResult$SBB,\n\t\tSearchSummary: SearchSummary,\n\t\tSearchSummary$: SearchSummary$,\n\t\tSearchSummary$LOktavia$: SearchSummary$LOktavia$\n\t},\n\t\"src/style.jsx\": {\n\t\tStyle: Style,\n\t\tStyle$S: Style$S,\n\t\t_HTMLHandler: _HTMLHandler,\n\t\t_HTMLHandler$HASB: _HTMLHandler$HASB\n\t},\n\t\"src/stemmer/stemmer.jsx\": {\n\t\tStemmer: Stemmer,\n\t\tStemmer$: Stemmer$\n\t},\n\t\"src/stemmer/base-stemmer.jsx\": {\n\t\tBaseStemmer: BaseStemmer,\n\t\tBaseStemmer$: BaseStemmer$\n\t},\n\t\"src/stemmer/english-stemmer.jsx\": {\n\t\tEnglishStemmer: EnglishStemmer,\n\t\tEnglishStemmer$: EnglishStemmer$\n\t},\n\t\"src/stemmer/among.jsx\": {\n\t\tAmong: Among,\n\t\tAmong$SII: Among$SII,\n\t\tAmong$SIIF$LBaseStemmer$B$LBaseStemmer$: Among$SIIF$LBaseStemmer$B$LBaseStemmer$\n\t},\n\t\"src/metadata.jsx\": {\n\t\tMetadata: Metadata,\n\t\tMetadata$LOktavia$: Metadata$LOktavia$,\n\t\tSection: Section,\n\t\tSection$LOktavia$: Section$LOktavia$,\n\t\tSplitter: Splitter,\n\t\tSplitter$LOktavia$: Splitter$LOktavia$,\n\t\tSplitter$LOktavia$S: Splitter$LOktavia$S,\n\t\tTable: Table,\n\t\tTable$LOktavia$AS: Table$LOktavia$AS,\n\t\tBlock: Block,\n\t\tBlock$LOktavia$: Block$LOktavia$\n\t},\n\t\"src/fm-index.jsx\": {\n\t\tFMIndex: FMIndex,\n\t\tFMIndex$: FMIndex$\n\t},\n\t\"src/sax.jsx\": {\n\t\tTag: Tag,\n\t\tTag$S: Tag$S,\n\t\t_Common: _Common,\n\t\t_Common$: _Common$,\n\t\t_State: _State,\n\t\t_State$: _State$,\n\t\tSAXHandler: SAXHandler,\n\t\tSAXHandler$: SAXHandler$,\n\t\tSAXParser: SAXParser,\n\t\tSAXParser$LSAXHandler$: SAXParser$LSAXHandler$,\n\t\tSAXParser$LSAXHandler$B: SAXParser$LSAXHandler$B,\n\t\tChar: Char,\n\t\tChar$: Char$,\n\t\t_Entities: _Entities,\n\t\t_Entities$: _Entities$\n\t},\n\t\"src/bit-vector.jsx\": {\n\t\tBitVector: BitVector,\n\t\tBitVector$: BitVector$\n\t},\n\t\"src/wavelet-matrix.jsx\": {\n\t\tWaveletMatrix: WaveletMatrix,\n\t\tWaveletMatrix$: WaveletMatrix$\n\t},\n\t\"src/burrows-wheeler-transform.jsx\": {\n\t\tBurrowsWheelerTransform: BurrowsWheelerTransform,\n\t\tBurrowsWheelerTransform$: BurrowsWheelerTransform$\n\t},\n\t\"src/sais.jsx\": {\n\t\tOArray: OArray,\n\t\tOArray$AI: OArray$AI,\n\t\tOArray$AII: OArray$AII,\n\t\tSAIS: SAIS,\n\t\tSAIS$: SAIS$\n\t}\n};\n\n\n/**\n * launches _Main.main(:string[]):void invoked by jsx --run|--executable\n */\nJSX.runMain = function (sourceFile, args) {\n\tvar module = JSX.require(sourceFile);\n\tif (! module) {\n\t\tthrow new ReferenceError(\"entry point module not found in \" + sourceFile);\n\t}\n\tif (! module._Main) {\n\t\tthrow new ReferenceError(\"entry point _Main not found in \" + sourceFile);\n\t}\n\tif (! module._Main.main$AS) {\n\t\tthrow new ReferenceError(\"entry point _Main.main(:string[]):void not found in \" + sourceFile);\n\t}\n\tmodule._Main.main$AS(args);\n};\n\n/**\n * launches _Test#test*():void invoked by jsx --test\n */\nJSX.runTests = function (sourceFile, tests) {\n\tvar module = JSX.require(sourceFile);\n\tvar testClass = module._Test$;\n\n\tif (!testClass) return; // skip if there's no test class\n\n\tif(tests.length === 0) {\n\t\tvar p = testClass.prototype;\n\t\tfor (var m in p) {\n\t\t\tif (p[m] instanceof Function\n\t\t\t\t&& /^test.*[$]$/.test(m)) {\n\t\t\t\ttests.push(m);\n\t\t\t}\n\t\t}\n\t}\n\telse { // set as process arguments\n\t\ttests = tests.map(function (name) {\n\t\t\treturn name + \"$\"; // mangle for function test*():void\n\t\t});\n\t}\n\n\tvar testCase = new testClass();\n\n\tif (testCase.beforeClass$AS != null)\n\t\ttestCase.beforeClass$AS(tests);\n\n\tfor (var i = 0; i < tests.length; ++i) {\n\t\t(function (method) {\n\t\t\tif (method in testCase) {\n\t\t\t\ttestCase.run$SF$V$(method, function() { testCase[method](); });\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new ReferenceError(\"No such test method: \" + method);\n\t\t\t}\n\t\t}(tests[i]));\n\t}\n\n\tif (testCase.afterClass$ != null)\n\t\ttestCase.afterClass$();\n};\n/**\n * call a function on load/DOMContentLoaded\n */\nfunction $__jsx_onload (event) {\n\twindow.removeEventListener(\"load\", $__jsx_onload);\n\tdocument.removeEventListener(\"DOMContentLoaded\", $__jsx_onload);\n\tJSX.runMain(\"tool/web/oktavia-english-search.jsx\", [])\n}\n\nwindow.addEventListener(\"load\", $__jsx_onload);\ndocument.addEventListener(\"DOMContentLoaded\", $__jsx_onload);\n\n})(JSX);\n"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 216727
        },
        "cache": {},
        "timings": {
          "blocked": 3.52499997825362,
          "dns": -1,
          "connect": -1,
          "send": 0.7250000198837401,
          "wait": 163.87499999837064,
          "receive": 462.80199999455317,
          "ssl": -1
        },
        "serverIPAddress": "133.242.206.244",
        "connection": "693217",
        "pageref": "page_1"
      },
      {
        "startedDateTime": "2017-06-28T09:37:40.741Z",
        "time": 631.1789999890607,
        "request": {
          "method": "GET",
          "url": "https://h2o.examp1e.net/assets/style.css",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": ":path",
              "value": "/assets/style.css"
            },
            {
              "name": "pragma",
              "value": "no-cache"
            },
            {
              "name": "accept-encoding",
              "value": "gzip, deflate, sdch, br"
            },
            {
              "name": "accept-language",
              "value": "en-CA,en;q=0.8,en-US;q=0.6,de;q=0.4,en-GB;q=0.2,ko;q=0.2"
            },
            {
              "name": "user-agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36"
            },
            {
              "name": "accept",
              "value": "*/*"
            },
            {
              "name": "cache-control",
              "value": "no-cache"
            },
            {
              "name": ":authority",
              "value": "h2o.examp1e.net"
            },
            {
              "name": "cookie",
              "value": "h2o_casper=AmgAAAAAAAAAAAAY1oiCMAAAApA"
            },
            {
              "name": ":scheme",
              "value": "https"
            },
            {
              "name": "referer",
              "value": "https://h2o.examp1e.net/"
            },
            {
              "name": ":method",
              "value": "GET"
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "h2o_casper",
              "value": "AmgAAAAAAAAAAAAY1oiCMAAAApA",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "date",
              "value": "Wed, 28 Jun 2017 09:37:40 GMT"
            },
            {
              "name": "last-modified",
              "value": "Tue, 20 Sep 2016 05:27:06 GMT"
            },
            {
              "name": "server",
              "value": "h2o/2.2.0-beta2"
            },
            {
              "name": "etag",
              "value": "\"57e0c8aa-1586\""
            },
            {
              "name": "content-type",
              "value": "text/css"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "set-cookie",
              "value": "h2o_casper=AmgAAAAAAAAAAAAY1oiCMAAAApA; Path=/; Expires=Tue, 01 Jan 2030 00:00:00 GMT; Secure"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "content-length",
              "value": "5510"
            }
          ],
          "cookies": [
            {
              "name": "h2o_casper",
              "value": "AmgAAAAAAAAAAAAY1oiCMAAAApA",
              "path": "/",
              "expires": "2030-01-01T00:00:00.000Z",
              "httpOnly": false,
              "secure": true
            }
          ],
          "content": {
            "size": 5510,
            "mimeType": "text/css",
            "text": "body {\n    background: #f2f2f2;\n    margin: 0;\n    padding: 0;\n    color: black;\n    font-family: Arial, sans-serif;\n    line-height: 1.3em;\n}\n\na {\n    color: #009;\n}\n\n#body {\n    background: #fff;\n    margin: 0 auto;\n    padding: 0;\n    width: 100%;\n    max-width: 800px;\n    text-align: justify;\n}\n\n#top {\n    background: #336;\n    color: #eee;\n    width: 100%;\n    padding: 0 0;\n    margin: 0 0;\n    position: relative;\n}\n\n#top h1 {\n    font-size: 60px;\n    padding: 35px 10px 0 50px;\n    margin: 0 0;\n    line-height: 1em;\n}\n\n#top h1 a {\n    color: #fff;\n    text-decoration: none;\n}\n\n#top .description {\n  padding: 0 10px 20px 50px;\n  margin: 0 0;\n}\n\n@media screen and (max-width: 800px) {\n    #top .description {\n        padding-bottom: 45px;\n    }\n}\n\n#top ul {\n    float: right;\n    margin: 20px 0 0 0;\n    padding: 0 50px 0 0;\n}\n\n#top ul li {\n    display: inline;\n    font-weight: bold;\n    margin: 0;\n    padding: 0 0 0 1em;\n}\n\n#top ul li a {\n    color: #600;\n}\n\n#menu {\n    width: 100%;\n    background: #fff;\n    padding: 0;\n    border-collapse: collapse;\n    table-layout: fixed;\n}\n\n#menu td {\n    text-align: center;\n    border: 1px solid #aaa;\n    background: #ddd;\n}\n\n@media screen and (max-width: 800px) {\n    #menu td {\n      word-break: break-word;\n    }\n\n    #menu td:first-child,\n    #menu td:last-child {\n        border-left: none;\n        border-right: none;\n    }\n}\n\n#menu td a {\n    display: block;\n    padding: 0.4em;\n    color: #333;\n    font-weight: bold;\n    text-decoration: none;\n}\n\n@media screen and (max-width: 800px) {\n    #menu td a {\n        padding-left: 0;\n        padding-right: 0;\n    }\n}\n\n#menu .selected {\n    background: white;\n    font-weight: bold;\n}\n\n#menu .selected a {\n    color: black;\n}\n\n#breadcrumb {\n    margin: 0;\n    padding: 2em 50px 0 50px;\n    font-weight: bold;\n}\n\n#main {\n    margin: 0;\n    width: 698px;\n    padding: 0 50px 1em 50px;\n    display: inline-block;\n    border: 1px solid #aaa;\n    border-top: none;\n}\n\n@media screen and (max-width: 800px) {\n    #main {\n        width: 100%;\n        padding-left: 0;\n        padding-right: 0;\n        border-left: none;\n        border-right: none;\n    }\n}\n\n#main h2 {\n    font-size: 120%;\n    margin: 2em 0 1em 0;\n}\n\n#main h2 a {\n    color: black;\n    text-decoration: none;\n}\n\n#main h3 {\n    font-size: 100%;\n    margin: 2em 0 1em 0;\n}\n\n#main div {\n    margin: 1em 0;\n}\n\n#main dt {\n    margin-top: 0.5em;\n    font-weight: bold;\n}\n\n#main ul li {\n    margin-top: 0.2em;\n    margin-bottom: 0.2em;\n}\n\n#main ul li ul li {\n    margin-top: 0.1em;\n    margin-bottom: 0.1em;\n}\n\n#main pre {\n    border: 1px solid gray;\n    margin: 0.2em 0;\n    padding: 0.5em;\n    background: #f6f6f6;\n    overflow-x: auto;\n}\n\n#main .example .caption {\n    text-align: center;\n    margin-bottom: 0.2em;\n}\n\n#main table {\n    margin: 1em auto;\n    border: 1px solid #ccc;\n    border-collapse: collapse;\n}\n\n#main table td,th {\n    border: 1px solid #ccc;\n    padding: 0.3em 0.5em;\n}\n\n#main table th {\n    background-color: #eee;\n    text-align: center;\n}\n\n#main table caption {\n    caption-side: top;\n    font-size: 100%;\n    font-weight: normal;\n    padding: 0.3em;\n}\n\n#main .notes {\n    margin: 3em 0 1em 0;\n    font-size: 70%;\n}\n\n#main .notes h3 {\n    margin: 1em 0 0.2em 0;\n    font-weight: bold;\n}\n\n#main .notes ol {\n    margin: 0;\n    padding-left: 0.5em;\n    list-style: inside decimal;\n}\n\n#main .doc-image {\n    display: block;\n    margin:  1em auto;\n    border:  0;\n}\n\n#main sup a {\n    text-decoration: none;\n}\n\n#main img {\n    height: auto;\n    max-width: 100%;\n}\n\n#main .section-head {\n    border-bottom: 1px solid gray;\n}\n\n#main .directive-head {\n    margin: 2em 0 1em 0;\n    border-bottom: 1px solid #999;\n}\n\n#main .directive-head h3 {\n    margin: 0;\n    font-size: 120%;\n}\n\n#main .directive-head h3 a {\n    color: black;\n    text-decoration: none;\n}\n\n#main .directive-since {\n    margin: 0;\n    font-size: 80%;\n    float: right;\n}\n\n#main .directive-desc dt {\n    margin: 0.5em 0 0.3em 0;\n}\n\n#main .directive-desc dd {\n    margin: 0.5em 0 1em 0;\n}\n\n#main .directive-desc dd :first-child {\n    margin-top: 0.3em;\n}\n\n#main .mruby-method-head {\n    margin: 2em 0 1em 0;\n    border-bottom: 1px solid #999;\n}\n\n#main .mruby-method-head h3 {\n    margin: 0;\n    font-size: 120%;\n}\n\n#main .mruby-method-head h3 a {\n    color: black;\n    text-decoration: none;\n}\n\n#main .mruby-method-since {\n    margin: 0;\n    font-size: 80%;\n    float: right;\n}\n\n#main .mruby-method-desc dt {\n    margin: 0.5em 0 0.3em 0;\n}\n\n#main .mruby-method-desc dd {\n    margin: 0.5em 0 1em 0;\n}\n\n#main .mruby-method-desc dd :first-child {\n    margin-top: 0.3em;\n}\n\n#main .mruby-method-parameters {\n    margin-left: 1.5em;\n}\n\n@media screen and (max-width: 800px) {\n    #main h2,\n    #main h3,\n    #main h4,\n    #main div,\n    #main p,\n    #main dt,\n    #main ul,\n    #main pre,\n    #main table,\n    #main .notes,\n    #main .directive-head,\n    #main .directive-desc {\n        margin-left: 25px;\n        margin-right: 25px\n    }\n    #main .mruby-method-head,\n    #main .mruby-method-desc {\n        margin-left: 25px;\n        margin-right: 25px\n    }\n\n    #main * div,\n    #main * p,\n    #main * table,\n    #main * ul,\n    #main * pre {\n        margin-left: 0;\n        margin-right: 0;\n    }\n}\n\n#footer {\n    border-width: 0 1px 1px 1px;\n    border-style: solid;\n    border-color: #aaa;\n    padding: 1em 50px 1em 50px;\n    text-align: center;\n}\n\n@media screen and (max-width: 800px) {\n    #footer {\n        border-right: none;\n        border-left: none;\n    }\n}\n"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 5586
        },
        "cache": {},
        "timings": {
          "blocked": 3.91400000080466,
          "dns": -1,
          "connect": -1,
          "send": 0.5660000024363399,
          "wait": 165.494999993825,
          "receive": 461.2039999919947,
          "ssl": -1
        },
        "serverIPAddress": "133.242.206.244",
        "connection": "693217",
        "pageref": "page_1"
      },
      {
        "startedDateTime": "2017-06-28T09:37:40.742Z",
        "time": 631.346999987727,
        "request": {
          "method": "GET",
          "url": "https://h2o.examp1e.net/assets/searchstyle.css",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": ":path",
              "value": "/assets/searchstyle.css"
            },
            {
              "name": "pragma",
              "value": "no-cache"
            },
            {
              "name": "accept-encoding",
              "value": "gzip, deflate, sdch, br"
            },
            {
              "name": "accept-language",
              "value": "en-CA,en;q=0.8,en-US;q=0.6,de;q=0.4,en-GB;q=0.2,ko;q=0.2"
            },
            {
              "name": "user-agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36"
            },
            {
              "name": "accept",
              "value": "*/*"
            },
            {
              "name": "cache-control",
              "value": "no-cache"
            },
            {
              "name": ":authority",
              "value": "h2o.examp1e.net"
            },
            {
              "name": "cookie",
              "value": "h2o_casper=AmgAAAAAAAAAAAAY1oiCMAAAApA"
            },
            {
              "name": ":scheme",
              "value": "https"
            },
            {
              "name": "referer",
              "value": "https://h2o.examp1e.net/"
            },
            {
              "name": ":method",
              "value": "GET"
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "h2o_casper",
              "value": "AmgAAAAAAAAAAAAY1oiCMAAAApA",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "date",
              "value": "Wed, 28 Jun 2017 09:37:40 GMT"
            },
            {
              "name": "last-modified",
              "value": "Tue, 20 Sep 2016 05:27:06 GMT"
            },
            {
              "name": "server",
              "value": "h2o/2.2.0-beta2"
            },
            {
              "name": "etag",
              "value": "\"57e0c8aa-8dd\""
            },
            {
              "name": "content-type",
              "value": "text/css"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "set-cookie",
              "value": "h2o_casper=AmgAAAAAAAAAAAAY1oiCMAAAApA; Path=/; Expires=Tue, 01 Jan 2030 00:00:00 GMT; Secure"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "content-length",
              "value": "2269"
            }
          ],
          "cookies": [
            {
              "name": "h2o_casper",
              "value": "AmgAAAAAAAAAAAAY1oiCMAAAApA",
              "path": "/",
              "expires": "2030-01-01T00:00:00.000Z",
              "httpOnly": false,
              "secure": true
            }
          ],
          "content": {
            "size": 2269,
            "mimeType": "text/css",
            "text": ".search {\n    position: absolute;\n    right: 10px;\n    bottom: 20px;\n    width: 240px;\n}\n\n#searchresult_box {\n    display: none;\n    position: absolute;\n    top: 135px;\n    right: 0px;\n    max-width: 500px;\n    padding: 10px;\n    background-color: #ffffff;\n    -moz-border-radius: 8px;\n    border-radius: 8px;\n    -moz-box-shadow: 3px 3px 5px 5px #b5b2b2;\n    box-shadow: 3px 3px 5px 5px #b5b2b2;\n    opacity: 0.95;\n    z-index: 100000;\n}\n\n#close_search_box {\n    position: absolute;\n    top: 10px;\n    right: 10px;\n    width: 20px;\n    height: 20px;\n    text-align: center;\n    vertical-align: middle;\n    color: #666;\n}\n\n#close_search_box:hover {\n    background-color: #d1e8ff;\n    border: 1px solid gray;\n}\n\n#close_search_box:active {\n    background-color: #b4c8db;\n    border: 1px solid gray;\n}\n\n\n#searchresult_summary {\n    color: #444;\n}\n\n#searchresult .entry {\n    margin: 10px 10px 10px 10px;\n    color: black;\n}\n\n#searchresult .entry .title {\n    font-size: normal;\n}\n\n#searchresult .entry .url {\n    font-size: 14px!important;\n    color: #093;\n    font-style: normal;\n    font-family: arial,sans-serif;\n}\n\n#searchresult .entry .content {\n    font-size: small;\n    font-family: arial,sans-serif;\n    color: #222;\n}\n\n#searchresult .entry .content .hit {\n    font-weight: bolder;\n    text-decoration: underline;\n}\n\n#searchresult .proposal {\n    margin: 10px 10px 10px 10px;\n    color: #222;\n    font-size: small;\n    font-family: arial,sans-serif;\n}\n#searchresult .proposal .option {\n    background-color: #e8f4ff;\n    border-bottom: 1px solid blue;\n}\n\n#searchresult .proposal .option:hover {\n    background-color: #d1e8ff;\n}\n\n#searchresult .proposal .option:active {\n    background-color: #b4c8db;\n}\n\n#searchresult_nav .selected {\n    background-color: #b4c8db;\n    border: 1px solid #6c83db;\n}\n\n#searchresult_nav span {\n    background-color: #ffffff;\n    border: 1px solid #888888;\n    padding: 5px;\n    margin: 5px;\n    color: #222;\n}\n\n#searchresult_nav span:hover {\n    background-color: #d1e8ff;\n    border: 1px solid #7d98ff;\n}\n\n#searchresult_nav span:active {\n    background-color: #b4c8db;\n    border: 1px solid #6c83db;\n}\n\n#searchresult_box span.pr {\n    position: absolute;\n    right: 10px;\n    bottom: 10px;\n    font-size: x-small;\n    color: #555;\n}\n"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 2314
        },
        "cache": {},
        "timings": {
          "blocked": 3.83699999656528,
          "dns": -1,
          "connect": -1,
          "send": 0.4559999797493197,
          "wait": 166.68300001765638,
          "receive": 460.3709999937561,
          "ssl": -1
        },
        "serverIPAddress": "133.242.206.244",
        "connection": "693217",
        "pageref": "page_1"
      },
      {
        "startedDateTime": "2017-06-28T09:37:40.743Z",
        "time": 175.74500001501292,
        "request": {
          "method": "GET",
          "url": "https://h2o.examp1e.net/assets/searchstyle.css",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": ":path",
              "value": "/assets/searchstyle.css"
            },
            {
              "name": "pragma",
              "value": "no-cache"
            },
            {
              "name": "accept-encoding",
              "value": "gzip, deflate, sdch, br"
            },
            {
              "name": "accept-language",
              "value": "en-CA,en;q=0.8,en-US;q=0.6,de;q=0.4,en-GB;q=0.2,ko;q=0.2"
            },
            {
              "name": "user-agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36"
            },
            {
              "name": "accept",
              "value": "text/css,*/*;q=0.1"
            },
            {
              "name": "cache-control",
              "value": "no-cache"
            },
            {
              "name": ":authority",
              "value": "h2o.examp1e.net"
            },
            {
              "name": "cookie",
              "value": "h2o_casper=AmgAAAAAAAAAAAAY1oiCMAAAApA"
            },
            {
              "name": ":scheme",
              "value": "https"
            },
            {
              "name": "referer",
              "value": "https://h2o.examp1e.net/"
            },
            {
              "name": ":method",
              "value": "GET"
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "h2o_casper",
              "value": "AmgAAAAAAAAAAAAY1oiCMAAAApA",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "date",
              "value": "Wed, 28 Jun 2017 09:37:40 GMT"
            },
            {
              "name": "last-modified",
              "value": "Tue, 20 Sep 2016 05:27:06 GMT"
            },
            {
              "name": "server",
              "value": "h2o/2.2.0-beta2"
            },
            {
              "name": "etag",
              "value": "\"57e0c8aa-8dd\""
            },
            {
              "name": "content-type",
              "value": "text/css"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "set-cookie",
              "value": "h2o_casper=AmgAAAAAAAAAAAAY1oiCMAAAApA; Path=/; Expires=Tue, 01 Jan 2030 00:00:00 GMT; Secure"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "content-length",
              "value": "2269"
            }
          ],
          "cookies": [
            {
              "name": "h2o_casper",
              "value": "AmgAAAAAAAAAAAAY1oiCMAAAApA",
              "path": "/",
              "expires": "2030-01-01T00:00:00.000Z",
              "httpOnly": false,
              "secure": true
            }
          ],
          "content": {
            "size": 2269,
            "mimeType": "text/css",
            "text": ".search {\n    position: absolute;\n    right: 10px;\n    bottom: 20px;\n    width: 240px;\n}\n\n#searchresult_box {\n    display: none;\n    position: absolute;\n    top: 135px;\n    right: 0px;\n    max-width: 500px;\n    padding: 10px;\n    background-color: #ffffff;\n    -moz-border-radius: 8px;\n    border-radius: 8px;\n    -moz-box-shadow: 3px 3px 5px 5px #b5b2b2;\n    box-shadow: 3px 3px 5px 5px #b5b2b2;\n    opacity: 0.95;\n    z-index: 100000;\n}\n\n#close_search_box {\n    position: absolute;\n    top: 10px;\n    right: 10px;\n    width: 20px;\n    height: 20px;\n    text-align: center;\n    vertical-align: middle;\n    color: #666;\n}\n\n#close_search_box:hover {\n    background-color: #d1e8ff;\n    border: 1px solid gray;\n}\n\n#close_search_box:active {\n    background-color: #b4c8db;\n    border: 1px solid gray;\n}\n\n\n#searchresult_summary {\n    color: #444;\n}\n\n#searchresult .entry {\n    margin: 10px 10px 10px 10px;\n    color: black;\n}\n\n#searchresult .entry .title {\n    font-size: normal;\n}\n\n#searchresult .entry .url {\n    font-size: 14px!important;\n    color: #093;\n    font-style: normal;\n    font-family: arial,sans-serif;\n}\n\n#searchresult .entry .content {\n    font-size: small;\n    font-family: arial,sans-serif;\n    color: #222;\n}\n\n#searchresult .entry .content .hit {\n    font-weight: bolder;\n    text-decoration: underline;\n}\n\n#searchresult .proposal {\n    margin: 10px 10px 10px 10px;\n    color: #222;\n    font-size: small;\n    font-family: arial,sans-serif;\n}\n#searchresult .proposal .option {\n    background-color: #e8f4ff;\n    border-bottom: 1px solid blue;\n}\n\n#searchresult .proposal .option:hover {\n    background-color: #d1e8ff;\n}\n\n#searchresult .proposal .option:active {\n    background-color: #b4c8db;\n}\n\n#searchresult_nav .selected {\n    background-color: #b4c8db;\n    border: 1px solid #6c83db;\n}\n\n#searchresult_nav span {\n    background-color: #ffffff;\n    border: 1px solid #888888;\n    padding: 5px;\n    margin: 5px;\n    color: #222;\n}\n\n#searchresult_nav span:hover {\n    background-color: #d1e8ff;\n    border: 1px solid #7d98ff;\n}\n\n#searchresult_nav span:active {\n    background-color: #b4c8db;\n    border: 1px solid #6c83db;\n}\n\n#searchresult_box span.pr {\n    position: absolute;\n    right: 10px;\n    bottom: 10px;\n    font-size: x-small;\n    color: #555;\n}\n"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 2302
        },
        "cache": {},
        "timings": {
          "blocked": 2.9660000000149,
          "dns": -1,
          "connect": -1,
          "send": 0.2810000150930203,
          "wait": 167.4919999786651,
          "receive": 5.006000021239913,
          "ssl": -1
        },
        "serverIPAddress": "133.242.206.244",
        "connection": "693217",
        "pageref": "page_1"
      },
      {
        "startedDateTime": "2017-06-28T09:37:40.743Z",
        "time": 684.1779999958817,
        "request": {
          "method": "GET",
          "url": "https://h2o.examp1e.net/search/jquery-1.9.1.min.js",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": ":path",
              "value": "/search/jquery-1.9.1.min.js"
            },
            {
              "name": "pragma",
              "value": "no-cache"
            },
            {
              "name": "accept-encoding",
              "value": "gzip, deflate, sdch, br"
            },
            {
              "name": "accept-language",
              "value": "en-CA,en;q=0.8,en-US;q=0.6,de;q=0.4,en-GB;q=0.2,ko;q=0.2"
            },
            {
              "name": "user-agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36"
            },
            {
              "name": "accept",
              "value": "*/*"
            },
            {
              "name": "cache-control",
              "value": "no-cache"
            },
            {
              "name": ":authority",
              "value": "h2o.examp1e.net"
            },
            {
              "name": "cookie",
              "value": "h2o_casper=AmgAAAAAAAAAAAAY1oiCMAAAApA"
            },
            {
              "name": ":scheme",
              "value": "https"
            },
            {
              "name": "referer",
              "value": "https://h2o.examp1e.net/"
            },
            {
              "name": ":method",
              "value": "GET"
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "h2o_casper",
              "value": "AmgAAAAAAAAAAAAY1oiCMAAAApA",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "date",
              "value": "Wed, 28 Jun 2017 09:37:40 GMT"
            },
            {
              "name": "last-modified",
              "value": "Thu, 14 May 2015 04:10:14 GMT"
            },
            {
              "name": "server",
              "value": "h2o/2.2.0-beta2"
            },
            {
              "name": "etag",
              "value": "\"55542026-169d5\""
            },
            {
              "name": "content-type",
              "value": "application/javascript"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "set-cookie",
              "value": "h2o_casper=AmgAAAAAAAAAAAAY1oiCMAAAApA; Path=/; Expires=Tue, 01 Jan 2030 00:00:00 GMT; Secure"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "content-length",
              "value": "92629"
            }
          ],
          "cookies": [
            {
              "name": "h2o_casper",
              "value": "AmgAAAAAAAAAAAAY1oiCMAAAApA",
              "path": "/",
              "expires": "2030-01-01T00:00:00.000Z",
              "httpOnly": false,
              "secure": true
            }
          ],
          "content": {
            "size": 92629,
            "mimeType": "application/javascript",
            "text": "/*! jQuery v1.9.1 | (c) 2005, 2012 jQuery Foundation, Inc. | jquery.org/license\n//@ sourceMappingURL=jquery.min.map\n*/(function(e,t){var n,r,i=typeof t,o=e.document,a=e.location,s=e.jQuery,u=e.$,l={},c=[],p=\"1.9.1\",f=c.concat,d=c.push,h=c.slice,g=c.indexOf,m=l.toString,y=l.hasOwnProperty,v=p.trim,b=function(e,t){return new b.fn.init(e,t,r)},x=/[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source,w=/\\S+/g,T=/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,N=/^(?:(<[\\w\\W]+>)[^>]*|#([\\w-]*))$/,C=/^<(\\w+)\\s*\\/?>(?:<\\/\\1>|)$/,k=/^[\\],:{}\\s]*$/,E=/(?:^|:|,)(?:\\s*\\[)+/g,S=/\\\\(?:[\"\\\\\\/bfnrt]|u[\\da-fA-F]{4})/g,A=/\"[^\"\\\\\\r\\n]*\"|true|false|null|-?(?:\\d+\\.|)\\d+(?:[eE][+-]?\\d+|)/g,j=/^-ms-/,D=/-([\\da-z])/gi,L=function(e,t){return t.toUpperCase()},H=function(e){(o.addEventListener||\"load\"===e.type||\"complete\"===o.readyState)&&(q(),b.ready())},q=function(){o.addEventListener?(o.removeEventListener(\"DOMContentLoaded\",H,!1),e.removeEventListener(\"load\",H,!1)):(o.detachEvent(\"onreadystatechange\",H),e.detachEvent(\"onload\",H))};b.fn=b.prototype={jquery:p,constructor:b,init:function(e,n,r){var i,a;if(!e)return this;if(\"string\"==typeof e){if(i=\"<\"===e.charAt(0)&&\">\"===e.charAt(e.length-1)&&e.length>=3?[null,e,null]:N.exec(e),!i||!i[1]&&n)return!n||n.jquery?(n||r).find(e):this.constructor(n).find(e);if(i[1]){if(n=n instanceof b?n[0]:n,b.merge(this,b.parseHTML(i[1],n&&n.nodeType?n.ownerDocument||n:o,!0)),C.test(i[1])&&b.isPlainObject(n))for(i in n)b.isFunction(this[i])?this[i](n[i]):this.attr(i,n[i]);return this}if(a=o.getElementById(i[2]),a&&a.parentNode){if(a.id!==i[2])return r.find(e);this.length=1,this[0]=a}return this.context=o,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):b.isFunction(e)?r.ready(e):(e.selector!==t&&(this.selector=e.selector,this.context=e.context),b.makeArray(e,this))},selector:\"\",length:0,size:function(){return this.length},toArray:function(){return h.call(this)},get:function(e){return null==e?this.toArray():0>e?this[this.length+e]:this[e]},pushStack:function(e){var t=b.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e,t){return b.each(this,e,t)},ready:function(e){return b.ready.promise().done(e),this},slice:function(){return this.pushStack(h.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(0>e?t:0);return this.pushStack(n>=0&&t>n?[this[n]]:[])},map:function(e){return this.pushStack(b.map(this,function(t,n){return e.call(t,n,t)}))},end:function(){return this.prevObject||this.constructor(null)},push:d,sort:[].sort,splice:[].splice},b.fn.init.prototype=b.fn,b.extend=b.fn.extend=function(){var e,n,r,i,o,a,s=arguments[0]||{},u=1,l=arguments.length,c=!1;for(\"boolean\"==typeof s&&(c=s,s=arguments[1]||{},u=2),\"object\"==typeof s||b.isFunction(s)||(s={}),l===u&&(s=this,--u);l>u;u++)if(null!=(o=arguments[u]))for(i in o)e=s[i],r=o[i],s!==r&&(c&&r&&(b.isPlainObject(r)||(n=b.isArray(r)))?(n?(n=!1,a=e&&b.isArray(e)?e:[]):a=e&&b.isPlainObject(e)?e:{},s[i]=b.extend(c,a,r)):r!==t&&(s[i]=r));return s},b.extend({noConflict:function(t){return e.$===b&&(e.$=u),t&&e.jQuery===b&&(e.jQuery=s),b},isReady:!1,readyWait:1,holdReady:function(e){e?b.readyWait++:b.ready(!0)},ready:function(e){if(e===!0?!--b.readyWait:!b.isReady){if(!o.body)return setTimeout(b.ready);b.isReady=!0,e!==!0&&--b.readyWait>0||(n.resolveWith(o,[b]),b.fn.trigger&&b(o).trigger(\"ready\").off(\"ready\"))}},isFunction:function(e){return\"function\"===b.type(e)},isArray:Array.isArray||function(e){return\"array\"===b.type(e)},isWindow:function(e){return null!=e&&e==e.window},isNumeric:function(e){return!isNaN(parseFloat(e))&&isFinite(e)},type:function(e){return null==e?e+\"\":\"object\"==typeof e||\"function\"==typeof e?l[m.call(e)]||\"object\":typeof e},isPlainObject:function(e){if(!e||\"object\"!==b.type(e)||e.nodeType||b.isWindow(e))return!1;try{if(e.constructor&&!y.call(e,\"constructor\")&&!y.call(e.constructor.prototype,\"isPrototypeOf\"))return!1}catch(n){return!1}var r;for(r in e);return r===t||y.call(e,r)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},error:function(e){throw Error(e)},parseHTML:function(e,t,n){if(!e||\"string\"!=typeof e)return null;\"boolean\"==typeof t&&(n=t,t=!1),t=t||o;var r=C.exec(e),i=!n&&[];return r?[t.createElement(r[1])]:(r=b.buildFragment([e],t,i),i&&b(i).remove(),b.merge([],r.childNodes))},parseJSON:function(n){return e.JSON&&e.JSON.parse?e.JSON.parse(n):null===n?n:\"string\"==typeof n&&(n=b.trim(n),n&&k.test(n.replace(S,\"@\").replace(A,\"]\").replace(E,\"\")))?Function(\"return \"+n)():(b.error(\"Invalid JSON: \"+n),t)},parseXML:function(n){var r,i;if(!n||\"string\"!=typeof n)return null;try{e.DOMParser?(i=new DOMParser,r=i.parseFromString(n,\"text/xml\")):(r=new ActiveXObject(\"Microsoft.XMLDOM\"),r.async=\"false\",r.loadXML(n))}catch(o){r=t}return r&&r.documentElement&&!r.getElementsByTagName(\"parsererror\").length||b.error(\"Invalid XML: \"+n),r},noop:function(){},globalEval:function(t){t&&b.trim(t)&&(e.execScript||function(t){e.eval.call(e,t)})(t)},camelCase:function(e){return e.replace(j,\"ms-\").replace(D,L)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t,n){var r,i=0,o=e.length,a=M(e);if(n){if(a){for(;o>i;i++)if(r=t.apply(e[i],n),r===!1)break}else for(i in e)if(r=t.apply(e[i],n),r===!1)break}else if(a){for(;o>i;i++)if(r=t.call(e[i],i,e[i]),r===!1)break}else for(i in e)if(r=t.call(e[i],i,e[i]),r===!1)break;return e},trim:v&&!v.call(\"\\ufeff\\u00a0\")?function(e){return null==e?\"\":v.call(e)}:function(e){return null==e?\"\":(e+\"\").replace(T,\"\")},makeArray:function(e,t){var n=t||[];return null!=e&&(M(Object(e))?b.merge(n,\"string\"==typeof e?[e]:e):d.call(n,e)),n},inArray:function(e,t,n){var r;if(t){if(g)return g.call(t,e,n);for(r=t.length,n=n?0>n?Math.max(0,r+n):n:0;r>n;n++)if(n in t&&t[n]===e)return n}return-1},merge:function(e,n){var r=n.length,i=e.length,o=0;if(\"number\"==typeof r)for(;r>o;o++)e[i++]=n[o];else while(n[o]!==t)e[i++]=n[o++];return e.length=i,e},grep:function(e,t,n){var r,i=[],o=0,a=e.length;for(n=!!n;a>o;o++)r=!!t(e[o],o),n!==r&&i.push(e[o]);return i},map:function(e,t,n){var r,i=0,o=e.length,a=M(e),s=[];if(a)for(;o>i;i++)r=t(e[i],i,n),null!=r&&(s[s.length]=r);else for(i in e)r=t(e[i],i,n),null!=r&&(s[s.length]=r);return f.apply([],s)},guid:1,proxy:function(e,n){var r,i,o;return\"string\"==typeof n&&(o=e[n],n=e,e=o),b.isFunction(e)?(r=h.call(arguments,2),i=function(){return e.apply(n||this,r.concat(h.call(arguments)))},i.guid=e.guid=e.guid||b.guid++,i):t},access:function(e,n,r,i,o,a,s){var u=0,l=e.length,c=null==r;if(\"object\"===b.type(r)){o=!0;for(u in r)b.access(e,n,u,r[u],!0,a,s)}else if(i!==t&&(o=!0,b.isFunction(i)||(s=!0),c&&(s?(n.call(e,i),n=null):(c=n,n=function(e,t,n){return c.call(b(e),n)})),n))for(;l>u;u++)n(e[u],r,s?i:i.call(e[u],u,n(e[u],r)));return o?e:c?n.call(e):l?n(e[0],r):a},now:function(){return(new Date).getTime()}}),b.ready.promise=function(t){if(!n)if(n=b.Deferred(),\"complete\"===o.readyState)setTimeout(b.ready);else if(o.addEventListener)o.addEventListener(\"DOMContentLoaded\",H,!1),e.addEventListener(\"load\",H,!1);else{o.attachEvent(\"onreadystatechange\",H),e.attachEvent(\"onload\",H);var r=!1;try{r=null==e.frameElement&&o.documentElement}catch(i){}r&&r.doScroll&&function a(){if(!b.isReady){try{r.doScroll(\"left\")}catch(e){return setTimeout(a,50)}q(),b.ready()}}()}return n.promise(t)},b.each(\"Boolean Number String Function Array Date RegExp Object Error\".split(\" \"),function(e,t){l[\"[object \"+t+\"]\"]=t.toLowerCase()});function M(e){var t=e.length,n=b.type(e);return b.isWindow(e)?!1:1===e.nodeType&&t?!0:\"array\"===n||\"function\"!==n&&(0===t||\"number\"==typeof t&&t>0&&t-1 in e)}r=b(o);var _={};function F(e){var t=_[e]={};return b.each(e.match(w)||[],function(e,n){t[n]=!0}),t}b.Callbacks=function(e){e=\"string\"==typeof e?_[e]||F(e):b.extend({},e);var n,r,i,o,a,s,u=[],l=!e.once&&[],c=function(t){for(r=e.memory&&t,i=!0,a=s||0,s=0,o=u.length,n=!0;u&&o>a;a++)if(u[a].apply(t[0],t[1])===!1&&e.stopOnFalse){r=!1;break}n=!1,u&&(l?l.length&&c(l.shift()):r?u=[]:p.disable())},p={add:function(){if(u){var t=u.length;(function i(t){b.each(t,function(t,n){var r=b.type(n);\"function\"===r?e.unique&&p.has(n)||u.push(n):n&&n.length&&\"string\"!==r&&i(n)})})(arguments),n?o=u.length:r&&(s=t,c(r))}return this},remove:function(){return u&&b.each(arguments,function(e,t){var r;while((r=b.inArray(t,u,r))>-1)u.splice(r,1),n&&(o>=r&&o--,a>=r&&a--)}),this},has:function(e){return e?b.inArray(e,u)>-1:!(!u||!u.length)},empty:function(){return u=[],this},disable:function(){return u=l=r=t,this},disabled:function(){return!u},lock:function(){return l=t,r||p.disable(),this},locked:function(){return!l},fireWith:function(e,t){return t=t||[],t=[e,t.slice?t.slice():t],!u||i&&!l||(n?l.push(t):c(t)),this},fire:function(){return p.fireWith(this,arguments),this},fired:function(){return!!i}};return p},b.extend({Deferred:function(e){var t=[[\"resolve\",\"done\",b.Callbacks(\"once memory\"),\"resolved\"],[\"reject\",\"fail\",b.Callbacks(\"once memory\"),\"rejected\"],[\"notify\",\"progress\",b.Callbacks(\"memory\")]],n=\"pending\",r={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},then:function(){var e=arguments;return b.Deferred(function(n){b.each(t,function(t,o){var a=o[0],s=b.isFunction(e[t])&&e[t];i[o[1]](function(){var e=s&&s.apply(this,arguments);e&&b.isFunction(e.promise)?e.promise().done(n.resolve).fail(n.reject).progress(n.notify):n[a+\"With\"](this===r?n.promise():this,s?[e]:arguments)})}),e=null}).promise()},promise:function(e){return null!=e?b.extend(e,r):r}},i={};return r.pipe=r.then,b.each(t,function(e,o){var a=o[2],s=o[3];r[o[1]]=a.add,s&&a.add(function(){n=s},t[1^e][2].disable,t[2][2].lock),i[o[0]]=function(){return i[o[0]+\"With\"](this===i?r:this,arguments),this},i[o[0]+\"With\"]=a.fireWith}),r.promise(i),e&&e.call(i,i),i},when:function(e){var t=0,n=h.call(arguments),r=n.length,i=1!==r||e&&b.isFunction(e.promise)?r:0,o=1===i?e:b.Deferred(),a=function(e,t,n){return function(r){t[e]=this,n[e]=arguments.length>1?h.call(arguments):r,n===s?o.notifyWith(t,n):--i||o.resolveWith(t,n)}},s,u,l;if(r>1)for(s=Array(r),u=Array(r),l=Array(r);r>t;t++)n[t]&&b.isFunction(n[t].promise)?n[t].promise().done(a(t,l,n)).fail(o.reject).progress(a(t,u,s)):--i;return i||o.resolveWith(l,n),o.promise()}}),b.support=function(){var t,n,r,a,s,u,l,c,p,f,d=o.createElement(\"div\");if(d.setAttribute(\"className\",\"t\"),d.innerHTML=\"  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>\",n=d.getElementsByTagName(\"*\"),r=d.getElementsByTagName(\"a\")[0],!n||!r||!n.length)return{};s=o.createElement(\"select\"),l=s.appendChild(o.createElement(\"option\")),a=d.getElementsByTagName(\"input\")[0],r.style.cssText=\"top:1px;float:left;opacity:.5\",t={getSetAttribute:\"t\"!==d.className,leadingWhitespace:3===d.firstChild.nodeType,tbody:!d.getElementsByTagName(\"tbody\").length,htmlSerialize:!!d.getElementsByTagName(\"link\").length,style:/top/.test(r.getAttribute(\"style\")),hrefNormalized:\"/a\"===r.getAttribute(\"href\"),opacity:/^0.5/.test(r.style.opacity),cssFloat:!!r.style.cssFloat,checkOn:!!a.value,optSelected:l.selected,enctype:!!o.createElement(\"form\").enctype,html5Clone:\"<:nav></:nav>\"!==o.createElement(\"nav\").cloneNode(!0).outerHTML,boxModel:\"CSS1Compat\"===o.compatMode,deleteExpando:!0,noCloneEvent:!0,inlineBlockNeedsLayout:!1,shrinkWrapBlocks:!1,reliableMarginRight:!0,boxSizingReliable:!0,pixelPosition:!1},a.checked=!0,t.noCloneChecked=a.cloneNode(!0).checked,s.disabled=!0,t.optDisabled=!l.disabled;try{delete d.test}catch(h){t.deleteExpando=!1}a=o.createElement(\"input\"),a.setAttribute(\"value\",\"\"),t.input=\"\"===a.getAttribute(\"value\"),a.value=\"t\",a.setAttribute(\"type\",\"radio\"),t.radioValue=\"t\"===a.value,a.setAttribute(\"checked\",\"t\"),a.setAttribute(\"name\",\"t\"),u=o.createDocumentFragment(),u.appendChild(a),t.appendChecked=a.checked,t.checkClone=u.cloneNode(!0).cloneNode(!0).lastChild.checked,d.attachEvent&&(d.attachEvent(\"onclick\",function(){t.noCloneEvent=!1}),d.cloneNode(!0).click());for(f in{submit:!0,change:!0,focusin:!0})d.setAttribute(c=\"on\"+f,\"t\"),t[f+\"Bubbles\"]=c in e||d.attributes[c].expando===!1;return d.style.backgroundClip=\"content-box\",d.cloneNode(!0).style.backgroundClip=\"\",t.clearCloneStyle=\"content-box\"===d.style.backgroundClip,b(function(){var n,r,a,s=\"padding:0;margin:0;border:0;display:block;box-sizing:content-box;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;\",u=o.getElementsByTagName(\"body\")[0];u&&(n=o.createElement(\"div\"),n.style.cssText=\"border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px\",u.appendChild(n).appendChild(d),d.innerHTML=\"<table><tr><td></td><td>t</td></tr></table>\",a=d.getElementsByTagName(\"td\"),a[0].style.cssText=\"padding:0;margin:0;border:0;display:none\",p=0===a[0].offsetHeight,a[0].style.display=\"\",a[1].style.display=\"none\",t.reliableHiddenOffsets=p&&0===a[0].offsetHeight,d.innerHTML=\"\",d.style.cssText=\"box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;\",t.boxSizing=4===d.offsetWidth,t.doesNotIncludeMarginInBodyOffset=1!==u.offsetTop,e.getComputedStyle&&(t.pixelPosition=\"1%\"!==(e.getComputedStyle(d,null)||{}).top,t.boxSizingReliable=\"4px\"===(e.getComputedStyle(d,null)||{width:\"4px\"}).width,r=d.appendChild(o.createElement(\"div\")),r.style.cssText=d.style.cssText=s,r.style.marginRight=r.style.width=\"0\",d.style.width=\"1px\",t.reliableMarginRight=!parseFloat((e.getComputedStyle(r,null)||{}).marginRight)),typeof d.style.zoom!==i&&(d.innerHTML=\"\",d.style.cssText=s+\"width:1px;padding:1px;display:inline;zoom:1\",t.inlineBlockNeedsLayout=3===d.offsetWidth,d.style.display=\"block\",d.innerHTML=\"<div></div>\",d.firstChild.style.width=\"5px\",t.shrinkWrapBlocks=3!==d.offsetWidth,t.inlineBlockNeedsLayout&&(u.style.zoom=1)),u.removeChild(n),n=d=a=r=null)}),n=s=u=l=r=a=null,t}();var O=/(?:\\{[\\s\\S]*\\}|\\[[\\s\\S]*\\])$/,B=/([A-Z])/g;function P(e,n,r,i){if(b.acceptData(e)){var o,a,s=b.expando,u=\"string\"==typeof n,l=e.nodeType,p=l?b.cache:e,f=l?e[s]:e[s]&&s;if(f&&p[f]&&(i||p[f].data)||!u||r!==t)return f||(l?e[s]=f=c.pop()||b.guid++:f=s),p[f]||(p[f]={},l||(p[f].toJSON=b.noop)),(\"object\"==typeof n||\"function\"==typeof n)&&(i?p[f]=b.extend(p[f],n):p[f].data=b.extend(p[f].data,n)),o=p[f],i||(o.data||(o.data={}),o=o.data),r!==t&&(o[b.camelCase(n)]=r),u?(a=o[n],null==a&&(a=o[b.camelCase(n)])):a=o,a}}function R(e,t,n){if(b.acceptData(e)){var r,i,o,a=e.nodeType,s=a?b.cache:e,u=a?e[b.expando]:b.expando;if(s[u]){if(t&&(o=n?s[u]:s[u].data)){b.isArray(t)?t=t.concat(b.map(t,b.camelCase)):t in o?t=[t]:(t=b.camelCase(t),t=t in o?[t]:t.split(\" \"));for(r=0,i=t.length;i>r;r++)delete o[t[r]];if(!(n?$:b.isEmptyObject)(o))return}(n||(delete s[u].data,$(s[u])))&&(a?b.cleanData([e],!0):b.support.deleteExpando||s!=s.window?delete s[u]:s[u]=null)}}}b.extend({cache:{},expando:\"jQuery\"+(p+Math.random()).replace(/\\D/g,\"\"),noData:{embed:!0,object:\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\",applet:!0},hasData:function(e){return e=e.nodeType?b.cache[e[b.expando]]:e[b.expando],!!e&&!$(e)},data:function(e,t,n){return P(e,t,n)},removeData:function(e,t){return R(e,t)},_data:function(e,t,n){return P(e,t,n,!0)},_removeData:function(e,t){return R(e,t,!0)},acceptData:function(e){if(e.nodeType&&1!==e.nodeType&&9!==e.nodeType)return!1;var t=e.nodeName&&b.noData[e.nodeName.toLowerCase()];return!t||t!==!0&&e.getAttribute(\"classid\")===t}}),b.fn.extend({data:function(e,n){var r,i,o=this[0],a=0,s=null;if(e===t){if(this.length&&(s=b.data(o),1===o.nodeType&&!b._data(o,\"parsedAttrs\"))){for(r=o.attributes;r.length>a;a++)i=r[a].name,i.indexOf(\"data-\")||(i=b.camelCase(i.slice(5)),W(o,i,s[i]));b._data(o,\"parsedAttrs\",!0)}return s}return\"object\"==typeof e?this.each(function(){b.data(this,e)}):b.access(this,function(n){return n===t?o?W(o,e,b.data(o,e)):null:(this.each(function(){b.data(this,e,n)}),t)},null,n,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){b.removeData(this,e)})}});function W(e,n,r){if(r===t&&1===e.nodeType){var i=\"data-\"+n.replace(B,\"-$1\").toLowerCase();if(r=e.getAttribute(i),\"string\"==typeof r){try{r=\"true\"===r?!0:\"false\"===r?!1:\"null\"===r?null:+r+\"\"===r?+r:O.test(r)?b.parseJSON(r):r}catch(o){}b.data(e,n,r)}else r=t}return r}function $(e){var t;for(t in e)if((\"data\"!==t||!b.isEmptyObject(e[t]))&&\"toJSON\"!==t)return!1;return!0}b.extend({queue:function(e,n,r){var i;return e?(n=(n||\"fx\")+\"queue\",i=b._data(e,n),r&&(!i||b.isArray(r)?i=b._data(e,n,b.makeArray(r)):i.push(r)),i||[]):t},dequeue:function(e,t){t=t||\"fx\";var n=b.queue(e,t),r=n.length,i=n.shift(),o=b._queueHooks(e,t),a=function(){b.dequeue(e,t)};\"inprogress\"===i&&(i=n.shift(),r--),o.cur=i,i&&(\"fx\"===t&&n.unshift(\"inprogress\"),delete o.stop,i.call(e,a,o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+\"queueHooks\";return b._data(e,n)||b._data(e,n,{empty:b.Callbacks(\"once memory\").add(function(){b._removeData(e,t+\"queue\"),b._removeData(e,n)})})}}),b.fn.extend({queue:function(e,n){var r=2;return\"string\"!=typeof e&&(n=e,e=\"fx\",r--),r>arguments.length?b.queue(this[0],e):n===t?this:this.each(function(){var t=b.queue(this,e,n);b._queueHooks(this,e),\"fx\"===e&&\"inprogress\"!==t[0]&&b.dequeue(this,e)})},dequeue:function(e){return this.each(function(){b.dequeue(this,e)})},delay:function(e,t){return e=b.fx?b.fx.speeds[e]||e:e,t=t||\"fx\",this.queue(t,function(t,n){var r=setTimeout(t,e);n.stop=function(){clearTimeout(r)}})},clearQueue:function(e){return this.queue(e||\"fx\",[])},promise:function(e,n){var r,i=1,o=b.Deferred(),a=this,s=this.length,u=function(){--i||o.resolveWith(a,[a])};\"string\"!=typeof e&&(n=e,e=t),e=e||\"fx\";while(s--)r=b._data(a[s],e+\"queueHooks\"),r&&r.empty&&(i++,r.empty.add(u));return u(),o.promise(n)}});var I,z,X=/[\\t\\r\\n]/g,U=/\\r/g,V=/^(?:input|select|textarea|button|object)$/i,Y=/^(?:a|area)$/i,J=/^(?:checked|selected|autofocus|autoplay|async|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped)$/i,G=/^(?:checked|selected)$/i,Q=b.support.getSetAttribute,K=b.support.input;b.fn.extend({attr:function(e,t){return b.access(this,b.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){b.removeAttr(this,e)})},prop:function(e,t){return b.access(this,b.prop,e,t,arguments.length>1)},removeProp:function(e){return e=b.propFix[e]||e,this.each(function(){try{this[e]=t,delete this[e]}catch(n){}})},addClass:function(e){var t,n,r,i,o,a=0,s=this.length,u=\"string\"==typeof e&&e;if(b.isFunction(e))return this.each(function(t){b(this).addClass(e.call(this,t,this.className))});if(u)for(t=(e||\"\").match(w)||[];s>a;a++)if(n=this[a],r=1===n.nodeType&&(n.className?(\" \"+n.className+\" \").replace(X,\" \"):\" \")){o=0;while(i=t[o++])0>r.indexOf(\" \"+i+\" \")&&(r+=i+\" \");n.className=b.trim(r)}return this},removeClass:function(e){var t,n,r,i,o,a=0,s=this.length,u=0===arguments.length||\"string\"==typeof e&&e;if(b.isFunction(e))return this.each(function(t){b(this).removeClass(e.call(this,t,this.className))});if(u)for(t=(e||\"\").match(w)||[];s>a;a++)if(n=this[a],r=1===n.nodeType&&(n.className?(\" \"+n.className+\" \").replace(X,\" \"):\"\")){o=0;while(i=t[o++])while(r.indexOf(\" \"+i+\" \")>=0)r=r.replace(\" \"+i+\" \",\" \");n.className=e?b.trim(r):\"\"}return this},toggleClass:function(e,t){var n=typeof e,r=\"boolean\"==typeof t;return b.isFunction(e)?this.each(function(n){b(this).toggleClass(e.call(this,n,this.className,t),t)}):this.each(function(){if(\"string\"===n){var o,a=0,s=b(this),u=t,l=e.match(w)||[];while(o=l[a++])u=r?u:!s.hasClass(o),s[u?\"addClass\":\"removeClass\"](o)}else(n===i||\"boolean\"===n)&&(this.className&&b._data(this,\"__className__\",this.className),this.className=this.className||e===!1?\"\":b._data(this,\"__className__\")||\"\")})},hasClass:function(e){var t=\" \"+e+\" \",n=0,r=this.length;for(;r>n;n++)if(1===this[n].nodeType&&(\" \"+this[n].className+\" \").replace(X,\" \").indexOf(t)>=0)return!0;return!1},val:function(e){var n,r,i,o=this[0];{if(arguments.length)return i=b.isFunction(e),this.each(function(n){var o,a=b(this);1===this.nodeType&&(o=i?e.call(this,n,a.val()):e,null==o?o=\"\":\"number\"==typeof o?o+=\"\":b.isArray(o)&&(o=b.map(o,function(e){return null==e?\"\":e+\"\"})),r=b.valHooks[this.type]||b.valHooks[this.nodeName.toLowerCase()],r&&\"set\"in r&&r.set(this,o,\"value\")!==t||(this.value=o))});if(o)return r=b.valHooks[o.type]||b.valHooks[o.nodeName.toLowerCase()],r&&\"get\"in r&&(n=r.get(o,\"value\"))!==t?n:(n=o.value,\"string\"==typeof n?n.replace(U,\"\"):null==n?\"\":n)}}}),b.extend({valHooks:{option:{get:function(e){var t=e.attributes.value;return!t||t.specified?e.value:e.text}},select:{get:function(e){var t,n,r=e.options,i=e.selectedIndex,o=\"select-one\"===e.type||0>i,a=o?null:[],s=o?i+1:r.length,u=0>i?s:o?i:0;for(;s>u;u++)if(n=r[u],!(!n.selected&&u!==i||(b.support.optDisabled?n.disabled:null!==n.getAttribute(\"disabled\"))||n.parentNode.disabled&&b.nodeName(n.parentNode,\"optgroup\"))){if(t=b(n).val(),o)return t;a.push(t)}return a},set:function(e,t){var n=b.makeArray(t);return b(e).find(\"option\").each(function(){this.selected=b.inArray(b(this).val(),n)>=0}),n.length||(e.selectedIndex=-1),n}}},attr:function(e,n,r){var o,a,s,u=e.nodeType;if(e&&3!==u&&8!==u&&2!==u)return typeof e.getAttribute===i?b.prop(e,n,r):(a=1!==u||!b.isXMLDoc(e),a&&(n=n.toLowerCase(),o=b.attrHooks[n]||(J.test(n)?z:I)),r===t?o&&a&&\"get\"in o&&null!==(s=o.get(e,n))?s:(typeof e.getAttribute!==i&&(s=e.getAttribute(n)),null==s?t:s):null!==r?o&&a&&\"set\"in o&&(s=o.set(e,r,n))!==t?s:(e.setAttribute(n,r+\"\"),r):(b.removeAttr(e,n),t))},removeAttr:function(e,t){var n,r,i=0,o=t&&t.match(w);if(o&&1===e.nodeType)while(n=o[i++])r=b.propFix[n]||n,J.test(n)?!Q&&G.test(n)?e[b.camelCase(\"default-\"+n)]=e[r]=!1:e[r]=!1:b.attr(e,n,\"\"),e.removeAttribute(Q?n:r)},attrHooks:{type:{set:function(e,t){if(!b.support.radioValue&&\"radio\"===t&&b.nodeName(e,\"input\")){var n=e.value;return e.setAttribute(\"type\",t),n&&(e.value=n),t}}}},propFix:{tabindex:\"tabIndex\",readonly:\"readOnly\",\"for\":\"htmlFor\",\"class\":\"className\",maxlength:\"maxLength\",cellspacing:\"cellSpacing\",cellpadding:\"cellPadding\",rowspan:\"rowSpan\",colspan:\"colSpan\",usemap:\"useMap\",frameborder:\"frameBorder\",contenteditable:\"contentEditable\"},prop:function(e,n,r){var i,o,a,s=e.nodeType;if(e&&3!==s&&8!==s&&2!==s)return a=1!==s||!b.isXMLDoc(e),a&&(n=b.propFix[n]||n,o=b.propHooks[n]),r!==t?o&&\"set\"in o&&(i=o.set(e,r,n))!==t?i:e[n]=r:o&&\"get\"in o&&null!==(i=o.get(e,n))?i:e[n]},propHooks:{tabIndex:{get:function(e){var n=e.getAttributeNode(\"tabindex\");return n&&n.specified?parseInt(n.value,10):V.test(e.nodeName)||Y.test(e.nodeName)&&e.href?0:t}}}}),z={get:function(e,n){var r=b.prop(e,n),i=\"boolean\"==typeof r&&e.getAttribute(n),o=\"boolean\"==typeof r?K&&Q?null!=i:G.test(n)?e[b.camelCase(\"default-\"+n)]:!!i:e.getAttributeNode(n);return o&&o.value!==!1?n.toLowerCase():t},set:function(e,t,n){return t===!1?b.removeAttr(e,n):K&&Q||!G.test(n)?e.setAttribute(!Q&&b.propFix[n]||n,n):e[b.camelCase(\"default-\"+n)]=e[n]=!0,n}},K&&Q||(b.attrHooks.value={get:function(e,n){var r=e.getAttributeNode(n);return b.nodeName(e,\"input\")?e.defaultValue:r&&r.specified?r.value:t},set:function(e,n,r){return b.nodeName(e,\"input\")?(e.defaultValue=n,t):I&&I.set(e,n,r)}}),Q||(I=b.valHooks.button={get:function(e,n){var r=e.getAttributeNode(n);return r&&(\"id\"===n||\"name\"===n||\"coords\"===n?\"\"!==r.value:r.specified)?r.value:t},set:function(e,n,r){var i=e.getAttributeNode(r);return i||e.setAttributeNode(i=e.ownerDocument.createAttribute(r)),i.value=n+=\"\",\"value\"===r||n===e.getAttribute(r)?n:t}},b.attrHooks.contenteditable={get:I.get,set:function(e,t,n){I.set(e,\"\"===t?!1:t,n)}},b.each([\"width\",\"height\"],function(e,n){b.attrHooks[n]=b.extend(b.attrHooks[n],{set:function(e,r){return\"\"===r?(e.setAttribute(n,\"auto\"),r):t}})})),b.support.hrefNormalized||(b.each([\"href\",\"src\",\"width\",\"height\"],function(e,n){b.attrHooks[n]=b.extend(b.attrHooks[n],{get:function(e){var r=e.getAttribute(n,2);return null==r?t:r}})}),b.each([\"href\",\"src\"],function(e,t){b.propHooks[t]={get:function(e){return e.getAttribute(t,4)}}})),b.support.style||(b.attrHooks.style={get:function(e){return e.style.cssText||t},set:function(e,t){return e.style.cssText=t+\"\"}}),b.support.optSelected||(b.propHooks.selected=b.extend(b.propHooks.selected,{get:function(e){var t=e.parentNode;return t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex),null}})),b.support.enctype||(b.propFix.enctype=\"encoding\"),b.support.checkOn||b.each([\"radio\",\"checkbox\"],function(){b.valHooks[this]={get:function(e){return null===e.getAttribute(\"value\")?\"on\":e.value}}}),b.each([\"radio\",\"checkbox\"],function(){b.valHooks[this]=b.extend(b.valHooks[this],{set:function(e,n){return b.isArray(n)?e.checked=b.inArray(b(e).val(),n)>=0:t}})});var Z=/^(?:input|select|textarea)$/i,et=/^key/,tt=/^(?:mouse|contextmenu)|click/,nt=/^(?:focusinfocus|focusoutblur)$/,rt=/^([^.]*)(?:\\.(.+)|)$/;function it(){return!0}function ot(){return!1}b.event={global:{},add:function(e,n,r,o,a){var s,u,l,c,p,f,d,h,g,m,y,v=b._data(e);if(v){r.handler&&(c=r,r=c.handler,a=c.selector),r.guid||(r.guid=b.guid++),(u=v.events)||(u=v.events={}),(f=v.handle)||(f=v.handle=function(e){return typeof b===i||e&&b.event.triggered===e.type?t:b.event.dispatch.apply(f.elem,arguments)},f.elem=e),n=(n||\"\").match(w)||[\"\"],l=n.length;while(l--)s=rt.exec(n[l])||[],g=y=s[1],m=(s[2]||\"\").split(\".\").sort(),p=b.event.special[g]||{},g=(a?p.delegateType:p.bindType)||g,p=b.event.special[g]||{},d=b.extend({type:g,origType:y,data:o,handler:r,guid:r.guid,selector:a,needsContext:a&&b.expr.match.needsContext.test(a),namespace:m.join(\".\")},c),(h=u[g])||(h=u[g]=[],h.delegateCount=0,p.setup&&p.setup.call(e,o,m,f)!==!1||(e.addEventListener?e.addEventListener(g,f,!1):e.attachEvent&&e.attachEvent(\"on\"+g,f))),p.add&&(p.add.call(e,d),d.handler.guid||(d.handler.guid=r.guid)),a?h.splice(h.delegateCount++,0,d):h.push(d),b.event.global[g]=!0;e=null}},remove:function(e,t,n,r,i){var o,a,s,u,l,c,p,f,d,h,g,m=b.hasData(e)&&b._data(e);if(m&&(c=m.events)){t=(t||\"\").match(w)||[\"\"],l=t.length;while(l--)if(s=rt.exec(t[l])||[],d=g=s[1],h=(s[2]||\"\").split(\".\").sort(),d){p=b.event.special[d]||{},d=(r?p.delegateType:p.bindType)||d,f=c[d]||[],s=s[2]&&RegExp(\"(^|\\\\.)\"+h.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"),u=o=f.length;while(o--)a=f[o],!i&&g!==a.origType||n&&n.guid!==a.guid||s&&!s.test(a.namespace)||r&&r!==a.selector&&(\"**\"!==r||!a.selector)||(f.splice(o,1),a.selector&&f.delegateCount--,p.remove&&p.remove.call(e,a));u&&!f.length&&(p.teardown&&p.teardown.call(e,h,m.handle)!==!1||b.removeEvent(e,d,m.handle),delete c[d])}else for(d in c)b.event.remove(e,d+t[l],n,r,!0);b.isEmptyObject(c)&&(delete m.handle,b._removeData(e,\"events\"))}},trigger:function(n,r,i,a){var s,u,l,c,p,f,d,h=[i||o],g=y.call(n,\"type\")?n.type:n,m=y.call(n,\"namespace\")?n.namespace.split(\".\"):[];if(l=f=i=i||o,3!==i.nodeType&&8!==i.nodeType&&!nt.test(g+b.event.triggered)&&(g.indexOf(\".\")>=0&&(m=g.split(\".\"),g=m.shift(),m.sort()),u=0>g.indexOf(\":\")&&\"on\"+g,n=n[b.expando]?n:new b.Event(g,\"object\"==typeof n&&n),n.isTrigger=!0,n.namespace=m.join(\".\"),n.namespace_re=n.namespace?RegExp(\"(^|\\\\.)\"+m.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"):null,n.result=t,n.target||(n.target=i),r=null==r?[n]:b.makeArray(r,[n]),p=b.event.special[g]||{},a||!p.trigger||p.trigger.apply(i,r)!==!1)){if(!a&&!p.noBubble&&!b.isWindow(i)){for(c=p.delegateType||g,nt.test(c+g)||(l=l.parentNode);l;l=l.parentNode)h.push(l),f=l;f===(i.ownerDocument||o)&&h.push(f.defaultView||f.parentWindow||e)}d=0;while((l=h[d++])&&!n.isPropagationStopped())n.type=d>1?c:p.bindType||g,s=(b._data(l,\"events\")||{})[n.type]&&b._data(l,\"handle\"),s&&s.apply(l,r),s=u&&l[u],s&&b.acceptData(l)&&s.apply&&s.apply(l,r)===!1&&n.preventDefault();if(n.type=g,!(a||n.isDefaultPrevented()||p._default&&p._default.apply(i.ownerDocument,r)!==!1||\"click\"===g&&b.nodeName(i,\"a\")||!b.acceptData(i)||!u||!i[g]||b.isWindow(i))){f=i[u],f&&(i[u]=null),b.event.triggered=g;try{i[g]()}catch(v){}b.event.triggered=t,f&&(i[u]=f)}return n.result}},dispatch:function(e){e=b.event.fix(e);var n,r,i,o,a,s=[],u=h.call(arguments),l=(b._data(this,\"events\")||{})[e.type]||[],c=b.event.special[e.type]||{};if(u[0]=e,e.delegateTarget=this,!c.preDispatch||c.preDispatch.call(this,e)!==!1){s=b.event.handlers.call(this,e,l),n=0;while((o=s[n++])&&!e.isPropagationStopped()){e.currentTarget=o.elem,a=0;while((i=o.handlers[a++])&&!e.isImmediatePropagationStopped())(!e.namespace_re||e.namespace_re.test(i.namespace))&&(e.handleObj=i,e.data=i.data,r=((b.event.special[i.origType]||{}).handle||i.handler).apply(o.elem,u),r!==t&&(e.result=r)===!1&&(e.preventDefault(),e.stopPropagation()))}return c.postDispatch&&c.postDispatch.call(this,e),e.result}},handlers:function(e,n){var r,i,o,a,s=[],u=n.delegateCount,l=e.target;if(u&&l.nodeType&&(!e.button||\"click\"!==e.type))for(;l!=this;l=l.parentNode||this)if(1===l.nodeType&&(l.disabled!==!0||\"click\"!==e.type)){for(o=[],a=0;u>a;a++)i=n[a],r=i.selector+\" \",o[r]===t&&(o[r]=i.needsContext?b(r,this).index(l)>=0:b.find(r,this,null,[l]).length),o[r]&&o.push(i);o.length&&s.push({elem:l,handlers:o})}return n.length>u&&s.push({elem:this,handlers:n.slice(u)}),s},fix:function(e){if(e[b.expando])return e;var t,n,r,i=e.type,a=e,s=this.fixHooks[i];s||(this.fixHooks[i]=s=tt.test(i)?this.mouseHooks:et.test(i)?this.keyHooks:{}),r=s.props?this.props.concat(s.props):this.props,e=new b.Event(a),t=r.length;while(t--)n=r[t],e[n]=a[n];return e.target||(e.target=a.srcElement||o),3===e.target.nodeType&&(e.target=e.target.parentNode),e.metaKey=!!e.metaKey,s.filter?s.filter(e,a):e},props:\"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which\".split(\" \"),fixHooks:{},keyHooks:{props:\"char charCode key keyCode\".split(\" \"),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:\"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement\".split(\" \"),filter:function(e,n){var r,i,a,s=n.button,u=n.fromElement;return null==e.pageX&&null!=n.clientX&&(i=e.target.ownerDocument||o,a=i.documentElement,r=i.body,e.pageX=n.clientX+(a&&a.scrollLeft||r&&r.scrollLeft||0)-(a&&a.clientLeft||r&&r.clientLeft||0),e.pageY=n.clientY+(a&&a.scrollTop||r&&r.scrollTop||0)-(a&&a.clientTop||r&&r.clientTop||0)),!e.relatedTarget&&u&&(e.relatedTarget=u===e.target?n.toElement:u),e.which||s===t||(e.which=1&s?1:2&s?3:4&s?2:0),e}},special:{load:{noBubble:!0},click:{trigger:function(){return b.nodeName(this,\"input\")&&\"checkbox\"===this.type&&this.click?(this.click(),!1):t}},focus:{trigger:function(){if(this!==o.activeElement&&this.focus)try{return this.focus(),!1}catch(e){}},delegateType:\"focusin\"},blur:{trigger:function(){return this===o.activeElement&&this.blur?(this.blur(),!1):t},delegateType:\"focusout\"},beforeunload:{postDispatch:function(e){e.result!==t&&(e.originalEvent.returnValue=e.result)}}},simulate:function(e,t,n,r){var i=b.extend(new b.Event,n,{type:e,isSimulated:!0,originalEvent:{}});r?b.event.trigger(i,null,t):b.event.dispatch.call(t,i),i.isDefaultPrevented()&&n.preventDefault()}},b.removeEvent=o.removeEventListener?function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n,!1)}:function(e,t,n){var r=\"on\"+t;e.detachEvent&&(typeof e[r]===i&&(e[r]=null),e.detachEvent(r,n))},b.Event=function(e,n){return this instanceof b.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||e.returnValue===!1||e.getPreventDefault&&e.getPreventDefault()?it:ot):this.type=e,n&&b.extend(this,n),this.timeStamp=e&&e.timeStamp||b.now(),this[b.expando]=!0,t):new b.Event(e,n)},b.Event.prototype={isDefaultPrevented:ot,isPropagationStopped:ot,isImmediatePropagationStopped:ot,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=it,e&&(e.preventDefault?e.preventDefault():e.returnValue=!1)},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=it,e&&(e.stopPropagation&&e.stopPropagation(),e.cancelBubble=!0)},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=it,this.stopPropagation()}},b.each({mouseenter:\"mouseover\",mouseleave:\"mouseout\"},function(e,t){b.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;\nreturn(!i||i!==r&&!b.contains(r,i))&&(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),b.support.submitBubbles||(b.event.special.submit={setup:function(){return b.nodeName(this,\"form\")?!1:(b.event.add(this,\"click._submit keypress._submit\",function(e){var n=e.target,r=b.nodeName(n,\"input\")||b.nodeName(n,\"button\")?n.form:t;r&&!b._data(r,\"submitBubbles\")&&(b.event.add(r,\"submit._submit\",function(e){e._submit_bubble=!0}),b._data(r,\"submitBubbles\",!0))}),t)},postDispatch:function(e){e._submit_bubble&&(delete e._submit_bubble,this.parentNode&&!e.isTrigger&&b.event.simulate(\"submit\",this.parentNode,e,!0))},teardown:function(){return b.nodeName(this,\"form\")?!1:(b.event.remove(this,\"._submit\"),t)}}),b.support.changeBubbles||(b.event.special.change={setup:function(){return Z.test(this.nodeName)?((\"checkbox\"===this.type||\"radio\"===this.type)&&(b.event.add(this,\"propertychange._change\",function(e){\"checked\"===e.originalEvent.propertyName&&(this._just_changed=!0)}),b.event.add(this,\"click._change\",function(e){this._just_changed&&!e.isTrigger&&(this._just_changed=!1),b.event.simulate(\"change\",this,e,!0)})),!1):(b.event.add(this,\"beforeactivate._change\",function(e){var t=e.target;Z.test(t.nodeName)&&!b._data(t,\"changeBubbles\")&&(b.event.add(t,\"change._change\",function(e){!this.parentNode||e.isSimulated||e.isTrigger||b.event.simulate(\"change\",this.parentNode,e,!0)}),b._data(t,\"changeBubbles\",!0))}),t)},handle:function(e){var n=e.target;return this!==n||e.isSimulated||e.isTrigger||\"radio\"!==n.type&&\"checkbox\"!==n.type?e.handleObj.handler.apply(this,arguments):t},teardown:function(){return b.event.remove(this,\"._change\"),!Z.test(this.nodeName)}}),b.support.focusinBubbles||b.each({focus:\"focusin\",blur:\"focusout\"},function(e,t){var n=0,r=function(e){b.event.simulate(t,e.target,b.event.fix(e),!0)};b.event.special[t]={setup:function(){0===n++&&o.addEventListener(e,r,!0)},teardown:function(){0===--n&&o.removeEventListener(e,r,!0)}}}),b.fn.extend({on:function(e,n,r,i,o){var a,s;if(\"object\"==typeof e){\"string\"!=typeof n&&(r=r||n,n=t);for(a in e)this.on(a,n,r,e[a],o);return this}if(null==r&&null==i?(i=n,r=n=t):null==i&&(\"string\"==typeof n?(i=r,r=t):(i=r,r=n,n=t)),i===!1)i=ot;else if(!i)return this;return 1===o&&(s=i,i=function(e){return b().off(e),s.apply(this,arguments)},i.guid=s.guid||(s.guid=b.guid++)),this.each(function(){b.event.add(this,e,i,r,n)})},one:function(e,t,n,r){return this.on(e,t,n,r,1)},off:function(e,n,r){var i,o;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,b(e.delegateTarget).off(i.namespace?i.origType+\".\"+i.namespace:i.origType,i.selector,i.handler),this;if(\"object\"==typeof e){for(o in e)this.off(o,n,e[o]);return this}return(n===!1||\"function\"==typeof n)&&(r=n,n=t),r===!1&&(r=ot),this.each(function(){b.event.remove(this,e,r,n)})},bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,\"**\"):this.off(t,e||\"**\",n)},trigger:function(e,t){return this.each(function(){b.event.trigger(e,t,this)})},triggerHandler:function(e,n){var r=this[0];return r?b.event.trigger(e,n,r,!0):t}}),function(e,t){var n,r,i,o,a,s,u,l,c,p,f,d,h,g,m,y,v,x=\"sizzle\"+-new Date,w=e.document,T={},N=0,C=0,k=it(),E=it(),S=it(),A=typeof t,j=1<<31,D=[],L=D.pop,H=D.push,q=D.slice,M=D.indexOf||function(e){var t=0,n=this.length;for(;n>t;t++)if(this[t]===e)return t;return-1},_=\"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",F=\"(?:\\\\\\\\.|[\\\\w-]|[^\\\\x00-\\\\xa0])+\",O=F.replace(\"w\",\"w#\"),B=\"([*^$|!~]?=)\",P=\"\\\\[\"+_+\"*(\"+F+\")\"+_+\"*(?:\"+B+_+\"*(?:(['\\\"])((?:\\\\\\\\.|[^\\\\\\\\])*?)\\\\3|(\"+O+\")|)|)\"+_+\"*\\\\]\",R=\":(\"+F+\")(?:\\\\(((['\\\"])((?:\\\\\\\\.|[^\\\\\\\\])*?)\\\\3|((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\"+P.replace(3,8)+\")*)|.*)\\\\)|)\",W=RegExp(\"^\"+_+\"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\"+_+\"+$\",\"g\"),$=RegExp(\"^\"+_+\"*,\"+_+\"*\"),I=RegExp(\"^\"+_+\"*([\\\\x20\\\\t\\\\r\\\\n\\\\f>+~])\"+_+\"*\"),z=RegExp(R),X=RegExp(\"^\"+O+\"$\"),U={ID:RegExp(\"^#(\"+F+\")\"),CLASS:RegExp(\"^\\\\.(\"+F+\")\"),NAME:RegExp(\"^\\\\[name=['\\\"]?(\"+F+\")['\\\"]?\\\\]\"),TAG:RegExp(\"^(\"+F.replace(\"w\",\"w*\")+\")\"),ATTR:RegExp(\"^\"+P),PSEUDO:RegExp(\"^\"+R),CHILD:RegExp(\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\"+_+\"*(even|odd|(([+-]|)(\\\\d*)n|)\"+_+\"*(?:([+-]|)\"+_+\"*(\\\\d+)|))\"+_+\"*\\\\)|)\",\"i\"),needsContext:RegExp(\"^\"+_+\"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\"+_+\"*((?:-\\\\d)?\\\\d*)\"+_+\"*\\\\)|)(?=[^-]|$)\",\"i\")},V=/[\\x20\\t\\r\\n\\f]*[+~]/,Y=/^[^{]+\\{\\s*\\[native code/,J=/^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,G=/^(?:input|select|textarea|button)$/i,Q=/^h\\d$/i,K=/'|\\\\/g,Z=/\\=[\\x20\\t\\r\\n\\f]*([^'\"\\]]*)[\\x20\\t\\r\\n\\f]*\\]/g,et=/\\\\([\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|.)/g,tt=function(e,t){var n=\"0x\"+t-65536;return n!==n?t:0>n?String.fromCharCode(n+65536):String.fromCharCode(55296|n>>10,56320|1023&n)};try{q.call(w.documentElement.childNodes,0)[0].nodeType}catch(nt){q=function(e){var t,n=[];while(t=this[e++])n.push(t);return n}}function rt(e){return Y.test(e+\"\")}function it(){var e,t=[];return e=function(n,r){return t.push(n+=\" \")>i.cacheLength&&delete e[t.shift()],e[n]=r}}function ot(e){return e[x]=!0,e}function at(e){var t=p.createElement(\"div\");try{return e(t)}catch(n){return!1}finally{t=null}}function st(e,t,n,r){var i,o,a,s,u,l,f,g,m,v;if((t?t.ownerDocument||t:w)!==p&&c(t),t=t||p,n=n||[],!e||\"string\"!=typeof e)return n;if(1!==(s=t.nodeType)&&9!==s)return[];if(!d&&!r){if(i=J.exec(e))if(a=i[1]){if(9===s){if(o=t.getElementById(a),!o||!o.parentNode)return n;if(o.id===a)return n.push(o),n}else if(t.ownerDocument&&(o=t.ownerDocument.getElementById(a))&&y(t,o)&&o.id===a)return n.push(o),n}else{if(i[2])return H.apply(n,q.call(t.getElementsByTagName(e),0)),n;if((a=i[3])&&T.getByClassName&&t.getElementsByClassName)return H.apply(n,q.call(t.getElementsByClassName(a),0)),n}if(T.qsa&&!h.test(e)){if(f=!0,g=x,m=t,v=9===s&&e,1===s&&\"object\"!==t.nodeName.toLowerCase()){l=ft(e),(f=t.getAttribute(\"id\"))?g=f.replace(K,\"\\\\$&\"):t.setAttribute(\"id\",g),g=\"[id='\"+g+\"'] \",u=l.length;while(u--)l[u]=g+dt(l[u]);m=V.test(e)&&t.parentNode||t,v=l.join(\",\")}if(v)try{return H.apply(n,q.call(m.querySelectorAll(v),0)),n}catch(b){}finally{f||t.removeAttribute(\"id\")}}}return wt(e.replace(W,\"$1\"),t,n,r)}a=st.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return t?\"HTML\"!==t.nodeName:!1},c=st.setDocument=function(e){var n=e?e.ownerDocument||e:w;return n!==p&&9===n.nodeType&&n.documentElement?(p=n,f=n.documentElement,d=a(n),T.tagNameNoComments=at(function(e){return e.appendChild(n.createComment(\"\")),!e.getElementsByTagName(\"*\").length}),T.attributes=at(function(e){e.innerHTML=\"<select></select>\";var t=typeof e.lastChild.getAttribute(\"multiple\");return\"boolean\"!==t&&\"string\"!==t}),T.getByClassName=at(function(e){return e.innerHTML=\"<div class='hidden e'></div><div class='hidden'></div>\",e.getElementsByClassName&&e.getElementsByClassName(\"e\").length?(e.lastChild.className=\"e\",2===e.getElementsByClassName(\"e\").length):!1}),T.getByName=at(function(e){e.id=x+0,e.innerHTML=\"<a name='\"+x+\"'></a><div name='\"+x+\"'></div>\",f.insertBefore(e,f.firstChild);var t=n.getElementsByName&&n.getElementsByName(x).length===2+n.getElementsByName(x+0).length;return T.getIdNotName=!n.getElementById(x),f.removeChild(e),t}),i.attrHandle=at(function(e){return e.innerHTML=\"<a href='#'></a>\",e.firstChild&&typeof e.firstChild.getAttribute!==A&&\"#\"===e.firstChild.getAttribute(\"href\")})?{}:{href:function(e){return e.getAttribute(\"href\",2)},type:function(e){return e.getAttribute(\"type\")}},T.getIdNotName?(i.find.ID=function(e,t){if(typeof t.getElementById!==A&&!d){var n=t.getElementById(e);return n&&n.parentNode?[n]:[]}},i.filter.ID=function(e){var t=e.replace(et,tt);return function(e){return e.getAttribute(\"id\")===t}}):(i.find.ID=function(e,n){if(typeof n.getElementById!==A&&!d){var r=n.getElementById(e);return r?r.id===e||typeof r.getAttributeNode!==A&&r.getAttributeNode(\"id\").value===e?[r]:t:[]}},i.filter.ID=function(e){var t=e.replace(et,tt);return function(e){var n=typeof e.getAttributeNode!==A&&e.getAttributeNode(\"id\");return n&&n.value===t}}),i.find.TAG=T.tagNameNoComments?function(e,n){return typeof n.getElementsByTagName!==A?n.getElementsByTagName(e):t}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if(\"*\"===e){while(n=o[i++])1===n.nodeType&&r.push(n);return r}return o},i.find.NAME=T.getByName&&function(e,n){return typeof n.getElementsByName!==A?n.getElementsByName(name):t},i.find.CLASS=T.getByClassName&&function(e,n){return typeof n.getElementsByClassName===A||d?t:n.getElementsByClassName(e)},g=[],h=[\":focus\"],(T.qsa=rt(n.querySelectorAll))&&(at(function(e){e.innerHTML=\"<select><option selected=''></option></select>\",e.querySelectorAll(\"[selected]\").length||h.push(\"\\\\[\"+_+\"*(?:checked|disabled|ismap|multiple|readonly|selected|value)\"),e.querySelectorAll(\":checked\").length||h.push(\":checked\")}),at(function(e){e.innerHTML=\"<input type='hidden' i=''/>\",e.querySelectorAll(\"[i^='']\").length&&h.push(\"[*^$]=\"+_+\"*(?:\\\"\\\"|'')\"),e.querySelectorAll(\":enabled\").length||h.push(\":enabled\",\":disabled\"),e.querySelectorAll(\"*,:x\"),h.push(\",.*:\")})),(T.matchesSelector=rt(m=f.matchesSelector||f.mozMatchesSelector||f.webkitMatchesSelector||f.oMatchesSelector||f.msMatchesSelector))&&at(function(e){T.disconnectedMatch=m.call(e,\"div\"),m.call(e,\"[s!='']:x\"),g.push(\"!=\",R)}),h=RegExp(h.join(\"|\")),g=RegExp(g.join(\"|\")),y=rt(f.contains)||f.compareDocumentPosition?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)while(t=t.parentNode)if(t===e)return!0;return!1},v=f.compareDocumentPosition?function(e,t){var r;return e===t?(u=!0,0):(r=t.compareDocumentPosition&&e.compareDocumentPosition&&e.compareDocumentPosition(t))?1&r||e.parentNode&&11===e.parentNode.nodeType?e===n||y(w,e)?-1:t===n||y(w,t)?1:0:4&r?-1:1:e.compareDocumentPosition?-1:1}:function(e,t){var r,i=0,o=e.parentNode,a=t.parentNode,s=[e],l=[t];if(e===t)return u=!0,0;if(!o||!a)return e===n?-1:t===n?1:o?-1:a?1:0;if(o===a)return ut(e,t);r=e;while(r=r.parentNode)s.unshift(r);r=t;while(r=r.parentNode)l.unshift(r);while(s[i]===l[i])i++;return i?ut(s[i],l[i]):s[i]===w?-1:l[i]===w?1:0},u=!1,[0,0].sort(v),T.detectDuplicates=u,p):p},st.matches=function(e,t){return st(e,null,null,t)},st.matchesSelector=function(e,t){if((e.ownerDocument||e)!==p&&c(e),t=t.replace(Z,\"='$1']\"),!(!T.matchesSelector||d||g&&g.test(t)||h.test(t)))try{var n=m.call(e,t);if(n||T.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(r){}return st(t,p,null,[e]).length>0},st.contains=function(e,t){return(e.ownerDocument||e)!==p&&c(e),y(e,t)},st.attr=function(e,t){var n;return(e.ownerDocument||e)!==p&&c(e),d||(t=t.toLowerCase()),(n=i.attrHandle[t])?n(e):d||T.attributes?e.getAttribute(t):((n=e.getAttributeNode(t))||e.getAttribute(t))&&e[t]===!0?t:n&&n.specified?n.value:null},st.error=function(e){throw Error(\"Syntax error, unrecognized expression: \"+e)},st.uniqueSort=function(e){var t,n=[],r=1,i=0;if(u=!T.detectDuplicates,e.sort(v),u){for(;t=e[r];r++)t===e[r-1]&&(i=n.push(r));while(i--)e.splice(n[i],1)}return e};function ut(e,t){var n=t&&e,r=n&&(~t.sourceIndex||j)-(~e.sourceIndex||j);if(r)return r;if(n)while(n=n.nextSibling)if(n===t)return-1;return e?1:-1}function lt(e){return function(t){var n=t.nodeName.toLowerCase();return\"input\"===n&&t.type===e}}function ct(e){return function(t){var n=t.nodeName.toLowerCase();return(\"input\"===n||\"button\"===n)&&t.type===e}}function pt(e){return ot(function(t){return t=+t,ot(function(n,r){var i,o=e([],n.length,t),a=o.length;while(a--)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))})})}o=st.getText=function(e){var t,n=\"\",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if(\"string\"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r];r++)n+=o(t);return n},i=st.selectors={cacheLength:50,createPseudo:ot,match:U,find:{},relative:{\">\":{dir:\"parentNode\",first:!0},\" \":{dir:\"parentNode\"},\"+\":{dir:\"previousSibling\",first:!0},\"~\":{dir:\"previousSibling\"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(et,tt),e[3]=(e[4]||e[5]||\"\").replace(et,tt),\"~=\"===e[2]&&(e[3]=\" \"+e[3]+\" \"),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),\"nth\"===e[1].slice(0,3)?(e[3]||st.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*(\"even\"===e[3]||\"odd\"===e[3])),e[5]=+(e[7]+e[8]||\"odd\"===e[3])):e[3]&&st.error(e[0]),e},PSEUDO:function(e){var t,n=!e[5]&&e[2];return U.CHILD.test(e[0])?null:(e[4]?e[2]=e[4]:n&&z.test(n)&&(t=ft(n,!0))&&(t=n.indexOf(\")\",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){return\"*\"===e?function(){return!0}:(e=e.replace(et,tt).toLowerCase(),function(t){return t.nodeName&&t.nodeName.toLowerCase()===e})},CLASS:function(e){var t=k[e+\" \"];return t||(t=RegExp(\"(^|\"+_+\")\"+e+\"(\"+_+\"|$)\"))&&k(e,function(e){return t.test(e.className||typeof e.getAttribute!==A&&e.getAttribute(\"class\")||\"\")})},ATTR:function(e,t,n){return function(r){var i=st.attr(r,e);return null==i?\"!=\"===t:t?(i+=\"\",\"=\"===t?i===n:\"!=\"===t?i!==n:\"^=\"===t?n&&0===i.indexOf(n):\"*=\"===t?n&&i.indexOf(n)>-1:\"$=\"===t?n&&i.slice(-n.length)===n:\"~=\"===t?(\" \"+i+\" \").indexOf(n)>-1:\"|=\"===t?i===n||i.slice(0,n.length+1)===n+\"-\":!1):!0}},CHILD:function(e,t,n,r,i){var o=\"nth\"!==e.slice(0,3),a=\"last\"!==e.slice(-4),s=\"of-type\"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,u){var l,c,p,f,d,h,g=o!==a?\"nextSibling\":\"previousSibling\",m=t.parentNode,y=s&&t.nodeName.toLowerCase(),v=!u&&!s;if(m){if(o){while(g){p=t;while(p=p[g])if(s?p.nodeName.toLowerCase()===y:1===p.nodeType)return!1;h=g=\"only\"===e&&!h&&\"nextSibling\"}return!0}if(h=[a?m.firstChild:m.lastChild],a&&v){c=m[x]||(m[x]={}),l=c[e]||[],d=l[0]===N&&l[1],f=l[0]===N&&l[2],p=d&&m.childNodes[d];while(p=++d&&p&&p[g]||(f=d=0)||h.pop())if(1===p.nodeType&&++f&&p===t){c[e]=[N,d,f];break}}else if(v&&(l=(t[x]||(t[x]={}))[e])&&l[0]===N)f=l[1];else while(p=++d&&p&&p[g]||(f=d=0)||h.pop())if((s?p.nodeName.toLowerCase()===y:1===p.nodeType)&&++f&&(v&&((p[x]||(p[x]={}))[e]=[N,f]),p===t))break;return f-=i,f===r||0===f%r&&f/r>=0}}},PSEUDO:function(e,t){var n,r=i.pseudos[e]||i.setFilters[e.toLowerCase()]||st.error(\"unsupported pseudo: \"+e);return r[x]?r(t):r.length>1?(n=[e,e,\"\",t],i.setFilters.hasOwnProperty(e.toLowerCase())?ot(function(e,n){var i,o=r(e,t),a=o.length;while(a--)i=M.call(e,o[a]),e[i]=!(n[i]=o[a])}):function(e){return r(e,0,n)}):r}},pseudos:{not:ot(function(e){var t=[],n=[],r=s(e.replace(W,\"$1\"));return r[x]?ot(function(e,t,n,i){var o,a=r(e,null,i,[]),s=e.length;while(s--)(o=a[s])&&(e[s]=!(t[s]=o))}):function(e,i,o){return t[0]=e,r(t,null,o,n),!n.pop()}}),has:ot(function(e){return function(t){return st(e,t).length>0}}),contains:ot(function(e){return function(t){return(t.textContent||t.innerText||o(t)).indexOf(e)>-1}}),lang:ot(function(e){return X.test(e||\"\")||st.error(\"unsupported lang: \"+e),e=e.replace(et,tt).toLowerCase(),function(t){var n;do if(n=d?t.getAttribute(\"xml:lang\")||t.getAttribute(\"lang\"):t.lang)return n=n.toLowerCase(),n===e||0===n.indexOf(e+\"-\");while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===f},focus:function(e){return e===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return e.disabled===!1},disabled:function(e){return e.disabled===!0},checked:function(e){var t=e.nodeName.toLowerCase();return\"input\"===t&&!!e.checked||\"option\"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeName>\"@\"||3===e.nodeType||4===e.nodeType)return!1;return!0},parent:function(e){return!i.pseudos.empty(e)},header:function(e){return Q.test(e.nodeName)},input:function(e){return G.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return\"input\"===t&&\"button\"===e.type||\"button\"===t},text:function(e){var t;return\"input\"===e.nodeName.toLowerCase()&&\"text\"===e.type&&(null==(t=e.getAttribute(\"type\"))||t.toLowerCase()===e.type)},first:pt(function(){return[0]}),last:pt(function(e,t){return[t-1]}),eq:pt(function(e,t,n){return[0>n?n+t:n]}),even:pt(function(e,t){var n=0;for(;t>n;n+=2)e.push(n);return e}),odd:pt(function(e,t){var n=1;for(;t>n;n+=2)e.push(n);return e}),lt:pt(function(e,t,n){var r=0>n?n+t:n;for(;--r>=0;)e.push(r);return e}),gt:pt(function(e,t,n){var r=0>n?n+t:n;for(;t>++r;)e.push(r);return e})}};for(n in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[n]=lt(n);for(n in{submit:!0,reset:!0})i.pseudos[n]=ct(n);function ft(e,t){var n,r,o,a,s,u,l,c=E[e+\" \"];if(c)return t?0:c.slice(0);s=e,u=[],l=i.preFilter;while(s){(!n||(r=$.exec(s)))&&(r&&(s=s.slice(r[0].length)||s),u.push(o=[])),n=!1,(r=I.exec(s))&&(n=r.shift(),o.push({value:n,type:r[0].replace(W,\" \")}),s=s.slice(n.length));for(a in i.filter)!(r=U[a].exec(s))||l[a]&&!(r=l[a](r))||(n=r.shift(),o.push({value:n,type:a,matches:r}),s=s.slice(n.length));if(!n)break}return t?s.length:s?st.error(e):E(e,u).slice(0)}function dt(e){var t=0,n=e.length,r=\"\";for(;n>t;t++)r+=e[t].value;return r}function ht(e,t,n){var i=t.dir,o=n&&\"parentNode\"===i,a=C++;return t.first?function(t,n,r){while(t=t[i])if(1===t.nodeType||o)return e(t,n,r)}:function(t,n,s){var u,l,c,p=N+\" \"+a;if(s){while(t=t[i])if((1===t.nodeType||o)&&e(t,n,s))return!0}else while(t=t[i])if(1===t.nodeType||o)if(c=t[x]||(t[x]={}),(l=c[i])&&l[0]===p){if((u=l[1])===!0||u===r)return u===!0}else if(l=c[i]=[p],l[1]=e(t,n,s)||r,l[1]===!0)return!0}}function gt(e){return e.length>1?function(t,n,r){var i=e.length;while(i--)if(!e[i](t,n,r))return!1;return!0}:e[0]}function mt(e,t,n,r,i){var o,a=[],s=0,u=e.length,l=null!=t;for(;u>s;s++)(o=e[s])&&(!n||n(o,r,i))&&(a.push(o),l&&t.push(s));return a}function yt(e,t,n,r,i,o){return r&&!r[x]&&(r=yt(r)),i&&!i[x]&&(i=yt(i,o)),ot(function(o,a,s,u){var l,c,p,f=[],d=[],h=a.length,g=o||xt(t||\"*\",s.nodeType?[s]:s,[]),m=!e||!o&&t?g:mt(g,f,e,s,u),y=n?i||(o?e:h||r)?[]:a:m;if(n&&n(m,y,s,u),r){l=mt(y,d),r(l,[],s,u),c=l.length;while(c--)(p=l[c])&&(y[d[c]]=!(m[d[c]]=p))}if(o){if(i||e){if(i){l=[],c=y.length;while(c--)(p=y[c])&&l.push(m[c]=p);i(null,y=[],l,u)}c=y.length;while(c--)(p=y[c])&&(l=i?M.call(o,p):f[c])>-1&&(o[l]=!(a[l]=p))}}else y=mt(y===a?y.splice(h,y.length):y),i?i(null,a,y,u):H.apply(a,y)})}function vt(e){var t,n,r,o=e.length,a=i.relative[e[0].type],s=a||i.relative[\" \"],u=a?1:0,c=ht(function(e){return e===t},s,!0),p=ht(function(e){return M.call(t,e)>-1},s,!0),f=[function(e,n,r){return!a&&(r||n!==l)||((t=n).nodeType?c(e,n,r):p(e,n,r))}];for(;o>u;u++)if(n=i.relative[e[u].type])f=[ht(gt(f),n)];else{if(n=i.filter[e[u].type].apply(null,e[u].matches),n[x]){for(r=++u;o>r;r++)if(i.relative[e[r].type])break;return yt(u>1&&gt(f),u>1&&dt(e.slice(0,u-1)).replace(W,\"$1\"),n,r>u&&vt(e.slice(u,r)),o>r&&vt(e=e.slice(r)),o>r&&dt(e))}f.push(n)}return gt(f)}function bt(e,t){var n=0,o=t.length>0,a=e.length>0,s=function(s,u,c,f,d){var h,g,m,y=[],v=0,b=\"0\",x=s&&[],w=null!=d,T=l,C=s||a&&i.find.TAG(\"*\",d&&u.parentNode||u),k=N+=null==T?1:Math.random()||.1;for(w&&(l=u!==p&&u,r=n);null!=(h=C[b]);b++){if(a&&h){g=0;while(m=e[g++])if(m(h,u,c)){f.push(h);break}w&&(N=k,r=++n)}o&&((h=!m&&h)&&v--,s&&x.push(h))}if(v+=b,o&&b!==v){g=0;while(m=t[g++])m(x,y,u,c);if(s){if(v>0)while(b--)x[b]||y[b]||(y[b]=L.call(f));y=mt(y)}H.apply(f,y),w&&!s&&y.length>0&&v+t.length>1&&st.uniqueSort(f)}return w&&(N=k,l=T),x};return o?ot(s):s}s=st.compile=function(e,t){var n,r=[],i=[],o=S[e+\" \"];if(!o){t||(t=ft(e)),n=t.length;while(n--)o=vt(t[n]),o[x]?r.push(o):i.push(o);o=S(e,bt(i,r))}return o};function xt(e,t,n){var r=0,i=t.length;for(;i>r;r++)st(e,t[r],n);return n}function wt(e,t,n,r){var o,a,u,l,c,p=ft(e);if(!r&&1===p.length){if(a=p[0]=p[0].slice(0),a.length>2&&\"ID\"===(u=a[0]).type&&9===t.nodeType&&!d&&i.relative[a[1].type]){if(t=i.find.ID(u.matches[0].replace(et,tt),t)[0],!t)return n;e=e.slice(a.shift().value.length)}o=U.needsContext.test(e)?0:a.length;while(o--){if(u=a[o],i.relative[l=u.type])break;if((c=i.find[l])&&(r=c(u.matches[0].replace(et,tt),V.test(a[0].type)&&t.parentNode||t))){if(a.splice(o,1),e=r.length&&dt(a),!e)return H.apply(n,q.call(r,0)),n;break}}}return s(e,p)(r,t,d,n,V.test(e)),n}i.pseudos.nth=i.pseudos.eq;function Tt(){}i.filters=Tt.prototype=i.pseudos,i.setFilters=new Tt,c(),st.attr=b.attr,b.find=st,b.expr=st.selectors,b.expr[\":\"]=b.expr.pseudos,b.unique=st.uniqueSort,b.text=st.getText,b.isXMLDoc=st.isXML,b.contains=st.contains}(e);var at=/Until$/,st=/^(?:parents|prev(?:Until|All))/,ut=/^.[^:#\\[\\.,]*$/,lt=b.expr.match.needsContext,ct={children:!0,contents:!0,next:!0,prev:!0};b.fn.extend({find:function(e){var t,n,r,i=this.length;if(\"string\"!=typeof e)return r=this,this.pushStack(b(e).filter(function(){for(t=0;i>t;t++)if(b.contains(r[t],this))return!0}));for(n=[],t=0;i>t;t++)b.find(e,this[t],n);return n=this.pushStack(i>1?b.unique(n):n),n.selector=(this.selector?this.selector+\" \":\"\")+e,n},has:function(e){var t,n=b(e,this),r=n.length;return this.filter(function(){for(t=0;r>t;t++)if(b.contains(this,n[t]))return!0})},not:function(e){return this.pushStack(ft(this,e,!1))},filter:function(e){return this.pushStack(ft(this,e,!0))},is:function(e){return!!e&&(\"string\"==typeof e?lt.test(e)?b(e,this.context).index(this[0])>=0:b.filter(e,this).length>0:this.filter(e).length>0)},closest:function(e,t){var n,r=0,i=this.length,o=[],a=lt.test(e)||\"string\"!=typeof e?b(e,t||this.context):0;for(;i>r;r++){n=this[r];while(n&&n.ownerDocument&&n!==t&&11!==n.nodeType){if(a?a.index(n)>-1:b.find.matchesSelector(n,e)){o.push(n);break}n=n.parentNode}}return this.pushStack(o.length>1?b.unique(o):o)},index:function(e){return e?\"string\"==typeof e?b.inArray(this[0],b(e)):b.inArray(e.jquery?e[0]:e,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){var n=\"string\"==typeof e?b(e,t):b.makeArray(e&&e.nodeType?[e]:e),r=b.merge(this.get(),n);return this.pushStack(b.unique(r))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),b.fn.andSelf=b.fn.addBack;function pt(e,t){do e=e[t];while(e&&1!==e.nodeType);return e}b.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return b.dir(e,\"parentNode\")},parentsUntil:function(e,t,n){return b.dir(e,\"parentNode\",n)},next:function(e){return pt(e,\"nextSibling\")},prev:function(e){return pt(e,\"previousSibling\")},nextAll:function(e){return b.dir(e,\"nextSibling\")},prevAll:function(e){return b.dir(e,\"previousSibling\")},nextUntil:function(e,t,n){return b.dir(e,\"nextSibling\",n)},prevUntil:function(e,t,n){return b.dir(e,\"previousSibling\",n)},siblings:function(e){return b.sibling((e.parentNode||{}).firstChild,e)},children:function(e){return b.sibling(e.firstChild)},contents:function(e){return b.nodeName(e,\"iframe\")?e.contentDocument||e.contentWindow.document:b.merge([],e.childNodes)}},function(e,t){b.fn[e]=function(n,r){var i=b.map(this,t,n);return at.test(e)||(r=n),r&&\"string\"==typeof r&&(i=b.filter(r,i)),i=this.length>1&&!ct[e]?b.unique(i):i,this.length>1&&st.test(e)&&(i=i.reverse()),this.pushStack(i)}}),b.extend({filter:function(e,t,n){return n&&(e=\":not(\"+e+\")\"),1===t.length?b.find.matchesSelector(t[0],e)?[t[0]]:[]:b.find.matches(e,t)},dir:function(e,n,r){var i=[],o=e[n];while(o&&9!==o.nodeType&&(r===t||1!==o.nodeType||!b(o).is(r)))1===o.nodeType&&i.push(o),o=o[n];return i},sibling:function(e,t){var n=[];for(;e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}});function ft(e,t,n){if(t=t||0,b.isFunction(t))return b.grep(e,function(e,r){var i=!!t.call(e,r,e);return i===n});if(t.nodeType)return b.grep(e,function(e){return e===t===n});if(\"string\"==typeof t){var r=b.grep(e,function(e){return 1===e.nodeType});if(ut.test(t))return b.filter(t,r,!n);t=b.filter(t,r)}return b.grep(e,function(e){return b.inArray(e,t)>=0===n})}function dt(e){var t=ht.split(\"|\"),n=e.createDocumentFragment();if(n.createElement)while(t.length)n.createElement(t.pop());return n}var ht=\"abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video\",gt=/ jQuery\\d+=\"(?:null|\\d+)\"/g,mt=RegExp(\"<(?:\"+ht+\")[\\\\s/>]\",\"i\"),yt=/^\\s+/,vt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:]+)[^>]*)\\/>/gi,bt=/<([\\w:]+)/,xt=/<tbody/i,wt=/<|&#?\\w+;/,Tt=/<(?:script|style|link)/i,Nt=/^(?:checkbox|radio)$/i,Ct=/checked\\s*(?:[^=]|=\\s*.checked.)/i,kt=/^$|\\/(?:java|ecma)script/i,Et=/^true\\/(.*)/,St=/^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g,At={option:[1,\"<select multiple='multiple'>\",\"</select>\"],legend:[1,\"<fieldset>\",\"</fieldset>\"],area:[1,\"<map>\",\"</map>\"],param:[1,\"<object>\",\"</object>\"],thead:[1,\"<table>\",\"</table>\"],tr:[2,\"<table><tbody>\",\"</tbody></table>\"],col:[2,\"<table><tbody></tbody><colgroup>\",\"</colgroup></table>\"],td:[3,\"<table><tbody><tr>\",\"</tr></tbody></table>\"],_default:b.support.htmlSerialize?[0,\"\",\"\"]:[1,\"X<div>\",\"</div>\"]},jt=dt(o),Dt=jt.appendChild(o.createElement(\"div\"));At.optgroup=At.option,At.tbody=At.tfoot=At.colgroup=At.caption=At.thead,At.th=At.td,b.fn.extend({text:function(e){return b.access(this,function(e){return e===t?b.text(this):this.empty().append((this[0]&&this[0].ownerDocument||o).createTextNode(e))},null,e,arguments.length)},wrapAll:function(e){if(b.isFunction(e))return this.each(function(t){b(this).wrapAll(e.call(this,t))});if(this[0]){var t=b(e,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){var e=this;while(e.firstChild&&1===e.firstChild.nodeType)e=e.firstChild;return e}).append(this)}return this},wrapInner:function(e){return b.isFunction(e)?this.each(function(t){b(this).wrapInner(e.call(this,t))}):this.each(function(){var t=b(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=b.isFunction(e);return this.each(function(n){b(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(){return this.parent().each(function(){b.nodeName(this,\"body\")||b(this).replaceWith(this.childNodes)}).end()},append:function(){return this.domManip(arguments,!0,function(e){(1===this.nodeType||11===this.nodeType||9===this.nodeType)&&this.appendChild(e)})},prepend:function(){return this.domManip(arguments,!0,function(e){(1===this.nodeType||11===this.nodeType||9===this.nodeType)&&this.insertBefore(e,this.firstChild)})},before:function(){return this.domManip(arguments,!1,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return this.domManip(arguments,!1,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},remove:function(e,t){var n,r=0;for(;null!=(n=this[r]);r++)(!e||b.filter(e,[n]).length>0)&&(t||1!==n.nodeType||b.cleanData(Ot(n)),n.parentNode&&(t&&b.contains(n.ownerDocument,n)&&Mt(Ot(n,\"script\")),n.parentNode.removeChild(n)));return this},empty:function(){var e,t=0;for(;null!=(e=this[t]);t++){1===e.nodeType&&b.cleanData(Ot(e,!1));while(e.firstChild)e.removeChild(e.firstChild);e.options&&b.nodeName(e,\"select\")&&(e.options.length=0)}return this},clone:function(e,t){return e=null==e?!1:e,t=null==t?e:t,this.map(function(){return b.clone(this,e,t)})},html:function(e){return b.access(this,function(e){var n=this[0]||{},r=0,i=this.length;if(e===t)return 1===n.nodeType?n.innerHTML.replace(gt,\"\"):t;if(!(\"string\"!=typeof e||Tt.test(e)||!b.support.htmlSerialize&&mt.test(e)||!b.support.leadingWhitespace&&yt.test(e)||At[(bt.exec(e)||[\"\",\"\"])[1].toLowerCase()])){e=e.replace(vt,\"<$1></$2>\");try{for(;i>r;r++)n=this[r]||{},1===n.nodeType&&(b.cleanData(Ot(n,!1)),n.innerHTML=e);n=0}catch(o){}}n&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(e){var t=b.isFunction(e);return t||\"string\"==typeof e||(e=b(e).not(this).detach()),this.domManip([e],!0,function(e){var t=this.nextSibling,n=this.parentNode;n&&(b(this).remove(),n.insertBefore(e,t))})},detach:function(e){return this.remove(e,!0)},domManip:function(e,n,r){e=f.apply([],e);var i,o,a,s,u,l,c=0,p=this.length,d=this,h=p-1,g=e[0],m=b.isFunction(g);if(m||!(1>=p||\"string\"!=typeof g||b.support.checkClone)&&Ct.test(g))return this.each(function(i){var o=d.eq(i);m&&(e[0]=g.call(this,i,n?o.html():t)),o.domManip(e,n,r)});if(p&&(l=b.buildFragment(e,this[0].ownerDocument,!1,this),i=l.firstChild,1===l.childNodes.length&&(l=i),i)){for(n=n&&b.nodeName(i,\"tr\"),s=b.map(Ot(l,\"script\"),Ht),a=s.length;p>c;c++)o=l,c!==h&&(o=b.clone(o,!0,!0),a&&b.merge(s,Ot(o,\"script\"))),r.call(n&&b.nodeName(this[c],\"table\")?Lt(this[c],\"tbody\"):this[c],o,c);if(a)for(u=s[s.length-1].ownerDocument,b.map(s,qt),c=0;a>c;c++)o=s[c],kt.test(o.type||\"\")&&!b._data(o,\"globalEval\")&&b.contains(u,o)&&(o.src?b.ajax({url:o.src,type:\"GET\",dataType:\"script\",async:!1,global:!1,\"throws\":!0}):b.globalEval((o.text||o.textContent||o.innerHTML||\"\").replace(St,\"\")));l=i=null}return this}});function Lt(e,t){return e.getElementsByTagName(t)[0]||e.appendChild(e.ownerDocument.createElement(t))}function Ht(e){var t=e.getAttributeNode(\"type\");return e.type=(t&&t.specified)+\"/\"+e.type,e}function qt(e){var t=Et.exec(e.type);return t?e.type=t[1]:e.removeAttribute(\"type\"),e}function Mt(e,t){var n,r=0;for(;null!=(n=e[r]);r++)b._data(n,\"globalEval\",!t||b._data(t[r],\"globalEval\"))}function _t(e,t){if(1===t.nodeType&&b.hasData(e)){var n,r,i,o=b._data(e),a=b._data(t,o),s=o.events;if(s){delete a.handle,a.events={};for(n in s)for(r=0,i=s[n].length;i>r;r++)b.event.add(t,n,s[n][r])}a.data&&(a.data=b.extend({},a.data))}}function Ft(e,t){var n,r,i;if(1===t.nodeType){if(n=t.nodeName.toLowerCase(),!b.support.noCloneEvent&&t[b.expando]){i=b._data(t);for(r in i.events)b.removeEvent(t,r,i.handle);t.removeAttribute(b.expando)}\"script\"===n&&t.text!==e.text?(Ht(t).text=e.text,qt(t)):\"object\"===n?(t.parentNode&&(t.outerHTML=e.outerHTML),b.support.html5Clone&&e.innerHTML&&!b.trim(t.innerHTML)&&(t.innerHTML=e.innerHTML)):\"input\"===n&&Nt.test(e.type)?(t.defaultChecked=t.checked=e.checked,t.value!==e.value&&(t.value=e.value)):\"option\"===n?t.defaultSelected=t.selected=e.defaultSelected:(\"input\"===n||\"textarea\"===n)&&(t.defaultValue=e.defaultValue)}}b.each({appendTo:\"append\",prependTo:\"prepend\",insertBefore:\"before\",insertAfter:\"after\",replaceAll:\"replaceWith\"},function(e,t){b.fn[e]=function(e){var n,r=0,i=[],o=b(e),a=o.length-1;for(;a>=r;r++)n=r===a?this:this.clone(!0),b(o[r])[t](n),d.apply(i,n.get());return this.pushStack(i)}});function Ot(e,n){var r,o,a=0,s=typeof e.getElementsByTagName!==i?e.getElementsByTagName(n||\"*\"):typeof e.querySelectorAll!==i?e.querySelectorAll(n||\"*\"):t;if(!s)for(s=[],r=e.childNodes||e;null!=(o=r[a]);a++)!n||b.nodeName(o,n)?s.push(o):b.merge(s,Ot(o,n));return n===t||n&&b.nodeName(e,n)?b.merge([e],s):s}function Bt(e){Nt.test(e.type)&&(e.defaultChecked=e.checked)}b.extend({clone:function(e,t,n){var r,i,o,a,s,u=b.contains(e.ownerDocument,e);if(b.support.html5Clone||b.isXMLDoc(e)||!mt.test(\"<\"+e.nodeName+\">\")?o=e.cloneNode(!0):(Dt.innerHTML=e.outerHTML,Dt.removeChild(o=Dt.firstChild)),!(b.support.noCloneEvent&&b.support.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||b.isXMLDoc(e)))for(r=Ot(o),s=Ot(e),a=0;null!=(i=s[a]);++a)r[a]&&Ft(i,r[a]);if(t)if(n)for(s=s||Ot(e),r=r||Ot(o),a=0;null!=(i=s[a]);a++)_t(i,r[a]);else _t(e,o);return r=Ot(o,\"script\"),r.length>0&&Mt(r,!u&&Ot(e,\"script\")),r=s=i=null,o},buildFragment:function(e,t,n,r){var i,o,a,s,u,l,c,p=e.length,f=dt(t),d=[],h=0;for(;p>h;h++)if(o=e[h],o||0===o)if(\"object\"===b.type(o))b.merge(d,o.nodeType?[o]:o);else if(wt.test(o)){s=s||f.appendChild(t.createElement(\"div\")),u=(bt.exec(o)||[\"\",\"\"])[1].toLowerCase(),c=At[u]||At._default,s.innerHTML=c[1]+o.replace(vt,\"<$1></$2>\")+c[2],i=c[0];while(i--)s=s.lastChild;if(!b.support.leadingWhitespace&&yt.test(o)&&d.push(t.createTextNode(yt.exec(o)[0])),!b.support.tbody){o=\"table\"!==u||xt.test(o)?\"<table>\"!==c[1]||xt.test(o)?0:s:s.firstChild,i=o&&o.childNodes.length;while(i--)b.nodeName(l=o.childNodes[i],\"tbody\")&&!l.childNodes.length&&o.removeChild(l)\n}b.merge(d,s.childNodes),s.textContent=\"\";while(s.firstChild)s.removeChild(s.firstChild);s=f.lastChild}else d.push(t.createTextNode(o));s&&f.removeChild(s),b.support.appendChecked||b.grep(Ot(d,\"input\"),Bt),h=0;while(o=d[h++])if((!r||-1===b.inArray(o,r))&&(a=b.contains(o.ownerDocument,o),s=Ot(f.appendChild(o),\"script\"),a&&Mt(s),n)){i=0;while(o=s[i++])kt.test(o.type||\"\")&&n.push(o)}return s=null,f},cleanData:function(e,t){var n,r,o,a,s=0,u=b.expando,l=b.cache,p=b.support.deleteExpando,f=b.event.special;for(;null!=(n=e[s]);s++)if((t||b.acceptData(n))&&(o=n[u],a=o&&l[o])){if(a.events)for(r in a.events)f[r]?b.event.remove(n,r):b.removeEvent(n,r,a.handle);l[o]&&(delete l[o],p?delete n[u]:typeof n.removeAttribute!==i?n.removeAttribute(u):n[u]=null,c.push(o))}}});var Pt,Rt,Wt,$t=/alpha\\([^)]*\\)/i,It=/opacity\\s*=\\s*([^)]*)/,zt=/^(top|right|bottom|left)$/,Xt=/^(none|table(?!-c[ea]).+)/,Ut=/^margin/,Vt=RegExp(\"^(\"+x+\")(.*)$\",\"i\"),Yt=RegExp(\"^(\"+x+\")(?!px)[a-z%]+$\",\"i\"),Jt=RegExp(\"^([+-])=(\"+x+\")\",\"i\"),Gt={BODY:\"block\"},Qt={position:\"absolute\",visibility:\"hidden\",display:\"block\"},Kt={letterSpacing:0,fontWeight:400},Zt=[\"Top\",\"Right\",\"Bottom\",\"Left\"],en=[\"Webkit\",\"O\",\"Moz\",\"ms\"];function tn(e,t){if(t in e)return t;var n=t.charAt(0).toUpperCase()+t.slice(1),r=t,i=en.length;while(i--)if(t=en[i]+n,t in e)return t;return r}function nn(e,t){return e=t||e,\"none\"===b.css(e,\"display\")||!b.contains(e.ownerDocument,e)}function rn(e,t){var n,r,i,o=[],a=0,s=e.length;for(;s>a;a++)r=e[a],r.style&&(o[a]=b._data(r,\"olddisplay\"),n=r.style.display,t?(o[a]||\"none\"!==n||(r.style.display=\"\"),\"\"===r.style.display&&nn(r)&&(o[a]=b._data(r,\"olddisplay\",un(r.nodeName)))):o[a]||(i=nn(r),(n&&\"none\"!==n||!i)&&b._data(r,\"olddisplay\",i?n:b.css(r,\"display\"))));for(a=0;s>a;a++)r=e[a],r.style&&(t&&\"none\"!==r.style.display&&\"\"!==r.style.display||(r.style.display=t?o[a]||\"\":\"none\"));return e}b.fn.extend({css:function(e,n){return b.access(this,function(e,n,r){var i,o,a={},s=0;if(b.isArray(n)){for(o=Rt(e),i=n.length;i>s;s++)a[n[s]]=b.css(e,n[s],!1,o);return a}return r!==t?b.style(e,n,r):b.css(e,n)},e,n,arguments.length>1)},show:function(){return rn(this,!0)},hide:function(){return rn(this)},toggle:function(e){var t=\"boolean\"==typeof e;return this.each(function(){(t?e:nn(this))?b(this).show():b(this).hide()})}}),b.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Wt(e,\"opacity\");return\"\"===n?\"1\":n}}}},cssNumber:{columnCount:!0,fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{\"float\":b.support.cssFloat?\"cssFloat\":\"styleFloat\"},style:function(e,n,r,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,a,s,u=b.camelCase(n),l=e.style;if(n=b.cssProps[u]||(b.cssProps[u]=tn(l,u)),s=b.cssHooks[n]||b.cssHooks[u],r===t)return s&&\"get\"in s&&(o=s.get(e,!1,i))!==t?o:l[n];if(a=typeof r,\"string\"===a&&(o=Jt.exec(r))&&(r=(o[1]+1)*o[2]+parseFloat(b.css(e,n)),a=\"number\"),!(null==r||\"number\"===a&&isNaN(r)||(\"number\"!==a||b.cssNumber[u]||(r+=\"px\"),b.support.clearCloneStyle||\"\"!==r||0!==n.indexOf(\"background\")||(l[n]=\"inherit\"),s&&\"set\"in s&&(r=s.set(e,r,i))===t)))try{l[n]=r}catch(c){}}},css:function(e,n,r,i){var o,a,s,u=b.camelCase(n);return n=b.cssProps[u]||(b.cssProps[u]=tn(e.style,u)),s=b.cssHooks[n]||b.cssHooks[u],s&&\"get\"in s&&(a=s.get(e,!0,r)),a===t&&(a=Wt(e,n,i)),\"normal\"===a&&n in Kt&&(a=Kt[n]),\"\"===r||r?(o=parseFloat(a),r===!0||b.isNumeric(o)?o||0:a):a},swap:function(e,t,n,r){var i,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];i=n.apply(e,r||[]);for(o in t)e.style[o]=a[o];return i}}),e.getComputedStyle?(Rt=function(t){return e.getComputedStyle(t,null)},Wt=function(e,n,r){var i,o,a,s=r||Rt(e),u=s?s.getPropertyValue(n)||s[n]:t,l=e.style;return s&&(\"\"!==u||b.contains(e.ownerDocument,e)||(u=b.style(e,n)),Yt.test(u)&&Ut.test(n)&&(i=l.width,o=l.minWidth,a=l.maxWidth,l.minWidth=l.maxWidth=l.width=u,u=s.width,l.width=i,l.minWidth=o,l.maxWidth=a)),u}):o.documentElement.currentStyle&&(Rt=function(e){return e.currentStyle},Wt=function(e,n,r){var i,o,a,s=r||Rt(e),u=s?s[n]:t,l=e.style;return null==u&&l&&l[n]&&(u=l[n]),Yt.test(u)&&!zt.test(n)&&(i=l.left,o=e.runtimeStyle,a=o&&o.left,a&&(o.left=e.currentStyle.left),l.left=\"fontSize\"===n?\"1em\":u,u=l.pixelLeft+\"px\",l.left=i,a&&(o.left=a)),\"\"===u?\"auto\":u});function on(e,t,n){var r=Vt.exec(t);return r?Math.max(0,r[1]-(n||0))+(r[2]||\"px\"):t}function an(e,t,n,r,i){var o=n===(r?\"border\":\"content\")?4:\"width\"===t?1:0,a=0;for(;4>o;o+=2)\"margin\"===n&&(a+=b.css(e,n+Zt[o],!0,i)),r?(\"content\"===n&&(a-=b.css(e,\"padding\"+Zt[o],!0,i)),\"margin\"!==n&&(a-=b.css(e,\"border\"+Zt[o]+\"Width\",!0,i))):(a+=b.css(e,\"padding\"+Zt[o],!0,i),\"padding\"!==n&&(a+=b.css(e,\"border\"+Zt[o]+\"Width\",!0,i)));return a}function sn(e,t,n){var r=!0,i=\"width\"===t?e.offsetWidth:e.offsetHeight,o=Rt(e),a=b.support.boxSizing&&\"border-box\"===b.css(e,\"boxSizing\",!1,o);if(0>=i||null==i){if(i=Wt(e,t,o),(0>i||null==i)&&(i=e.style[t]),Yt.test(i))return i;r=a&&(b.support.boxSizingReliable||i===e.style[t]),i=parseFloat(i)||0}return i+an(e,t,n||(a?\"border\":\"content\"),r,o)+\"px\"}function un(e){var t=o,n=Gt[e];return n||(n=ln(e,t),\"none\"!==n&&n||(Pt=(Pt||b(\"<iframe frameborder='0' width='0' height='0'/>\").css(\"cssText\",\"display:block !important\")).appendTo(t.documentElement),t=(Pt[0].contentWindow||Pt[0].contentDocument).document,t.write(\"<!doctype html><html><body>\"),t.close(),n=ln(e,t),Pt.detach()),Gt[e]=n),n}function ln(e,t){var n=b(t.createElement(e)).appendTo(t.body),r=b.css(n[0],\"display\");return n.remove(),r}b.each([\"height\",\"width\"],function(e,n){b.cssHooks[n]={get:function(e,r,i){return r?0===e.offsetWidth&&Xt.test(b.css(e,\"display\"))?b.swap(e,Qt,function(){return sn(e,n,i)}):sn(e,n,i):t},set:function(e,t,r){var i=r&&Rt(e);return on(e,t,r?an(e,n,r,b.support.boxSizing&&\"border-box\"===b.css(e,\"boxSizing\",!1,i),i):0)}}}),b.support.opacity||(b.cssHooks.opacity={get:function(e,t){return It.test((t&&e.currentStyle?e.currentStyle.filter:e.style.filter)||\"\")?.01*parseFloat(RegExp.$1)+\"\":t?\"1\":\"\"},set:function(e,t){var n=e.style,r=e.currentStyle,i=b.isNumeric(t)?\"alpha(opacity=\"+100*t+\")\":\"\",o=r&&r.filter||n.filter||\"\";n.zoom=1,(t>=1||\"\"===t)&&\"\"===b.trim(o.replace($t,\"\"))&&n.removeAttribute&&(n.removeAttribute(\"filter\"),\"\"===t||r&&!r.filter)||(n.filter=$t.test(o)?o.replace($t,i):o+\" \"+i)}}),b(function(){b.support.reliableMarginRight||(b.cssHooks.marginRight={get:function(e,n){return n?b.swap(e,{display:\"inline-block\"},Wt,[e,\"marginRight\"]):t}}),!b.support.pixelPosition&&b.fn.position&&b.each([\"top\",\"left\"],function(e,n){b.cssHooks[n]={get:function(e,r){return r?(r=Wt(e,n),Yt.test(r)?b(e).position()[n]+\"px\":r):t}}})}),b.expr&&b.expr.filters&&(b.expr.filters.hidden=function(e){return 0>=e.offsetWidth&&0>=e.offsetHeight||!b.support.reliableHiddenOffsets&&\"none\"===(e.style&&e.style.display||b.css(e,\"display\"))},b.expr.filters.visible=function(e){return!b.expr.filters.hidden(e)}),b.each({margin:\"\",padding:\"\",border:\"Width\"},function(e,t){b.cssHooks[e+t]={expand:function(n){var r=0,i={},o=\"string\"==typeof n?n.split(\" \"):[n];for(;4>r;r++)i[e+Zt[r]+t]=o[r]||o[r-2]||o[0];return i}},Ut.test(e)||(b.cssHooks[e+t].set=on)});var cn=/%20/g,pn=/\\[\\]$/,fn=/\\r?\\n/g,dn=/^(?:submit|button|image|reset|file)$/i,hn=/^(?:input|select|textarea|keygen)/i;b.fn.extend({serialize:function(){return b.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=b.prop(this,\"elements\");return e?b.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!b(this).is(\":disabled\")&&hn.test(this.nodeName)&&!dn.test(e)&&(this.checked||!Nt.test(e))}).map(function(e,t){var n=b(this).val();return null==n?null:b.isArray(n)?b.map(n,function(e){return{name:t.name,value:e.replace(fn,\"\\r\\n\")}}):{name:t.name,value:n.replace(fn,\"\\r\\n\")}}).get()}}),b.param=function(e,n){var r,i=[],o=function(e,t){t=b.isFunction(t)?t():null==t?\"\":t,i[i.length]=encodeURIComponent(e)+\"=\"+encodeURIComponent(t)};if(n===t&&(n=b.ajaxSettings&&b.ajaxSettings.traditional),b.isArray(e)||e.jquery&&!b.isPlainObject(e))b.each(e,function(){o(this.name,this.value)});else for(r in e)gn(r,e[r],n,o);return i.join(\"&\").replace(cn,\"+\")};function gn(e,t,n,r){var i;if(b.isArray(t))b.each(t,function(t,i){n||pn.test(e)?r(e,i):gn(e+\"[\"+(\"object\"==typeof i?t:\"\")+\"]\",i,n,r)});else if(n||\"object\"!==b.type(t))r(e,t);else for(i in t)gn(e+\"[\"+i+\"]\",t[i],n,r)}b.each(\"blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu\".split(\" \"),function(e,t){b.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),b.fn.hover=function(e,t){return this.mouseenter(e).mouseleave(t||e)};var mn,yn,vn=b.now(),bn=/\\?/,xn=/#.*$/,wn=/([?&])_=[^&]*/,Tn=/^(.*?):[ \\t]*([^\\r\\n]*)\\r?$/gm,Nn=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Cn=/^(?:GET|HEAD)$/,kn=/^\\/\\//,En=/^([\\w.+-]+:)(?:\\/\\/([^\\/?#:]*)(?::(\\d+)|)|)/,Sn=b.fn.load,An={},jn={},Dn=\"*/\".concat(\"*\");try{yn=a.href}catch(Ln){yn=o.createElement(\"a\"),yn.href=\"\",yn=yn.href}mn=En.exec(yn.toLowerCase())||[];function Hn(e){return function(t,n){\"string\"!=typeof t&&(n=t,t=\"*\");var r,i=0,o=t.toLowerCase().match(w)||[];if(b.isFunction(n))while(r=o[i++])\"+\"===r[0]?(r=r.slice(1)||\"*\",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function qn(e,n,r,i){var o={},a=e===jn;function s(u){var l;return o[u]=!0,b.each(e[u]||[],function(e,u){var c=u(n,r,i);return\"string\"!=typeof c||a||o[c]?a?!(l=c):t:(n.dataTypes.unshift(c),s(c),!1)}),l}return s(n.dataTypes[0])||!o[\"*\"]&&s(\"*\")}function Mn(e,n){var r,i,o=b.ajaxSettings.flatOptions||{};for(i in n)n[i]!==t&&((o[i]?e:r||(r={}))[i]=n[i]);return r&&b.extend(!0,e,r),e}b.fn.load=function(e,n,r){if(\"string\"!=typeof e&&Sn)return Sn.apply(this,arguments);var i,o,a,s=this,u=e.indexOf(\" \");return u>=0&&(i=e.slice(u,e.length),e=e.slice(0,u)),b.isFunction(n)?(r=n,n=t):n&&\"object\"==typeof n&&(a=\"POST\"),s.length>0&&b.ajax({url:e,type:a,dataType:\"html\",data:n}).done(function(e){o=arguments,s.html(i?b(\"<div>\").append(b.parseHTML(e)).find(i):e)}).complete(r&&function(e,t){s.each(r,o||[e.responseText,t,e])}),this},b.each([\"ajaxStart\",\"ajaxStop\",\"ajaxComplete\",\"ajaxError\",\"ajaxSuccess\",\"ajaxSend\"],function(e,t){b.fn[t]=function(e){return this.on(t,e)}}),b.each([\"get\",\"post\"],function(e,n){b[n]=function(e,r,i,o){return b.isFunction(r)&&(o=o||i,i=r,r=t),b.ajax({url:e,type:n,dataType:o,data:r,success:i})}}),b.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:yn,type:\"GET\",isLocal:Nn.test(mn[1]),global:!0,processData:!0,async:!0,contentType:\"application/x-www-form-urlencoded; charset=UTF-8\",accepts:{\"*\":Dn,text:\"text/plain\",html:\"text/html\",xml:\"application/xml, text/xml\",json:\"application/json, text/javascript\"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:\"responseXML\",text:\"responseText\"},converters:{\"* text\":e.String,\"text html\":!0,\"text json\":b.parseJSON,\"text xml\":b.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Mn(Mn(e,b.ajaxSettings),t):Mn(b.ajaxSettings,e)},ajaxPrefilter:Hn(An),ajaxTransport:Hn(jn),ajax:function(e,n){\"object\"==typeof e&&(n=e,e=t),n=n||{};var r,i,o,a,s,u,l,c,p=b.ajaxSetup({},n),f=p.context||p,d=p.context&&(f.nodeType||f.jquery)?b(f):b.event,h=b.Deferred(),g=b.Callbacks(\"once memory\"),m=p.statusCode||{},y={},v={},x=0,T=\"canceled\",N={readyState:0,getResponseHeader:function(e){var t;if(2===x){if(!c){c={};while(t=Tn.exec(a))c[t[1].toLowerCase()]=t[2]}t=c[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===x?a:null},setRequestHeader:function(e,t){var n=e.toLowerCase();return x||(e=v[n]=v[n]||e,y[e]=t),this},overrideMimeType:function(e){return x||(p.mimeType=e),this},statusCode:function(e){var t;if(e)if(2>x)for(t in e)m[t]=[m[t],e[t]];else N.always(e[N.status]);return this},abort:function(e){var t=e||T;return l&&l.abort(t),k(0,t),this}};if(h.promise(N).complete=g.add,N.success=N.done,N.error=N.fail,p.url=((e||p.url||yn)+\"\").replace(xn,\"\").replace(kn,mn[1]+\"//\"),p.type=n.method||n.type||p.method||p.type,p.dataTypes=b.trim(p.dataType||\"*\").toLowerCase().match(w)||[\"\"],null==p.crossDomain&&(r=En.exec(p.url.toLowerCase()),p.crossDomain=!(!r||r[1]===mn[1]&&r[2]===mn[2]&&(r[3]||(\"http:\"===r[1]?80:443))==(mn[3]||(\"http:\"===mn[1]?80:443)))),p.data&&p.processData&&\"string\"!=typeof p.data&&(p.data=b.param(p.data,p.traditional)),qn(An,p,n,N),2===x)return N;u=p.global,u&&0===b.active++&&b.event.trigger(\"ajaxStart\"),p.type=p.type.toUpperCase(),p.hasContent=!Cn.test(p.type),o=p.url,p.hasContent||(p.data&&(o=p.url+=(bn.test(o)?\"&\":\"?\")+p.data,delete p.data),p.cache===!1&&(p.url=wn.test(o)?o.replace(wn,\"$1_=\"+vn++):o+(bn.test(o)?\"&\":\"?\")+\"_=\"+vn++)),p.ifModified&&(b.lastModified[o]&&N.setRequestHeader(\"If-Modified-Since\",b.lastModified[o]),b.etag[o]&&N.setRequestHeader(\"If-None-Match\",b.etag[o])),(p.data&&p.hasContent&&p.contentType!==!1||n.contentType)&&N.setRequestHeader(\"Content-Type\",p.contentType),N.setRequestHeader(\"Accept\",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+(\"*\"!==p.dataTypes[0]?\", \"+Dn+\"; q=0.01\":\"\"):p.accepts[\"*\"]);for(i in p.headers)N.setRequestHeader(i,p.headers[i]);if(p.beforeSend&&(p.beforeSend.call(f,N,p)===!1||2===x))return N.abort();T=\"abort\";for(i in{success:1,error:1,complete:1})N[i](p[i]);if(l=qn(jn,p,n,N)){N.readyState=1,u&&d.trigger(\"ajaxSend\",[N,p]),p.async&&p.timeout>0&&(s=setTimeout(function(){N.abort(\"timeout\")},p.timeout));try{x=1,l.send(y,k)}catch(C){if(!(2>x))throw C;k(-1,C)}}else k(-1,\"No Transport\");function k(e,n,r,i){var c,y,v,w,T,C=n;2!==x&&(x=2,s&&clearTimeout(s),l=t,a=i||\"\",N.readyState=e>0?4:0,r&&(w=_n(p,N,r)),e>=200&&300>e||304===e?(p.ifModified&&(T=N.getResponseHeader(\"Last-Modified\"),T&&(b.lastModified[o]=T),T=N.getResponseHeader(\"etag\"),T&&(b.etag[o]=T)),204===e?(c=!0,C=\"nocontent\"):304===e?(c=!0,C=\"notmodified\"):(c=Fn(p,w),C=c.state,y=c.data,v=c.error,c=!v)):(v=C,(e||!C)&&(C=\"error\",0>e&&(e=0))),N.status=e,N.statusText=(n||C)+\"\",c?h.resolveWith(f,[y,C,N]):h.rejectWith(f,[N,C,v]),N.statusCode(m),m=t,u&&d.trigger(c?\"ajaxSuccess\":\"ajaxError\",[N,p,c?y:v]),g.fireWith(f,[N,C]),u&&(d.trigger(\"ajaxComplete\",[N,p]),--b.active||b.event.trigger(\"ajaxStop\")))}return N},getScript:function(e,n){return b.get(e,t,n,\"script\")},getJSON:function(e,t,n){return b.get(e,t,n,\"json\")}});function _n(e,n,r){var i,o,a,s,u=e.contents,l=e.dataTypes,c=e.responseFields;for(s in c)s in r&&(n[c[s]]=r[s]);while(\"*\"===l[0])l.shift(),o===t&&(o=e.mimeType||n.getResponseHeader(\"Content-Type\"));if(o)for(s in u)if(u[s]&&u[s].test(o)){l.unshift(s);break}if(l[0]in r)a=l[0];else{for(s in r){if(!l[0]||e.converters[s+\" \"+l[0]]){a=s;break}i||(i=s)}a=a||i}return a?(a!==l[0]&&l.unshift(a),r[a]):t}function Fn(e,t){var n,r,i,o,a={},s=0,u=e.dataTypes.slice(),l=u[0];if(e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u[1])for(i in e.converters)a[i.toLowerCase()]=e.converters[i];for(;r=u[++s];)if(\"*\"!==r){if(\"*\"!==l&&l!==r){if(i=a[l+\" \"+r]||a[\"* \"+r],!i)for(n in a)if(o=n.split(\" \"),o[1]===r&&(i=a[l+\" \"+o[0]]||a[\"* \"+o[0]])){i===!0?i=a[n]:a[n]!==!0&&(r=o[0],u.splice(s--,0,r));break}if(i!==!0)if(i&&e[\"throws\"])t=i(t);else try{t=i(t)}catch(c){return{state:\"parsererror\",error:i?c:\"No conversion from \"+l+\" to \"+r}}}l=r}return{state:\"success\",data:t}}b.ajaxSetup({accepts:{script:\"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript\"},contents:{script:/(?:java|ecma)script/},converters:{\"text script\":function(e){return b.globalEval(e),e}}}),b.ajaxPrefilter(\"script\",function(e){e.cache===t&&(e.cache=!1),e.crossDomain&&(e.type=\"GET\",e.global=!1)}),b.ajaxTransport(\"script\",function(e){if(e.crossDomain){var n,r=o.head||b(\"head\")[0]||o.documentElement;return{send:function(t,i){n=o.createElement(\"script\"),n.async=!0,e.scriptCharset&&(n.charset=e.scriptCharset),n.src=e.url,n.onload=n.onreadystatechange=function(e,t){(t||!n.readyState||/loaded|complete/.test(n.readyState))&&(n.onload=n.onreadystatechange=null,n.parentNode&&n.parentNode.removeChild(n),n=null,t||i(200,\"success\"))},r.insertBefore(n,r.firstChild)},abort:function(){n&&n.onload(t,!0)}}}});var On=[],Bn=/(=)\\?(?=&|$)|\\?\\?/;b.ajaxSetup({jsonp:\"callback\",jsonpCallback:function(){var e=On.pop()||b.expando+\"_\"+vn++;return this[e]=!0,e}}),b.ajaxPrefilter(\"json jsonp\",function(n,r,i){var o,a,s,u=n.jsonp!==!1&&(Bn.test(n.url)?\"url\":\"string\"==typeof n.data&&!(n.contentType||\"\").indexOf(\"application/x-www-form-urlencoded\")&&Bn.test(n.data)&&\"data\");return u||\"jsonp\"===n.dataTypes[0]?(o=n.jsonpCallback=b.isFunction(n.jsonpCallback)?n.jsonpCallback():n.jsonpCallback,u?n[u]=n[u].replace(Bn,\"$1\"+o):n.jsonp!==!1&&(n.url+=(bn.test(n.url)?\"&\":\"?\")+n.jsonp+\"=\"+o),n.converters[\"script json\"]=function(){return s||b.error(o+\" was not called\"),s[0]},n.dataTypes[0]=\"json\",a=e[o],e[o]=function(){s=arguments},i.always(function(){e[o]=a,n[o]&&(n.jsonpCallback=r.jsonpCallback,On.push(o)),s&&b.isFunction(a)&&a(s[0]),s=a=t}),\"script\"):t});var Pn,Rn,Wn=0,$n=e.ActiveXObject&&function(){var e;for(e in Pn)Pn[e](t,!0)};function In(){try{return new e.XMLHttpRequest}catch(t){}}function zn(){try{return new e.ActiveXObject(\"Microsoft.XMLHTTP\")}catch(t){}}b.ajaxSettings.xhr=e.ActiveXObject?function(){return!this.isLocal&&In()||zn()}:In,Rn=b.ajaxSettings.xhr(),b.support.cors=!!Rn&&\"withCredentials\"in Rn,Rn=b.support.ajax=!!Rn,Rn&&b.ajaxTransport(function(n){if(!n.crossDomain||b.support.cors){var r;return{send:function(i,o){var a,s,u=n.xhr();if(n.username?u.open(n.type,n.url,n.async,n.username,n.password):u.open(n.type,n.url,n.async),n.xhrFields)for(s in n.xhrFields)u[s]=n.xhrFields[s];n.mimeType&&u.overrideMimeType&&u.overrideMimeType(n.mimeType),n.crossDomain||i[\"X-Requested-With\"]||(i[\"X-Requested-With\"]=\"XMLHttpRequest\");try{for(s in i)u.setRequestHeader(s,i[s])}catch(l){}u.send(n.hasContent&&n.data||null),r=function(e,i){var s,l,c,p;try{if(r&&(i||4===u.readyState))if(r=t,a&&(u.onreadystatechange=b.noop,$n&&delete Pn[a]),i)4!==u.readyState&&u.abort();else{p={},s=u.status,l=u.getAllResponseHeaders(),\"string\"==typeof u.responseText&&(p.text=u.responseText);try{c=u.statusText}catch(f){c=\"\"}s||!n.isLocal||n.crossDomain?1223===s&&(s=204):s=p.text?200:404}}catch(d){i||o(-1,d)}p&&o(s,c,p,l)},n.async?4===u.readyState?setTimeout(r):(a=++Wn,$n&&(Pn||(Pn={},b(e).unload($n)),Pn[a]=r),u.onreadystatechange=r):r()},abort:function(){r&&r(t,!0)}}}});var Xn,Un,Vn=/^(?:toggle|show|hide)$/,Yn=RegExp(\"^(?:([+-])=|)(\"+x+\")([a-z%]*)$\",\"i\"),Jn=/queueHooks$/,Gn=[nr],Qn={\"*\":[function(e,t){var n,r,i=this.createTween(e,t),o=Yn.exec(t),a=i.cur(),s=+a||0,u=1,l=20;if(o){if(n=+o[2],r=o[3]||(b.cssNumber[e]?\"\":\"px\"),\"px\"!==r&&s){s=b.css(i.elem,e,!0)||n||1;do u=u||\".5\",s/=u,b.style(i.elem,e,s+r);while(u!==(u=i.cur()/a)&&1!==u&&--l)}i.unit=r,i.start=s,i.end=o[1]?s+(o[1]+1)*n:n}return i}]};function Kn(){return setTimeout(function(){Xn=t}),Xn=b.now()}function Zn(e,t){b.each(t,function(t,n){var r=(Qn[t]||[]).concat(Qn[\"*\"]),i=0,o=r.length;for(;o>i;i++)if(r[i].call(e,t,n))return})}function er(e,t,n){var r,i,o=0,a=Gn.length,s=b.Deferred().always(function(){delete u.elem}),u=function(){if(i)return!1;var t=Xn||Kn(),n=Math.max(0,l.startTime+l.duration-t),r=n/l.duration||0,o=1-r,a=0,u=l.tweens.length;for(;u>a;a++)l.tweens[a].run(o);return s.notifyWith(e,[l,o,n]),1>o&&u?n:(s.resolveWith(e,[l]),!1)},l=s.promise({elem:e,props:b.extend({},t),opts:b.extend(!0,{specialEasing:{}},n),originalProperties:t,originalOptions:n,startTime:Xn||Kn(),duration:n.duration,tweens:[],createTween:function(t,n){var r=b.Tween(e,l.opts,t,n,l.opts.specialEasing[t]||l.opts.easing);return l.tweens.push(r),r},stop:function(t){var n=0,r=t?l.tweens.length:0;if(i)return this;for(i=!0;r>n;n++)l.tweens[n].run(1);return t?s.resolveWith(e,[l,t]):s.rejectWith(e,[l,t]),this}}),c=l.props;for(tr(c,l.opts.specialEasing);a>o;o++)if(r=Gn[o].call(l,e,c,l.opts))return r;return Zn(l,c),b.isFunction(l.opts.start)&&l.opts.start.call(e,l),b.fx.timer(b.extend(u,{elem:e,anim:l,queue:l.opts.queue})),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always)}function tr(e,t){var n,r,i,o,a;for(i in e)if(r=b.camelCase(i),o=t[r],n=e[i],b.isArray(n)&&(o=n[1],n=e[i]=n[0]),i!==r&&(e[r]=n,delete e[i]),a=b.cssHooks[r],a&&\"expand\"in a){n=a.expand(n),delete e[r];for(i in n)i in e||(e[i]=n[i],t[i]=o)}else t[r]=o}b.Animation=b.extend(er,{tweener:function(e,t){b.isFunction(e)?(t=e,e=[\"*\"]):e=e.split(\" \");var n,r=0,i=e.length;for(;i>r;r++)n=e[r],Qn[n]=Qn[n]||[],Qn[n].unshift(t)},prefilter:function(e,t){t?Gn.unshift(e):Gn.push(e)}});function nr(e,t,n){var r,i,o,a,s,u,l,c,p,f=this,d=e.style,h={},g=[],m=e.nodeType&&nn(e);n.queue||(c=b._queueHooks(e,\"fx\"),null==c.unqueued&&(c.unqueued=0,p=c.empty.fire,c.empty.fire=function(){c.unqueued||p()}),c.unqueued++,f.always(function(){f.always(function(){c.unqueued--,b.queue(e,\"fx\").length||c.empty.fire()})})),1===e.nodeType&&(\"height\"in t||\"width\"in t)&&(n.overflow=[d.overflow,d.overflowX,d.overflowY],\"inline\"===b.css(e,\"display\")&&\"none\"===b.css(e,\"float\")&&(b.support.inlineBlockNeedsLayout&&\"inline\"!==un(e.nodeName)?d.zoom=1:d.display=\"inline-block\")),n.overflow&&(d.overflow=\"hidden\",b.support.shrinkWrapBlocks||f.always(function(){d.overflow=n.overflow[0],d.overflowX=n.overflow[1],d.overflowY=n.overflow[2]}));for(i in t)if(a=t[i],Vn.exec(a)){if(delete t[i],u=u||\"toggle\"===a,a===(m?\"hide\":\"show\"))continue;g.push(i)}if(o=g.length){s=b._data(e,\"fxshow\")||b._data(e,\"fxshow\",{}),\"hidden\"in s&&(m=s.hidden),u&&(s.hidden=!m),m?b(e).show():f.done(function(){b(e).hide()}),f.done(function(){var t;b._removeData(e,\"fxshow\");for(t in h)b.style(e,t,h[t])});for(i=0;o>i;i++)r=g[i],l=f.createTween(r,m?s[r]:0),h[r]=s[r]||b.style(e,r),r in s||(s[r]=l.start,m&&(l.end=l.start,l.start=\"width\"===r||\"height\"===r?1:0))}}function rr(e,t,n,r,i){return new rr.prototype.init(e,t,n,r,i)}b.Tween=rr,rr.prototype={constructor:rr,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||\"swing\",this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(b.cssNumber[n]?\"\":\"px\")},cur:function(){var e=rr.propHooks[this.prop];return e&&e.get?e.get(this):rr.propHooks._default.get(this)},run:function(e){var t,n=rr.propHooks[this.prop];return this.pos=t=this.options.duration?b.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):rr.propHooks._default.set(this),this}},rr.prototype.init.prototype=rr.prototype,rr.propHooks={_default:{get:function(e){var t;return null==e.elem[e.prop]||e.elem.style&&null!=e.elem.style[e.prop]?(t=b.css(e.elem,e.prop,\"\"),t&&\"auto\"!==t?t:0):e.elem[e.prop]},set:function(e){b.fx.step[e.prop]?b.fx.step[e.prop](e):e.elem.style&&(null!=e.elem.style[b.cssProps[e.prop]]||b.cssHooks[e.prop])?b.style(e.elem,e.prop,e.now+e.unit):e.elem[e.prop]=e.now}}},rr.propHooks.scrollTop=rr.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},b.each([\"toggle\",\"show\",\"hide\"],function(e,t){var n=b.fn[t];b.fn[t]=function(e,r,i){return null==e||\"boolean\"==typeof e?n.apply(this,arguments):this.animate(ir(t,!0),e,r,i)}}),b.fn.extend({fadeTo:function(e,t,n,r){return this.filter(nn).css(\"opacity\",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=b.isEmptyObject(e),o=b.speed(t,n,r),a=function(){var t=er(this,b.extend({},e),o);a.finish=function(){t.stop(!0)},(i||b._data(this,\"finish\"))&&t.stop(!0)};return a.finish=a,i||o.queue===!1?this.each(a):this.queue(o.queue,a)},stop:function(e,n,r){var i=function(e){var t=e.stop;delete e.stop,t(r)};return\"string\"!=typeof e&&(r=n,n=e,e=t),n&&e!==!1&&this.queue(e||\"fx\",[]),this.each(function(){var t=!0,n=null!=e&&e+\"queueHooks\",o=b.timers,a=b._data(this);if(n)a[n]&&a[n].stop&&i(a[n]);else for(n in a)a[n]&&a[n].stop&&Jn.test(n)&&i(a[n]);for(n=o.length;n--;)o[n].elem!==this||null!=e&&o[n].queue!==e||(o[n].anim.stop(r),t=!1,o.splice(n,1));(t||!r)&&b.dequeue(this,e)})},finish:function(e){return e!==!1&&(e=e||\"fx\"),this.each(function(){var t,n=b._data(this),r=n[e+\"queue\"],i=n[e+\"queueHooks\"],o=b.timers,a=r?r.length:0;for(n.finish=!0,b.queue(this,e,[]),i&&i.cur&&i.cur.finish&&i.cur.finish.call(this),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;a>t;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}});function ir(e,t){var n,r={height:e},i=0;for(t=t?1:0;4>i;i+=2-t)n=Zt[i],r[\"margin\"+n]=r[\"padding\"+n]=e;return t&&(r.opacity=r.width=e),r}b.each({slideDown:ir(\"show\"),slideUp:ir(\"hide\"),slideToggle:ir(\"toggle\"),fadeIn:{opacity:\"show\"},fadeOut:{opacity:\"hide\"},fadeToggle:{opacity:\"toggle\"}},function(e,t){b.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),b.speed=function(e,t,n){var r=e&&\"object\"==typeof e?b.extend({},e):{complete:n||!n&&t||b.isFunction(e)&&e,duration:e,easing:n&&t||t&&!b.isFunction(t)&&t};return r.duration=b.fx.off?0:\"number\"==typeof r.duration?r.duration:r.duration in b.fx.speeds?b.fx.speeds[r.duration]:b.fx.speeds._default,(null==r.queue||r.queue===!0)&&(r.queue=\"fx\"),r.old=r.complete,r.complete=function(){b.isFunction(r.old)&&r.old.call(this),r.queue&&b.dequeue(this,r.queue)},r},b.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2}},b.timers=[],b.fx=rr.prototype.init,b.fx.tick=function(){var e,n=b.timers,r=0;for(Xn=b.now();n.length>r;r++)e=n[r],e()||n[r]!==e||n.splice(r--,1);n.length||b.fx.stop(),Xn=t},b.fx.timer=function(e){e()&&b.timers.push(e)&&b.fx.start()},b.fx.interval=13,b.fx.start=function(){Un||(Un=setInterval(b.fx.tick,b.fx.interval))},b.fx.stop=function(){clearInterval(Un),Un=null},b.fx.speeds={slow:600,fast:200,_default:400},b.fx.step={},b.expr&&b.expr.filters&&(b.expr.filters.animated=function(e){return b.grep(b.timers,function(t){return e===t.elem}).length}),b.fn.offset=function(e){if(arguments.length)return e===t?this:this.each(function(t){b.offset.setOffset(this,e,t)});var n,r,o={top:0,left:0},a=this[0],s=a&&a.ownerDocument;if(s)return n=s.documentElement,b.contains(n,a)?(typeof a.getBoundingClientRect!==i&&(o=a.getBoundingClientRect()),r=or(s),{top:o.top+(r.pageYOffset||n.scrollTop)-(n.clientTop||0),left:o.left+(r.pageXOffset||n.scrollLeft)-(n.clientLeft||0)}):o},b.offset={setOffset:function(e,t,n){var r=b.css(e,\"position\");\"static\"===r&&(e.style.position=\"relative\");var i=b(e),o=i.offset(),a=b.css(e,\"top\"),s=b.css(e,\"left\"),u=(\"absolute\"===r||\"fixed\"===r)&&b.inArray(\"auto\",[a,s])>-1,l={},c={},p,f;u?(c=i.position(),p=c.top,f=c.left):(p=parseFloat(a)||0,f=parseFloat(s)||0),b.isFunction(t)&&(t=t.call(e,n,o)),null!=t.top&&(l.top=t.top-o.top+p),null!=t.left&&(l.left=t.left-o.left+f),\"using\"in t?t.using.call(e,l):i.css(l)}},b.fn.extend({position:function(){if(this[0]){var e,t,n={top:0,left:0},r=this[0];return\"fixed\"===b.css(r,\"position\")?t=r.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),b.nodeName(e[0],\"html\")||(n=e.offset()),n.top+=b.css(e[0],\"borderTopWidth\",!0),n.left+=b.css(e[0],\"borderLeftWidth\",!0)),{top:t.top-n.top-b.css(r,\"marginTop\",!0),left:t.left-n.left-b.css(r,\"marginLeft\",!0)}}},offsetParent:function(){return this.map(function(){var e=this.offsetParent||o.documentElement;while(e&&!b.nodeName(e,\"html\")&&\"static\"===b.css(e,\"position\"))e=e.offsetParent;return e||o.documentElement})}}),b.each({scrollLeft:\"pageXOffset\",scrollTop:\"pageYOffset\"},function(e,n){var r=/Y/.test(n);b.fn[e]=function(i){return b.access(this,function(e,i,o){var a=or(e);return o===t?a?n in a?a[n]:a.document.documentElement[i]:e[i]:(a?a.scrollTo(r?b(a).scrollLeft():o,r?o:b(a).scrollTop()):e[i]=o,t)},e,i,arguments.length,null)}});function or(e){return b.isWindow(e)?e:9===e.nodeType?e.defaultView||e.parentWindow:!1}b.each({Height:\"height\",Width:\"width\"},function(e,n){b.each({padding:\"inner\"+e,content:n,\"\":\"outer\"+e},function(r,i){b.fn[i]=function(i,o){var a=arguments.length&&(r||\"boolean\"!=typeof i),s=r||(i===!0||o===!0?\"margin\":\"border\");return b.access(this,function(n,r,i){var o;return b.isWindow(n)?n.document.documentElement[\"client\"+e]:9===n.nodeType?(o=n.documentElement,Math.max(n.body[\"scroll\"+e],o[\"scroll\"+e],n.body[\"offset\"+e],o[\"offset\"+e],o[\"client\"+e])):i===t?b.css(n,r,s):b.style(n,r,i,s)},n,a?i:t,a,null)}})}),e.jQuery=e.$=b,\"function\"==typeof define&&define.amd&&define.amd.jQuery&&define(\"jquery\",[],function(){return b})})(window);"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 92717
        },
        "cache": {},
        "timings": {
          "blocked": 3.10400000307709,
          "dns": -1,
          "connect": -1,
          "send": 0.5900000105612002,
          "wait": 167.69599998951873,
          "receive": 512.7879999927247,
          "ssl": -1
        },
        "serverIPAddress": "133.242.206.244",
        "connection": "693217",
        "pageref": "page_1"
      },
      {
        "startedDateTime": "2017-06-28T09:37:40.743Z",
        "time": 684.6680000016931,
        "request": {
          "method": "GET",
          "url": "https://h2o.examp1e.net/search/oktavia-jquery-ui.js",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": ":path",
              "value": "/search/oktavia-jquery-ui.js"
            },
            {
              "name": "pragma",
              "value": "no-cache"
            },
            {
              "name": "accept-encoding",
              "value": "gzip, deflate, sdch, br"
            },
            {
              "name": "accept-language",
              "value": "en-CA,en;q=0.8,en-US;q=0.6,de;q=0.4,en-GB;q=0.2,ko;q=0.2"
            },
            {
              "name": "user-agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36"
            },
            {
              "name": "accept",
              "value": "*/*"
            },
            {
              "name": "cache-control",
              "value": "no-cache"
            },
            {
              "name": ":authority",
              "value": "h2o.examp1e.net"
            },
            {
              "name": "cookie",
              "value": "h2o_casper=AmgAAAAAAAAAAAAY1oiCMAAAApA"
            },
            {
              "name": ":scheme",
              "value": "https"
            },
            {
              "name": "referer",
              "value": "https://h2o.examp1e.net/"
            },
            {
              "name": ":method",
              "value": "GET"
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "h2o_casper",
              "value": "AmgAAAAAAAAAAAAY1oiCMAAAApA",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "date",
              "value": "Wed, 28 Jun 2017 09:37:40 GMT"
            },
            {
              "name": "last-modified",
              "value": "Thu, 14 May 2015 04:10:14 GMT"
            },
            {
              "name": "server",
              "value": "h2o/2.2.0-beta2"
            },
            {
              "name": "etag",
              "value": "\"55542026-1388\""
            },
            {
              "name": "content-type",
              "value": "application/javascript"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "set-cookie",
              "value": "h2o_casper=AmgAAAAAAAAAAAAY1oiCMAAAApA; Path=/; Expires=Tue, 01 Jan 2030 00:00:00 GMT; Secure"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "content-length",
              "value": "5000"
            }
          ],
          "cookies": [
            {
              "name": "h2o_casper",
              "value": "AmgAAAAAAAAAAAAY1oiCMAAAApA",
              "path": "/",
              "expires": "2030-01-01T00:00:00.000Z",
              "httpOnly": false,
              "secure": true
            }
          ],
          "content": {
            "size": 5000,
            "mimeType": "application/javascript",
            "text": "$(document).ready(function ()\n{\n    // it stores search object\n    var searchInstance;\n\n    function changePage(event)\n    {\n        searchInstance.setCurrentPage$I(event.data);\n        updateResult();\n    }\n\n    function clearResult()\n    {\n        $('#search').val('');\n        $('#searchresult_box').fadeOut();\n    }\n\n    // http://os0x.hatenablog.com/entry/20080827/1219815828\n    function JavaScriptLoader(src, callback)\n    {\n        var sc = document.createElement('script');\n        sc.type = 'text/javascript';\n        if (window.ActiveXObject)\n        {\n            sc.onreadystatechange = function()\n            {\n                if (sc.readyState == 'complete' || sc.readyState == 'loaded')\n                {\n                    callback(sc.readyState);\n                }\n            };\n        }\n        else\n        {\n            sc.onload = function()\n            {\n                callback('onload');\n            };\n        }\n        sc.src = src;\n        document.body.appendChild(sc);\n    }\n\n    function updateResult()\n    {\n        var totalPages = searchInstance.totalPages$();\n        var currentPage = searchInstance.currentPage$();\n        var nav = $('#searchresult_nav');\n        var resultslot = $('#searchresult');\n        nav.empty();\n        resultslot.empty();\n        var i;\n        for (i = 1; i <= totalPages; i++)\n        {\n            var pageItem = $('<span/>').text(i);\n            if (i !== currentPage)\n            {\n                pageItem.bind('click', i, changePage);\n            }\n            else\n            {\n                pageItem.addClass('selected');\n            }\n            nav.append(pageItem);\n        }\n        var results = searchInstance.getResult$();\n        for (i = 0; i < results.length; i++)\n        {\n            var result = results[i];\n            var url = result.url.slice(1);\n            var entry = $('<div/>', { \"class\": \"entry\" });\n            var link = $('<a/>', { \"href\": url }).text(result.title);\n            link.on('click', clearResult);\n            entry.append($('<div/>', { \"class\": \"title\" }).append(link));\n            entry.append($('<div/>', { \"class\": \"url\" }).text(url));\n            entry.append($('<div/>', { \"class\": \"content\" }).html(result.content));\n            resultslot.append(entry);\n        }\n    }\n\n    function searchProposal(event)\n    {\n        $('#search').val(event.data.option);\n        search();\n    }\n\n    function updateProposal()\n    {\n        var nav = $('#searchresult_nav');\n        var resultslot = $('#searchresult');\n        nav.empty();\n        resultslot.empty();\n        var proposals = searchInstance.getProposals$();\n        for (var i = 0; i < proposals.length; i++)\n        {\n            var proposal = proposals[i];\n            var listitem = $('<div/>', {\"class\": \"proposal\"});\n            listitem.append('<span>Search with:&nbsp;</span>');\n            var option = $('<span/>', {\"class\": \"option\"});\n            option.html(proposal.label);\n            option.on('click', {'option': proposal.options}, searchProposal);\n            listitem.append(option);\n            listitem.append('<span>&nbsp;&#x2192;&nbsp;' + proposal.count + ' results.</span>');\n            resultslot.append(listitem);\n        }\n    }\n\n    function search ()\n    {\n        var queryWord = $('#search').val();\n        searchInstance.search$SF$IIV$(queryWord, function (total, pages)\n        {\n            $('#searchresult_box').fadeIn();\n            console.log(\"Total: \", total);\n            if (total === 0)\n            {\n                $('#searchresult_summary').text(\"No result.\");\n                updateProposal();\n            }\n            else\n            {\n                $('#searchresult_summary').text(total + ' results.');\n                updateResult();\n            }\n        });\n    }\n\n    // initialize function\n    function initialize ()\n    {\n        if (!searchInstance)\n        {\n            var OktaviaSearch = JSX.require(\"tool/web/oktavia-search.jsx\").OktaviaSearch$I;\n            searchInstance = new OktaviaSearch(5);\n        }\n        JavaScriptLoader('search/searchindex.js', function ()\n        {\n            searchInstance.loadIndex$S(searchIndex);\n            searchIndex = null;\n        });\n        $('#searchform').on('submit', function (event) {\n            event.stopPropagation();\n            setTimeout(search, 10);\n            return false;\n        });\n        $('#close_search_box').on('click', function (event) {\n            clearResult();\n        });\n    }\n    initialize();\n});\n\n/*function keyboardHook(event)\n{\n    if (event.keyCode === 191 && document.activeElement.id !== searchBoxId) // slash\n    {\n        document.getElementById(searchBoxId).focus();\n    }\n}\n\nif (window.addEventListener)\n{\n    window.addEventListener('load', initialize, false);\n    document.addEventListener(\"keydown\" , keyboardHook);\n}\nif (window.attachEvent)\n{\n    window.attachEvent('onload', initialize);\n    document.attachEvent(\"onkeydown\" , keyboardHook);\n}\n\n})();\n});\n*/\n\n"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 5033
        },
        "cache": {},
        "timings": {
          "blocked": 3.12800001120195,
          "dns": -1,
          "connect": -1,
          "send": 0.4090000002179299,
          "wait": 168.53600001195412,
          "receive": 512.5949999783192,
          "ssl": -1
        },
        "serverIPAddress": "133.242.206.244",
        "connection": "693217",
        "pageref": "page_1"
      },
      {
        "startedDateTime": "2017-06-28T09:37:40.744Z",
        "time": 817.5029999983963,
        "request": {
          "method": "GET",
          "url": "https://h2o.examp1e.net/search/oktavia-english-search.js",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": ":path",
              "value": "/search/oktavia-english-search.js"
            },
            {
              "name": "pragma",
              "value": "no-cache"
            },
            {
              "name": "accept-encoding",
              "value": "gzip, deflate, sdch, br"
            },
            {
              "name": "accept-language",
              "value": "en-CA,en;q=0.8,en-US;q=0.6,de;q=0.4,en-GB;q=0.2,ko;q=0.2"
            },
            {
              "name": "user-agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36"
            },
            {
              "name": "accept",
              "value": "*/*"
            },
            {
              "name": "cache-control",
              "value": "no-cache"
            },
            {
              "name": ":authority",
              "value": "h2o.examp1e.net"
            },
            {
              "name": "cookie",
              "value": "h2o_casper=AmgAAAAAAAAAAAAY1oiCMAAAApA"
            },
            {
              "name": ":scheme",
              "value": "https"
            },
            {
              "name": "referer",
              "value": "https://h2o.examp1e.net/"
            },
            {
              "name": ":method",
              "value": "GET"
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "h2o_casper",
              "value": "AmgAAAAAAAAAAAAY1oiCMAAAApA",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "date",
              "value": "Wed, 28 Jun 2017 09:37:40 GMT"
            },
            {
              "name": "last-modified",
              "value": "Thu, 14 May 2015 04:10:14 GMT"
            },
            {
              "name": "server",
              "value": "h2o/2.2.0-beta2"
            },
            {
              "name": "etag",
              "value": "\"55542026-34dd6\""
            },
            {
              "name": "content-type",
              "value": "application/javascript"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "set-cookie",
              "value": "h2o_casper=AmgAAAAAAAAAAAAY1oiCMAAAApA; Path=/; Expires=Tue, 01 Jan 2030 00:00:00 GMT; Secure"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "content-length",
              "value": "216534"
            }
          ],
          "cookies": [
            {
              "name": "h2o_casper",
              "value": "AmgAAAAAAAAAAAAY1oiCMAAAApA",
              "path": "/",
              "expires": "2030-01-01T00:00:00.000Z",
              "httpOnly": false,
              "secure": true
            }
          ],
          "content": {
            "size": 216534,
            "mimeType": "application/javascript",
            "text": "// generatedy by JSX compiler 0.9.10 (2013-02-22 10:18:33 +0900; e3a1f2a04656dbfd626086b3c68606d0c9697212)\nvar JSX = {};\n(function (JSX) {\n/**\n * copies the implementations from source interface to target\n */\nfunction $__jsx_merge_interface(target, source) {\n\tfor (var k in source.prototype)\n\t\tif (source.prototype.hasOwnProperty(k))\n\t\t\ttarget.prototype[k] = source.prototype[k];\n}\n\n/**\n * defers the initialization of the property\n */\nfunction $__jsx_lazy_init(obj, prop, func) {\n\tfunction reset(obj, prop, value) {\n\t\tdelete obj[prop];\n\t\tobj[prop] = value;\n\t\treturn value;\n\t}\n\n\tObject.defineProperty(obj, prop, {\n\t\tget: function () {\n\t\t\treturn reset(obj, prop, func());\n\t\t},\n\t\tset: function (v) {\n\t\t\treset(obj, prop, v);\n\t\t},\n\t\tenumerable: true,\n\t\tconfigurable: true\n\t});\n}\n\n/**\n * sideeffect().a /= b\n */\nfunction $__jsx_div_assign(obj, prop, divisor) {\n\treturn obj[prop] = (obj[prop] / divisor) | 0;\n}\n\n/*\n * global functions, renamed to avoid conflict with local variable names\n */\nvar $__jsx_parseInt = parseInt;\nvar $__jsx_parseFloat = parseFloat;\nvar $__jsx_isNaN = isNaN;\nvar $__jsx_isFinite = isFinite;\n\nvar $__jsx_encodeURIComponent = encodeURIComponent;\nvar $__jsx_decodeURIComponent = decodeURIComponent;\nvar $__jsx_encodeURI = encodeURI;\nvar $__jsx_decodeURI = decodeURI;\n\nvar $__jsx_ObjectToString = Object.prototype.toString;\nvar $__jsx_ObjectHasOwnProperty = Object.prototype.hasOwnProperty;\n\n/*\n * profiler object, initialized afterwards\n */\nfunction $__jsx_profiler() {\n}\n\n/*\n * public interface to JSX code\n */\nJSX.require = function (path) {\n\tvar m = $__jsx_classMap[path];\n\treturn m !== undefined ? m : null;\n};\n\nJSX.profilerIsRunning = function () {\n\treturn $__jsx_profiler.getResults != null;\n};\n\nJSX.getProfileResults = function () {\n\treturn ($__jsx_profiler.getResults || function () { return {}; })();\n};\n\nJSX.postProfileResults = function (url) {\n\tif ($__jsx_profiler.postResults == null)\n\t\tthrow new Error(\"profiler has not been turned on\");\n\treturn $__jsx_profiler.postResults(url);\n};\n\nJSX.resetProfileResults = function () {\n\tif ($__jsx_profiler.resetResults == null)\n\t\tthrow new Error(\"profiler has not been turned on\");\n\treturn $__jsx_profiler.resetResults();\n};\nJSX.DEBUG = true;\n/**\n * class _Main extends Object\n * @constructor\n */\nfunction _Main() {\n}\n\n/**\n * @constructor\n */\nfunction _Main$() {\n};\n\n_Main$.prototype = new _Main;\n\n/**\n * @param {Array.<undefined|!string>} args\n */\n_Main.main$AS = function (args) {\n\tOktaviaSearch$setStemmer$LStemmer$(new EnglishStemmer$());\n};\n\nvar _Main$main$AS = _Main.main$AS;\n\n/**\n * class _Result extends Object\n * @constructor\n */\nfunction _Result() {\n}\n\n/**\n * @constructor\n * @param {!string} title\n * @param {!string} url\n * @param {!string} content\n * @param {!number} score\n */\nfunction _Result$SSSI(title, url, content, score) {\n\tthis.title = title;\n\tthis.url = url;\n\tthis.content = content;\n\tthis.score = score;\n};\n\n_Result$SSSI.prototype = new _Result;\n\n/**\n * class _Proposal extends Object\n * @constructor\n */\nfunction _Proposal() {\n}\n\n/**\n * @constructor\n * @param {!string} options\n * @param {!string} label\n * @param {!number} count\n */\nfunction _Proposal$SSI(options, label, count) {\n\tthis.options = options;\n\tthis.label = label;\n\tthis.count = count;\n};\n\n_Proposal$SSI.prototype = new _Proposal;\n\n/**\n * class OktaviaSearch extends Object\n * @constructor\n */\nfunction OktaviaSearch() {\n}\n\n/**\n * @constructor\n * @param {!number} entriesPerPage\n */\nfunction OktaviaSearch$I(entriesPerPage) {\n\tthis._queries = null;\n\tthis._result = null;\n\tthis._proposals = null;\n\tthis._currentFolderDepth = 0;\n\tthis._oktavia = new Oktavia$();\n\tthis._entriesPerPage = entriesPerPage;\n\tthis._currentPage = 1;\n\tthis._queryString = null;\n\tthis._callback = null;\n\tOktaviaSearch._instance = this;\n};\n\nOktaviaSearch$I.prototype = new OktaviaSearch;\n\n/**\n * @param {Stemmer} stemmer\n */\nOktaviaSearch.setStemmer$LStemmer$ = function (stemmer) {\n\tif (OktaviaSearch._instance) {\n\t\tOktaviaSearch._instance._oktavia.setStemmer$LStemmer$(stemmer);\n\t} else {\n\t\tOktaviaSearch._stemmer = stemmer;\n\t}\n};\n\nvar OktaviaSearch$setStemmer$LStemmer$ = OktaviaSearch.setStemmer$LStemmer$;\n\n/**\n * @param {!string} index\n */\nOktaviaSearch.prototype.loadIndex$S = function (index) {\n\tif (OktaviaSearch._stemmer) {\n\t\tthis._oktavia.setStemmer$LStemmer$(OktaviaSearch._stemmer);\n\t}\n\tthis._oktavia.load$S(Binary$base64decode$S(index));\n\tif (this._queryString) {\n\t\tthis.search$SF$IIV$((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[tool/web/oktavia-search.jsx:84:28] null access\\n            this.search(this._queryString, this._callback);\\n                            ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(this._queryString)), this._callback);\n\t\tthis._queryString = null;\n\t\tthis._callback = null;\n\t}\n};\n\n/**\n * @param {!string} queryString\n * @param {*} callback\n */\nOktaviaSearch.prototype.search$SF$IIV$ = function (queryString, callback) {\n\t/** @type {QueryStringParser} */\n\tvar queryParser;\n\t/** @type {SearchSummary} */\n\tvar summary;\n\tif (this._oktavia) {\n\t\tqueryParser = new QueryStringParser$();\n\t\tqueryParser.parse$S(queryString);\n\t\tthis._queries = queryParser.queries;\n\t\tsummary = this._oktavia.search$ALQuery$(queryParser.queries);\n\t\tconsole.log(summary);\n\t\tif (summary.size$() > 0) {\n\t\t\tthis._result = this._sortResult$LSearchSummary$(summary);\n\t\t\tthis._proposals = [  ];\n\t\t\tthis._currentPage = 1;\n\t\t} else {\n\t\t\tthis._result = [  ];\n\t\t\tif (this._queries.length > 1) {\n\t\t\t\tthis._proposals = summary.getProposal$();\n\t\t\t} else {\n\t\t\t\tthis._proposals = [  ];\n\t\t\t}\n\t\t\tthis._currentPage = 1;\n\t\t}\n\t\tcallback(this.resultSize$(), this.totalPages$());\n\t} else {\n\t\tthis._queryString = queryString;\n\t\tthis._callback = callback;\n\t}\n};\n\n/**\n * @return {!number}\n */\nOktaviaSearch.prototype.resultSize$ = function () {\n\treturn (this._result.length | 0);\n};\n\n/**\n * @return {!number}\n */\nOktaviaSearch.prototype.totalPages$ = function () {\n\tconsole.log(this._result.length);\n\tconsole.log(this._entriesPerPage);\n\tconsole.log(Math.ceil(this._result.length / this._entriesPerPage));\n\treturn (Math.ceil(this._result.length / this._entriesPerPage) | 0);\n};\n\n/**\n * @return {!number}\n */\nOktaviaSearch.prototype.currentPage$ = function () {\n\treturn this._currentPage;\n};\n\n/**\n * @param {!number} page\n */\nOktaviaSearch.prototype.setCurrentPage$I = function (page) {\n\tthis._currentPage = page;\n};\n\n/**\n * @return {!boolean}\n */\nOktaviaSearch.prototype.hasPrevPage$ = function () {\n\treturn this._currentPage !== 1;\n};\n\n/**\n * @return {!boolean}\n */\nOktaviaSearch.prototype.hasNextPage$ = function () {\n\treturn this._currentPage !== this.totalPages$();\n};\n\n/**\n * @return {Array.<undefined|_Result>}\n */\nOktaviaSearch.prototype.getResult$ = function () {\n\t/** @type {Style} */\n\tvar style;\n\t/** @type {!number} */\n\tvar start;\n\t/** @type {!number} */\n\tvar last;\n\t/** @type {Metadata} */\n\tvar metadata;\n\t/** @type {!number} */\n\tvar num;\n\t/** @type {Array.<undefined|_Result>} */\n\tvar results;\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {SearchUnit} */\n\tvar unit;\n\t/** @type {Array.<undefined|!string>} */\n\tvar info;\n\t/** @type {!number} */\n\tvar offset;\n\t/** @type {!string} */\n\tvar content;\n\t/** @type {Array.<undefined|Position>} */\n\tvar positions;\n\t/** @type {!number} */\n\tvar end;\n\t/** @type {!boolean} */\n\tvar split;\n\t/** @type {!number} */\n\tvar j;\n\t/** @type {Position} */\n\tvar pos;\n\t/** @type {!string} */\n\tvar text;\n\tstyle = new Style$S('html');\n\tstart = (this._currentPage - 1) * this._entriesPerPage;\n\tlast = Math.min(this._currentPage * this._entriesPerPage, this._result.length);\n\tmetadata = this._oktavia.getPrimaryMetadata$();\n\tnum = 250;\n\tresults = [  ];\n\tfor (i = start; i < last; i++) {\n\t\tunit = this._result[i];\n\t\tinfo = metadata.getInformation$I(unit.id).split(Oktavia.eob);\n\t\toffset = info[0].length + 1;\n\t\tcontent = metadata.getContent$I(unit.id);\n\t\tstart = 0;\n\t\tpositions = unit.getPositions$();\n\t\tif (content.indexOf((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[tool/web/oktavia-search.jsx:179:36] null access\\n            if (content.indexOf(info[0]) == 1)\\n                                    ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(info[0]))) === 1) {\n\t\t\tcontent = content.slice(info[0].length + 2, content.length);\n\t\t\tstart += info[0].length + 2;\n\t\t}\n\t\tend = start + num;\n\t\tsplit = false;\n\t\tif (positions[0].position > end - positions[0].word.length) {\n\t\t\tend = positions[0].position + Math.floor(num / 2);\n\t\t\tsplit = true;\n\t\t}\n\t\tfor (j = positions.length - 1; j > - 1; j--) {\n\t\t\tpos = positions[j];\n\t\t\tif (pos.position + pos.word.length < end) {\n\t\t\t\tcontent = [ content.slice(0, pos.position - start), style.convert$S('<hit>*</hit>').replace('*', content.slice(pos.position - start, pos.position + pos.word.length - start)), content.slice(pos.position + pos.word.length - start, content.length) ].join('');\n\t\t\t}\n\t\t}\n\t\tif (split) {\n\t\t\ttext = [ content.slice(0, Math.floor(num / 2)) + ' ...', content.slice(- Math.floor(num / 2), end - start) ].join('<br/>');\n\t\t} else {\n\t\t\ttext = content.slice(0, end - start) + ' ...<br/>';\n\t\t}\n\t\ttext = text.replace(Oktavia.eob, ' ').replace(/(<br\\/>)(<br\\/>)+/, '<br/><br/>');\n\t\tresults.push(new _Result$SSSI((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[tool/web/oktavia-search.jsx:215:41] null access\\n            results.push(new _Result(info[0], info[1], text, unit.score));\\n                                         ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(info[0])), (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[tool/web/oktavia-search.jsx:215:50] null access\\n            results.push(new _Result(info[0], info[1], text, unit.score));\\n                                                  ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(info[1])), text, unit.score));\n\t}\n\treturn results;\n};\n\n/**\n * @return {Array.<undefined|_Proposal>}\n */\nOktaviaSearch.prototype.getProposals$ = function () {\n\t/** @type {Style} */\n\tvar style;\n\t/** @type {Array.<undefined|_Proposal>} */\n\tvar results;\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {Proposal} */\n\tvar proposal;\n\t/** @type {Array.<undefined|!string>} */\n\tvar label;\n\t/** @type {Array.<undefined|!string>} */\n\tvar option;\n\t/** @type {!number} */\n\tvar j;\n\tstyle = new Style$S('html');\n\tresults = [  ];\n\tif (this._queries.length > 1) {\n\t\tfor (i = 0; i < this._proposals.length; i++) {\n\t\t\tproposal = this._proposals[i];\n\t\t\tlabel = [  ];\n\t\t\toption = [  ];\n\t\t\tfor (j = 0; j < this._queries.length; j++) {\n\t\t\t\tif (j !== proposal.omit) {\n\t\t\t\t\tlabel.push(style.convert$S('<hit>' + this._queries[j].toString() + '</hit>'));\n\t\t\t\t\toption.push(this._queries[j].toString());\n\t\t\t\t} else {\n\t\t\t\t\tlabel.push(style.convert$S('<del>' + this._queries[j].toString() + '</del>'));\n\t\t\t\t}\n\t\t\t}\n\t\t\tresults.push(new _Proposal$SSI(option.join(' '), label.join('&nbsp;'), proposal.expect));\n\t\t}\n\t}\n\treturn results;\n};\n\n/**\n * @param {SearchSummary} summary\n * @return {Array.<undefined|SearchUnit>}\n */\nOktaviaSearch.prototype._sortResult$LSearchSummary$ = function (summary) {\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {!number} */\n\tvar score;\n\t/** @type {SearchUnit} */\n\tvar unit;\n\t/** @type {!string} */\n\tvar pos;\n\t/** @type {Position} */\n\tvar position;\n\tfor (i = 0; i < summary.result.units.length; i++) {\n\t\tscore = 0;\n\t\tunit = summary.result.units[i];\n\t\tfor (pos in unit.positions) {\n\t\t\tposition = unit.positions[pos];\n\t\t\tif (this._oktavia.wordPositionType$I(position.position)) {\n\t\t\t\tscore += 10;\n\t\t\t} else {\n\t\t\t\tscore += 1;\n\t\t\t}\n\t\t\tif (! position.stemmed) {\n\t\t\t\tscore += 2;\n\t\t\t}\n\t\t}\n\t\tunit.score = (score | 0);\n\t}\n\treturn summary.getSortedResult$();\n};\n\n/**\n * class _Main$0 extends Object\n * @constructor\n */\nfunction _Main$0() {\n}\n\n/**\n * @constructor\n */\nfunction _Main$0$() {\n};\n\n_Main$0$.prototype = new _Main$0;\n\n/**\n * @param {Array.<undefined|!string>} args\n */\n_Main$0.main$AS = function (args) {\n};\n\nvar _Main$0$main$AS = _Main$0.main$AS;\n\n/**\n * class Oktavia extends Object\n * @constructor\n */\nfunction Oktavia() {\n}\n\n/**\n * @constructor\n */\nfunction Oktavia$() {\n\tthis._compressCode2utf16 = null;\n\tthis._fmindex = new FMIndex$();\n\tthis._metadatas = ({  });\n\tthis._metadataLabels = [  ];\n\tthis._stemmer = null;\n\tthis._stemmingResult = ({  });\n\tthis._utf162compressCode = [ Oktavia.eof, Oktavia.eob, Oktavia.unknown ];\n\tthis._utf162compressCode.length = 65536;\n\tthis._compressCode2utf16 = [ Oktavia.eof, Oktavia.eob, Oktavia.unknown ];\n};\n\nOktavia$.prototype = new Oktavia;\n\n/**\n * @param {Stemmer} stemmer\n */\nOktavia.prototype.setStemmer$LStemmer$ = function (stemmer) {\n\tthis._stemmer = stemmer;\n};\n\n/**\n * @return {Metadata}\n */\nOktavia.prototype.getPrimaryMetadata$ = function () {\n\treturn this._metadatas[this._metadataLabels[0]];\n};\n\n/**\n * @param {!string} key\n * @return {Section}\n */\nOktavia.prototype.addSection$S = function (key) {\n\t/** @type {Section} */\n\tvar section;\n\tif (this._metadataLabels.indexOf(key) !== - 1) {\n\t\tthrow new Error('Metadata name ' + key + ' is already exists');\n\t}\n\tthis._metadataLabels.push(key);\n\tsection = new Section$LOktavia$(this);\n\tthis._metadatas[key] = section;\n\treturn section;\n};\n\n/**\n * @param {!string} key\n * @return {Section}\n */\nOktavia.prototype.getSection$S = function (key) {\n\tif (this._metadataLabels.indexOf(key) === - 1) {\n\t\tthrow new Error('Metadata name ' + key + \" does't exists\");\n\t}\n\treturn (function (v) {\n\t\tif (! (v == null || v instanceof Section)) {\n\t\t\tdebugger;\n\t\t\tthrow new Error(\"[src/oktavia.jsx:67:36] detected invalid cast, value is not an instance of the designated type or null\\n        return this._metadatas[key] as Section;\\n                                    ^^\\n\");\n\t\t}\n\t\treturn v;\n\t}(this._metadatas[key]));\n};\n\n/**\n * @param {!string} key\n * @return {Splitter}\n */\nOktavia.prototype.addSplitter$S = function (key) {\n\t/** @type {Splitter} */\n\tvar splitter;\n\tif (this._metadataLabels.indexOf(key) !== - 1) {\n\t\tthrow new Error('Metadata name ' + key + ' is already exists');\n\t}\n\tthis._metadataLabels.push(key);\n\tsplitter = new Splitter$LOktavia$(this);\n\tthis._metadatas[key] = splitter;\n\treturn splitter;\n};\n\n/**\n * @param {!string} key\n * @return {Splitter}\n */\nOktavia.prototype.getSplitter$S = function (key) {\n\tif (this._metadataLabels.indexOf(key) === - 1) {\n\t\tthrow new Error('Metadata name ' + key + \" does't exists\");\n\t}\n\treturn (function (v) {\n\t\tif (! (v == null || v instanceof Splitter)) {\n\t\t\tdebugger;\n\t\t\tthrow new Error(\"[src/oktavia.jsx:88:36] detected invalid cast, value is not an instance of the designated type or null\\n        return this._metadatas[key] as Splitter;\\n                                    ^^\\n\");\n\t\t}\n\t\treturn v;\n\t}(this._metadatas[key]));\n};\n\n/**\n * @param {!string} key\n * @param {Array.<undefined|!string>} headers\n * @return {Table}\n */\nOktavia.prototype.addTable$SAS = function (key, headers) {\n\t/** @type {Table} */\n\tvar table;\n\tif (this._metadataLabels.indexOf(key) !== - 1) {\n\t\tthrow new Error('Metadata name ' + key + ' is already exists');\n\t}\n\tthis._metadataLabels.push(key);\n\ttable = new Table$LOktavia$AS(this, headers);\n\tthis._metadatas[key] = table;\n\treturn table;\n};\n\n/**\n * @param {!string} key\n * @return {Table}\n */\nOktavia.prototype.getTable$S = function (key) {\n\tif (this._metadataLabels.indexOf(key) === - 1) {\n\t\tthrow new Error('Metadata name ' + key + \" does't exists\");\n\t}\n\treturn (function (v) {\n\t\tif (! (v == null || v instanceof Table)) {\n\t\t\tdebugger;\n\t\t\tthrow new Error(\"[src/oktavia.jsx:109:36] detected invalid cast, value is not an instance of the designated type or null\\n        return this._metadatas[key] as Table;\\n                                    ^^\\n\");\n\t\t}\n\t\treturn v;\n\t}(this._metadatas[key]));\n};\n\n/**\n * @param {!string} key\n * @return {Block}\n */\nOktavia.prototype.addBlock$S = function (key) {\n\t/** @type {Block} */\n\tvar block;\n\tif (this._metadataLabels.indexOf(key) !== - 1) {\n\t\tthrow new Error('Metadata name ' + key + ' is already exists');\n\t}\n\tthis._metadataLabels.push(key);\n\tblock = new Block$LOktavia$(this);\n\tthis._metadatas[key] = block;\n\treturn block;\n};\n\n/**\n * @param {!string} key\n * @return {Block}\n */\nOktavia.prototype.getBlock$S = function (key) {\n\tif (this._metadataLabels.indexOf(key) === - 1) {\n\t\tthrow new Error('Metadata name ' + key + \" does't exists\");\n\t}\n\treturn (function (v) {\n\t\tif (! (v == null || v instanceof Block)) {\n\t\t\tdebugger;\n\t\t\tthrow new Error(\"[src/oktavia.jsx:130:36] detected invalid cast, value is not an instance of the designated type or null\\n        return this._metadatas[key] as Block;\\n                                    ^^\\n\");\n\t\t}\n\t\treturn v;\n\t}(this._metadatas[key]));\n};\n\n/**\n */\nOktavia.prototype.addEndOfBlock$ = function () {\n\tthis._fmindex.push$S(Oktavia.eob);\n};\n\n/**\n * @param {!string} words\n */\nOktavia.prototype.addWord$S = function (words) {\n\t/** @type {Array.<undefined|!string>} */\n\tvar str;\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {!number} */\n\tvar charCode;\n\t/** @type {undefined|!string} */\n\tvar newCharCode;\n\tstr = [  ];\n\tstr.length = words.length;\n\tfor (i = 0; i < words.length; i++) {\n\t\tcharCode = words.charCodeAt(i);\n\t\tnewCharCode = this._utf162compressCode[charCode];\n\t\tif (newCharCode == null) {\n\t\t\tnewCharCode = String.fromCharCode(this._compressCode2utf16.length);\n\t\t\tthis._utf162compressCode[charCode] = newCharCode;\n\t\t\tthis._compressCode2utf16.push(String.fromCharCode(charCode));\n\t\t}\n\t\tstr.push((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/oktavia.jsx:152:21] null access\\n            str.push(newCharCode);\\n                     ^^^^^^^^^^^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(newCharCode)));\n\t}\n\tthis._fmindex.push$S(str.join(''));\n};\n\n/**\n * @param {!string} words\n * @param {!boolean} stemming\n */\nOktavia.prototype.addWord$SB = function (words, stemming) {\n\t/** @type {Array.<undefined|!string>} */\n\tvar wordList;\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {undefined|!string} */\n\tvar originalWord;\n\t/** @type {!string} */\n\tvar headSmall;\n\t/** @type {!string} */\n\tvar baseWord;\n\t/** @type {!string} */\n\tvar compressedCodeWord;\n\t/** @type {Array.<undefined|!string>} */\n\tvar stemmedList;\n\tthis.addWord$S(words);\n\tif (stemming && this._stemmer) {\n\t\twordList = words.split(/\\s+/);\n\t\tfor (i = 0; i < wordList.length; i++) {\n\t\t\toriginalWord = wordList[i];\n\t\t\theadSmall = originalWord.slice(0, 1).toLowerCase() + originalWord.slice(1);\n\t\t\tbaseWord = this._stemmer.stemWord$S(originalWord.toLowerCase());\n\t\t\tif (originalWord.indexOf(baseWord) === - 1 && headSmall.indexOf(baseWord) === - 1) {\n\t\t\t\tcompressedCodeWord = this._convertToCompressionCode$S((function (v) {\n\t\t\t\t\tif (! (v != null)) {\n\t\t\t\t\t\tdebugger;\n\t\t\t\t\t\tthrow new Error(\"[src/oktavia.jsx:170:76] null access\\n                    var compressedCodeWord = this._convertToCompressionCode(originalWord);\\n                                                                            ^^^^^^^^^^^^\\n\");\n\t\t\t\t\t}\n\t\t\t\t\treturn v;\n\t\t\t\t}(originalWord)));\n\t\t\t\tstemmedList = this._stemmingResult[baseWord];\n\t\t\t\tif (! stemmedList) {\n\t\t\t\t\tstemmedList = [ compressedCodeWord ];\n\t\t\t\t\tthis._stemmingResult[baseWord] = stemmedList;\n\t\t\t\t} else {\n\t\t\t\t\tif (stemmedList.indexOf(compressedCodeWord) === - 1) {\n\t\t\t\t\t\tstemmedList.push(compressedCodeWord);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * @param {!string} keyword\n * @return {!string}\n */\nOktavia.prototype._convertToCompressionCode$S = function (keyword) {\n\t/** @type {Array.<undefined|!string>} */\n\tvar resultChars;\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {undefined|!string} */\n\tvar chr;\n\tresultChars = [  ];\n\tfor (i = 0; i < keyword.length; i++) {\n\t\tchr = this._utf162compressCode[keyword.charCodeAt(i)];\n\t\tif (chr == null) {\n\t\t\tresultChars.push(Oktavia.unknown);\n\t\t} else {\n\t\t\tresultChars.push((function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/oktavia.jsx:198:33] null access\\n                resultChars.push(chr);\\n                                 ^^^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(chr)));\n\t\t}\n\t}\n\treturn resultChars.join('');\n};\n\n/**\n * @param {!string} keyword\n * @param {!boolean} stemming\n * @return {Array.<undefined|!number>}\n */\nOktavia.prototype.rawSearch$SB = function (keyword, stemming) {\n\t/** @type {Array.<undefined|!number>} */\n\tvar result;\n\t/** @type {!string} */\n\tvar baseWord;\n\t/** @type {Array.<undefined|!string>} */\n\tvar stemmedList;\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {undefined|!string} */\n\tvar word;\n\tif (stemming) {\n\t\tresult = [  ];\n\t\tif (this._stemmer) {\n\t\t\tbaseWord = this._stemmer.stemWord$S(keyword.toLowerCase());\n\t\t\tstemmedList = this._stemmingResult[baseWord];\n\t\t\tif (stemmedList) {\n\t\t\t\tfor (i = 0; i < stemmedList.length; i++) {\n\t\t\t\t\tword = stemmedList[i];\n\t\t\t\t\tresult = result.concat(this._fmindex.search$S((function (v) {\n\t\t\t\t\t\tif (! (v != null)) {\n\t\t\t\t\t\t\tdebugger;\n\t\t\t\t\t\t\tthrow new Error(\"[src/oktavia.jsx:219:68] null access\\n                        result = result.concat(this._fmindex.search(word));\\n                                                                    ^^^^\\n\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn v;\n\t\t\t\t\t}(word))));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} else {\n\t\tresult = this._fmindex.search$S(this._convertToCompressionCode$S(keyword));\n\t}\n\treturn result;\n};\n\n/**\n * @param {Array.<undefined|Query>} queries\n * @return {SearchSummary}\n */\nOktavia.prototype.search$ALQuery$ = function (queries) {\n\t/** @type {SearchSummary} */\n\tvar summary;\n\t/** @type {!number} */\n\tvar i;\n\tsummary = new SearchSummary$LOktavia$(this);\n\tfor (i = 0; i < queries.length; i++) {\n\t\tsummary.addQuery$LSingleResult$(this._searchQuery$LQuery$(queries[i]));\n\t}\n\tsummary.mergeResult$();\n\treturn summary;\n};\n\n/**\n * @param {Query} query\n * @return {SingleResult}\n */\nOktavia.prototype._searchQuery$LQuery$ = function (query) {\n\t/** @type {SingleResult} */\n\tvar result;\n\t/** @type {Array.<undefined|!number>} */\n\tvar positions;\n\tresult = new SingleResult$SBB(query.word, query.or, query.not);\n\tif (query.raw) {\n\t\tpositions = this.rawSearch$SB(query.word, false);\n\t} else {\n\t\tpositions = this.rawSearch$SB(query.word, false).concat(this.rawSearch$SB(query.word, true));\n\t}\n\tthis.getPrimaryMetadata$().grouping$LSingleResult$AISB(result, positions, query.word, ! query.raw);\n\treturn result;\n};\n\n/**\n */\nOktavia.prototype.build$ = function () {\n\tthis.build$IB(5, false);\n};\n\n/**\n * @param {!number} cacheDensity\n * @param {!boolean} verbose\n */\nOktavia.prototype.build$IB = function (cacheDensity, verbose) {\n\t/** @type {!string} */\n\tvar key;\n\t/** @type {!number} */\n\tvar cacheRange;\n\t/** @type {!number} */\n\tvar maxChar;\n\tfor (key in this._metadatas) {\n\t\tthis._metadatas[key]._build$();\n\t}\n\tcacheRange = Math.round(Math.max(1, 100 / Math.min(100, Math.max(0.01, cacheDensity))));\n\tmaxChar = this._compressCode2utf16.length;\n\tthis._fmindex.build$SIIB(Oktavia.eof, maxChar, cacheRange, verbose);\n};\n\n/**\n * @return {!string}\n */\nOktavia.prototype.dump$ = function () {\n\treturn this.dump$B(false);\n};\n\n/**\n * @param {!boolean} verbose\n * @return {!string}\n */\nOktavia.prototype.dump$B = function (verbose) {\n\t/** @type {!string} */\n\tvar headerSource;\n\t/** @type {!string} */\n\tvar header;\n\t/** @type {!string} */\n\tvar fmdata;\n\t/** @type {Array.<undefined|!string>} */\n\tvar result;\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {CompressionReport} */\n\tvar report;\n\t/** @type {undefined|!string} */\n\tvar name;\n\t/** @type {!string} */\n\tvar data;\n\theaderSource = \"oktavia-01\";\n\theader = Binary$dumpString$S(headerSource).slice(1);\n\tif (verbose) {\n\t\tconsole.log(\"Source text size: \" + (this._fmindex.size$() * 2 + \"\") + ' bytes');\n\t}\n\tfmdata = this._fmindex.dump$B(verbose);\n\tresult = [ header, fmdata ];\n\tresult.push(Binary$dump16bitNumber$I(this._compressCode2utf16.length));\n\tfor (i = 3; i < this._compressCode2utf16.length; i++) {\n\t\tresult.push((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/oktavia.jsx:296:48] null access\\n            result.push(this._compressCode2utf16[i]);\\n                                                ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(this._compressCode2utf16[i])));\n\t}\n\tif (verbose) {\n\t\tconsole.log('Char Code Map: ' + (this._compressCode2utf16.length * 2 - 2 + \"\") + ' bytes');\n\t}\n\treport = new CompressionReport$();\n\tresult.push(Binary$dumpStringListMap$HASLCompressionReport$(this._stemmingResult, report));\n\tif (verbose) {\n\t\tconsole.log('Stemmed Word Table: ' + (result[result.length - 1].length + \"\") + ' bytes (' + (report.rate$() + \"\") + '%)');\n\t\tconsole.log(this._stemmingResult);\n\t}\n\tresult.push(Binary$dump16bitNumber$I(this._metadataLabels.length));\n\tfor (i = 0; i < this._metadataLabels.length; i++) {\n\t\treport = new CompressionReport$();\n\t\tname = this._metadataLabels[i];\n\t\tdata = this._metadatas[name]._dump$LCompressionReport$(report);\n\t\tresult.push(Binary$dumpString$SLCompressionReport$((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/oktavia.jsx:317:42] null access\\n            result.push(Binary.dumpString(name, report), data);\\n                                          ^^^^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(name)), report), data);\n\t\tif (verbose) {\n\t\t\tconsole.log('Meta Data ' + (function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/oktavia.jsx:320:43] null access\\n                console.log(\\'Meta Data \\' + name + \\': \\' + (data.length * 2) as string + \\' bytes (\\' + report.rate() as string + \\'%)\\');\\n                                           ^^^^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(name)) + ': ' + (data.length * 2 + \"\") + ' bytes (' + (report.rate$() + \"\") + '%)');\n\t\t}\n\t}\n\treturn result.join('');\n};\n\n/**\n * @param {!string} data\n */\nOktavia.prototype.load$S = function (data) {\n\t/** @type {!string} */\n\tvar headerSource;\n\t/** @type {!string} */\n\tvar header;\n\t/** @type {!number} */\n\tvar offset;\n\t/** @type {!number} */\n\tvar charCodeCount;\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {!number} */\n\tvar charCode;\n\t/** @type {LoadedStringListMapResult} */\n\tvar stemmedWords;\n\t/** @type {!number} */\n\tvar metadataCount;\n\t/** @type {LoadedStringResult} */\n\tvar nameResult;\n\t/** @type {!string} */\n\tvar name;\n\t/** @type {!number} */\n\tvar type;\n\theaderSource = \"oktavia-01\";\n\theader = Binary$dumpString$S(headerSource).slice(1);\n\tif (data.slice(0, 5) !== header) {\n\t\tthrow new Error('Invalid data file');\n\t}\n\tthis._metadatas = ({  });\n\tthis._metadataLabels = [  ];\n\toffset = 5;\n\toffset = this._fmindex.load$SI(data, offset);\n\tcharCodeCount = Binary$load16bitNumber$SI(data, offset++);\n\tthis._compressCode2utf16 = [ Oktavia.eof, Oktavia.eob, Oktavia.unknown ];\n\tthis._utf162compressCode = [ Oktavia.eof, Oktavia.eob, Oktavia.unknown ];\n\tfor (i = 3; i < charCodeCount; i++) {\n\t\tcharCode = Binary$load16bitNumber$SI(data, offset++);\n\t\tthis._compressCode2utf16.push(String.fromCharCode(charCode));\n\t\tthis._utf162compressCode[charCode] = String.fromCharCode(i);\n\t}\n\tstemmedWords = Binary$loadStringListMap$SI(data, offset);\n\tthis._stemmingResult = stemmedWords.result;\n\toffset = stemmedWords.offset;\n\tmetadataCount = Binary$load16bitNumber$SI(data, offset++);\n\tfor (i = 0; i < metadataCount; i++) {\n\t\tnameResult = Binary$loadString$SI(data, offset);\n\t\tname = nameResult.result;\n\t\toffset = nameResult.offset;\n\t\ttype = Binary$load16bitNumber$SI(data, offset++);\n\t\tswitch (type) {\n\t\tcase 0:\n\t\t\toffset = Section$_load$LOktavia$SSI(this, name, data, offset);\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\toffset = Splitter$_load$LOktavia$SSI(this, name, data, offset);\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\toffset = Table$_load$LOktavia$SSI(this, name, data, offset);\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\toffset = Block$_load$LOktavia$SSI(this, name, data, offset);\n\t\t\tbreak;\n\t\t}\n\t}\n};\n\n/**\n * @return {!number}\n */\nOktavia.prototype.contentSize$ = function () {\n\treturn this._fmindex.contentSize$();\n};\n\n/**\n * @param {!number} position\n * @return {!number}\n */\nOktavia.prototype.wordPositionType$I = function (position) {\n\t/** @type {!number} */\n\tvar result;\n\t/** @type {!string} */\n\tvar ahead;\n\tresult = 0;\n\tif (position === 0) {\n\t\tresult = 4;\n\t} else {\n\t\tahead = this._fmindex.getSubstring$II(position - 1, 1);\n\t\tif (/\\s/.test(ahead)) {\n\t\t\tresult = 2;\n\t\t} else {\n\t\t\tif (/\\W/.test(ahead)) {\n\t\t\t\tresult = 1;\n\t\t\t} else {\n\t\t\t\tif (Oktavia.eob === ahead) {\n\t\t\t\t\tresult = 3;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn (result | 0);\n};\n\n/**\n * @param {!number} position\n * @param {!number} length\n * @return {!string}\n */\nOktavia.prototype._getSubstring$II = function (position, length) {\n\t/** @type {!string} */\n\tvar result;\n\t/** @type {Array.<undefined|!string>} */\n\tvar str;\n\t/** @type {!number} */\n\tvar i;\n\tresult = this._fmindex.getSubstring$II(position, length);\n\tstr = [  ];\n\tfor (i = 0; i < result.length; i++) {\n\t\tstr.push((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/oktavia.jsx:415:45] null access\\n            str.push(this._compressCode2utf16[result.charCodeAt(i)]);\\n                                             ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(this._compressCode2utf16[result.charCodeAt(i)])));\n\t}\n\treturn str.join('');\n};\n\n/**\n * class Binary extends Object\n * @constructor\n */\nfunction Binary() {\n}\n\n/**\n * @constructor\n */\nfunction Binary$() {\n};\n\nBinary$.prototype = new Binary;\n\n/**\n * @param {!number} num\n * @return {!string}\n */\nBinary.dump32bitNumber$N = function (num) {\n\t/** @type {Array.<undefined|!string>} */\n\tvar result;\n\tresult = [ String.fromCharCode(Math.floor(num / 65536)) ];\n\tresult.push(String.fromCharCode(num % 65536));\n\treturn result.join(\"\");\n};\n\nvar Binary$dump32bitNumber$N = Binary.dump32bitNumber$N;\n\n/**\n * @param {!string} buffer\n * @param {!number} offset\n * @return {!number}\n */\nBinary.load32bitNumber$SI = function (buffer, offset) {\n\t/** @type {!number} */\n\tvar result;\n\tresult = buffer.charCodeAt(offset) * 65536 + buffer.charCodeAt(offset + 1);\n\treturn result;\n};\n\nvar Binary$load32bitNumber$SI = Binary.load32bitNumber$SI;\n\n/**\n * @param {!number} num\n * @return {!string}\n */\nBinary.dump16bitNumber$I = function (num) {\n\treturn String.fromCharCode(num % 65536);\n};\n\nvar Binary$dump16bitNumber$I = Binary.dump16bitNumber$I;\n\n/**\n * @param {!string} buffer\n * @param {!number} offset\n * @return {!number}\n */\nBinary.load16bitNumber$SI = function (buffer, offset) {\n\treturn (buffer.charCodeAt(offset) | 0);\n};\n\nvar Binary$load16bitNumber$SI = Binary.load16bitNumber$SI;\n\n/**\n * @param {!string} str\n * @return {!string}\n */\nBinary.dumpString$S = function (str) {\n\treturn Binary$dumpString$SLCompressionReport$(str, null);\n};\n\nvar Binary$dumpString$S = Binary.dumpString$S;\n\n/**\n * @param {!string} str\n * @param {CompressionReport} report\n * @return {!string}\n */\nBinary.dumpString$SLCompressionReport$ = function (str, report) {\n\t/** @type {!number} */\n\tvar length;\n\t/** @type {!boolean} */\n\tvar compress;\n\t/** @type {Array.<undefined|!number>} */\n\tvar charCodes;\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {!number} */\n\tvar charCode;\n\t/** @type {Array.<undefined|!string>} */\n\tvar result;\n\t/** @type {undefined|!number} */\n\tvar bytes;\n\tif (str.length > 32768) {\n\t\tstr = str.slice(0, 32768);\n\t}\n\tlength = str.length;\n\tcompress = true;\n\tcharCodes = [  ];\n\tfor (i = 0; i < length; i++) {\n\t\tcharCode = str.charCodeAt(i);\n\t\tif (charCode > 255) {\n\t\t\tcompress = false;\n\t\t\tbreak;\n\t\t}\n\t\tcharCodes.push(charCode);\n\t}\n\tif (compress) {\n\t\tresult = [ Binary$dump16bitNumber$I(length + 32768) ];\n\t\tfor (i = 0; i < length; i += 2) {\n\t\t\tbytes = charCodes[i];\n\t\t\tif (i !== length - 1) {\n\t\t\t\tbytes += (function (v) {\n\t\t\t\t\tif (! (v != null)) {\n\t\t\t\t\t\tdebugger;\n\t\t\t\t\t\tthrow new Error(\"[src/binary-util.jsx:58:38] null access\\n                    bytes += charCodes[i + 1] << 8;\\n                                      ^\\n\");\n\t\t\t\t\t}\n\t\t\t\t\treturn v;\n\t\t\t\t}(charCodes[i + 1])) << 8;\n\t\t\t}\n\t\t\tresult.push(Binary$dump16bitNumber$I((function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/binary-util.jsx:60:51] null access\\n                result.push(Binary.dump16bitNumber(bytes));\\n                                                   ^^^^^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(bytes))));\n\t\t}\n\t\tif (report) {\n\t\t\treport.add$II(length, Math.ceil(length / 2));\n\t\t}\n\t} else {\n\t\tresult = [ Binary$dump16bitNumber$I(length), str ];\n\t\tif (report) {\n\t\t\treport.add$II(length, length);\n\t\t}\n\t}\n\treturn result.join('');\n};\n\nvar Binary$dumpString$SLCompressionReport$ = Binary.dumpString$SLCompressionReport$;\n\n/**\n * @param {!string} buffer\n * @param {!number} offset\n * @return {LoadedStringResult}\n */\nBinary.loadString$SI = function (buffer, offset) {\n\treturn new LoadedStringResult$SI(buffer, offset);\n};\n\nvar Binary$loadString$SI = Binary.loadString$SI;\n\n/**\n * @param {Array.<undefined|!string>} strList\n * @return {!string}\n */\nBinary.dumpStringList$AS = function (strList) {\n\treturn Binary$dumpStringList$ASLCompressionReport$(strList, null);\n};\n\nvar Binary$dumpStringList$AS = Binary.dumpStringList$AS;\n\n/**\n * @param {Array.<undefined|!string>} strList\n * @param {CompressionReport} report\n * @return {!string}\n */\nBinary.dumpStringList$ASLCompressionReport$ = function (strList, report) {\n\t/** @type {Array.<undefined|!string>} */\n\tvar result;\n\t/** @type {!number} */\n\tvar i;\n\tresult = [ Binary$dump32bitNumber$N(strList.length) ];\n\tfor (i = 0; i < strList.length; i++) {\n\t\tresult.push(Binary$dumpString$SLCompressionReport$((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/binary-util.jsx:93:49] null access\\n            result.push(Binary.dumpString(strList[i], report));\\n                                                 ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(strList[i])), report));\n\t}\n\treturn result.join('');\n};\n\nvar Binary$dumpStringList$ASLCompressionReport$ = Binary.dumpStringList$ASLCompressionReport$;\n\n/**\n * @param {!string} buffer\n * @param {!number} offset\n * @return {LoadedStringListResult}\n */\nBinary.loadStringList$SI = function (buffer, offset) {\n\treturn new LoadedStringListResult$SI(buffer, offset);\n};\n\nvar Binary$loadStringList$SI = Binary.loadStringList$SI;\n\n/**\n * @param {Object.<string, undefined|Array.<undefined|!string>>} strMap\n * @return {!string}\n */\nBinary.dumpStringListMap$HAS = function (strMap) {\n\treturn Binary$dumpStringListMap$HASLCompressionReport$(strMap, null);\n};\n\nvar Binary$dumpStringListMap$HAS = Binary.dumpStringListMap$HAS;\n\n/**\n * @param {Object.<string, undefined|Array.<undefined|!string>>} strMap\n * @param {CompressionReport} report\n * @return {!string}\n */\nBinary.dumpStringListMap$HASLCompressionReport$ = function (strMap, report) {\n\t/** @type {Array.<undefined|!string>} */\n\tvar result;\n\t/** @type {!number} */\n\tvar counter;\n\t/** @type {!string} */\n\tvar key;\n\tresult = [  ];\n\tcounter = 0;\n\tfor (key in strMap) {\n\t\tresult.push(Binary$dumpString$SLCompressionReport$(key, report));\n\t\tresult.push(Binary$dumpStringList$ASLCompressionReport$(strMap[key], report));\n\t\tcounter++;\n\t}\n\treturn Binary$dump32bitNumber$N(counter) + result.join('');\n};\n\nvar Binary$dumpStringListMap$HASLCompressionReport$ = Binary.dumpStringListMap$HASLCompressionReport$;\n\n/**\n * @param {!string} buffer\n * @param {!number} offset\n * @return {LoadedStringListMapResult}\n */\nBinary.loadStringListMap$SI = function (buffer, offset) {\n\treturn new LoadedStringListMapResult$SI(buffer, offset);\n};\n\nvar Binary$loadStringListMap$SI = Binary.loadStringListMap$SI;\n\n/**\n * @param {Array.<undefined|!number>} array\n * @return {!string}\n */\nBinary.dump32bitNumberList$AN = function (array) {\n\treturn Binary$dump32bitNumberList$ANLCompressionReport$(array, null);\n};\n\nvar Binary$dump32bitNumberList$AN = Binary.dump32bitNumberList$AN;\n\n/**\n * @param {Array.<undefined|!number>} array\n * @param {CompressionReport} report\n * @return {!string}\n */\nBinary.dump32bitNumberList$ANLCompressionReport$ = function (array, report) {\n\t/** @type {Array.<undefined|!string>} */\n\tvar result;\n\t/** @type {!number} */\n\tvar index;\n\t/** @type {!number} */\n\tvar inputLength;\n\t/** @type {!number} */\n\tvar length;\n\t/** @type {!string} */\n\tvar resultString;\n\tresult = [ Binary$dump32bitNumber$N(array.length) ];\n\tindex = 0;\n\tinputLength = array.length;\n\twhile (index < inputLength) {\n\t\tif (array[index] == 0) {\n\t\t\tlength = Binary$_countZero$ANI(array, index);\n\t\t\tresult.push(Binary$_zeroBlock$I(length));\n\t\t\tindex += length;\n\t\t} else {\n\t\t\tif (Binary$_shouldZebraCode$ANI(array, index)) {\n\t\t\t\tresult.push(Binary$_createZebraCode$ANI(array, index));\n\t\t\t\tindex = Math.min(array.length, index + 15);\n\t\t\t} else {\n\t\t\t\tlength = Binary$_searchDoubleZero$ANI(array, index);\n\t\t\t\tresult.push(Binary$_nonZeroBlock$ANII(array, index, length));\n\t\t\t\tif (length === 0) {\n\t\t\t\t\tthrow new Error('');\n\t\t\t\t}\n\t\t\t\tindex += length;\n\t\t\t}\n\t\t}\n\t}\n\tresultString = result.join('');\n\tif (report) {\n\t\treport.add$II(array.length * 2 + 2, resultString.length);\n\t}\n\treturn resultString;\n};\n\nvar Binary$dump32bitNumberList$ANLCompressionReport$ = Binary.dump32bitNumberList$ANLCompressionReport$;\n\n/**\n * @param {!string} buffer\n * @param {!number} offset\n * @return {LoadedNumberListResult}\n */\nBinary.load32bitNumberList$SI = function (buffer, offset) {\n\treturn new LoadedNumberListResult$SI(buffer, offset);\n};\n\nvar Binary$load32bitNumberList$SI = Binary.load32bitNumberList$SI;\n\n/**\n * @param {Array.<undefined|!number>} array\n * @param {!number} offset\n * @return {!number}\n */\nBinary._countZero$ANI = function (array, offset) {\n\t/** @type {!number} */\n\tvar i;\n\tfor (i = offset; i < array.length; i++) {\n\t\tif (array[i] != 0) {\n\t\t\treturn (i - offset | 0);\n\t\t}\n\t}\n\treturn (array.length - offset | 0);\n};\n\nvar Binary$_countZero$ANI = Binary._countZero$ANI;\n\n/**\n * @param {!number} length\n * @return {!string}\n */\nBinary._zeroBlock$I = function (length) {\n\t/** @type {Array.<undefined|!string>} */\n\tvar result;\n\tresult = [  ];\n\twhile (length > 0) {\n\t\tif (length > 16384) {\n\t\t\tresult.push(Binary$dump16bitNumber$I(16384 - 1));\n\t\t\tlength -= 16384;\n\t\t} else {\n\t\t\tresult.push(Binary$dump16bitNumber$I(length - 1));\n\t\t\tlength = 0;\n\t\t}\n\t}\n\treturn result.join('');\n};\n\nvar Binary$_zeroBlock$I = Binary._zeroBlock$I;\n\n/**\n * @param {Array.<undefined|!number>} array\n * @param {!number} offset\n * @return {!boolean}\n */\nBinary._shouldZebraCode$ANI = function (array, offset) {\n\t/** @type {!number} */\n\tvar change;\n\t/** @type {!boolean} */\n\tvar isLastZero;\n\t/** @type {!number} */\n\tvar i;\n\tif (array.length - offset < 16) {\n\t\treturn true;\n\t}\n\tchange = 0;\n\tisLastZero = false;\n\tfor (i = offset; i < offset + 15; i++) {\n\t\tif (array[i] == 0) {\n\t\t\tif (! isLastZero) {\n\t\t\t\tisLastZero = true;\n\t\t\t\tchange++;\n\t\t\t}\n\t\t} else {\n\t\t\tif (isLastZero) {\n\t\t\t\tisLastZero = false;\n\t\t\t\tchange++;\n\t\t\t}\n\t\t}\n\t}\n\treturn change > 2;\n};\n\nvar Binary$_shouldZebraCode$ANI = Binary._shouldZebraCode$ANI;\n\n/**\n * @param {Array.<undefined|!number>} array\n * @param {!number} offset\n * @return {!number}\n */\nBinary._searchDoubleZero$ANI = function (array, offset) {\n\t/** @type {!boolean} */\n\tvar isLastZero;\n\t/** @type {!number} */\n\tvar i;\n\tisLastZero = false;\n\tfor (i = offset; i < array.length; i++) {\n\t\tif (array[i] == 0) {\n\t\t\tif (isLastZero) {\n\t\t\t\treturn (i - offset - 1 | 0);\n\t\t\t}\n\t\t\tisLastZero = true;\n\t\t} else {\n\t\t\tisLastZero = false;\n\t\t}\n\t}\n\treturn (array.length - offset | 0);\n};\n\nvar Binary$_searchDoubleZero$ANI = Binary._searchDoubleZero$ANI;\n\n/**\n * @param {Array.<undefined|!number>} array\n * @param {!number} offset\n * @param {!number} length\n * @return {!string}\n */\nBinary._nonZeroBlock$ANII = function (array, offset, length) {\n\t/** @type {Array.<undefined|!string>} */\n\tvar result;\n\t/** @type {!number} */\n\tvar blockLength;\n\t/** @type {!number} */\n\tvar i;\n\tresult = [  ];\n\twhile (length > 0) {\n\t\tif (length > 16384) {\n\t\t\tblockLength = 16384;\n\t\t\tlength -= 16384;\n\t\t} else {\n\t\t\tblockLength = length;\n\t\t\tlength = 0;\n\t\t}\n\t\tresult.push(Binary$dump16bitNumber$I(blockLength - 1 + 0x4000));\n\t\tfor (i = offset; i < offset + blockLength; i++) {\n\t\t\tresult.push(Binary$dump32bitNumber$N((function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/binary-util.jsx:274:56] null access\\n                result.push(Binary.dump32bitNumber(array[i]));\\n                                                        ^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(array[i]))));\n\t\t}\n\t\toffset += blockLength;\n\t}\n\treturn result.join('');\n};\n\nvar Binary$_nonZeroBlock$ANII = Binary._nonZeroBlock$ANII;\n\n/**\n * @param {Array.<undefined|!number>} array\n * @param {!number} offset\n * @return {!string}\n */\nBinary._createZebraCode$ANI = function (array, offset) {\n\t/** @type {!number} */\n\tvar last;\n\t/** @type {!number} */\n\tvar code;\n\t/** @type {Array.<undefined|!string>} */\n\tvar result;\n\t/** @type {!number} */\n\tvar i;\n\tlast = Math.min(offset + 15, array.length);\n\tcode = 0x8000;\n\tresult = [  ];\n\tfor (i = offset; i < last; i++) {\n\t\tif (array[i] != 0) {\n\t\t\tresult.push(Binary$dump32bitNumber$N((function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/binary-util.jsx:290:56] null access\\n                result.push(Binary.dump32bitNumber(array[i]));\\n                                                        ^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(array[i]))));\n\t\t\tcode = code + (0x1 << i - offset);\n\t\t}\n\t}\n\treturn String.fromCharCode(code) + result.join('');\n};\n\nvar Binary$_createZebraCode$ANI = Binary._createZebraCode$ANI;\n\n/**\n * @param {!string} str\n * @return {!string}\n */\nBinary.base64encode$S = function (str) {\n\t/** @type {Array.<undefined|!string>} */\n\tvar out;\n\t/** @type {Array.<undefined|!number>} */\n\tvar source;\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {!number} */\n\tvar code;\n\t/** @type {!number} */\n\tvar len;\n\t/** @type {!number} */\n\tvar c1;\n\t/** @type {undefined|!number} */\n\tvar c2;\n\t/** @type {undefined|!number} */\n\tvar c3;\n\tout = [  ];\n\tsource = [  ];\n\tfor (i = 0; i < str.length; i++) {\n\t\tcode = str.charCodeAt(i);\n\t\tsource.push(code & 0x00ff, code >>> 8);\n\t}\n\tlen = str.length * 2;\n\ti = 0;\n\twhile (i < len) {\n\t\tc1 = (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/binary-util.jsx:319:23] null access\\n        var c1 = source[i++] & 0xff;\\n                       ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(source[i++])) & 0xff;\n\t\tif (i === len) {\n\t\t\tout.push(Binary._base64EncodeChars.charAt(c1 >> 2));\n\t\t\tout.push(Binary._base64EncodeChars.charAt((c1 & 0x3) << 4));\n\t\t\tout.push(\"==\");\n\t\t\tbreak;\n\t\t}\n\t\tc2 = source[i++];\n\t\tif (i === len) {\n\t\t\tout.push(Binary._base64EncodeChars.charAt(c1 >> 2));\n\t\t\tout.push(Binary._base64EncodeChars.charAt((c1 & 0x3) << 4 | ((function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/binary-util.jsx:331:75] null access\\n            out.push(Binary._base64EncodeChars.charAt(((c1 & 0x3)<< 4) | ((c2 & 0xF0) >> 4)));\\n                                                                           ^^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(c2)) & 0xF0) >> 4));\n\t\t\tout.push(Binary._base64EncodeChars.charAt(((function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/binary-util.jsx:332:55] null access\\n            out.push(Binary._base64EncodeChars.charAt((c2 & 0xF) << 2));\\n                                                       ^^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(c2)) & 0xF) << 2));\n\t\t\tout.push(\"=\");\n\t\t\tbreak;\n\t\t}\n\t\tc3 = source[i++];\n\t\tout.push(Binary._base64EncodeChars.charAt(c1 >> 2));\n\t\tout.push(Binary._base64EncodeChars.charAt((c1 & 0x3) << 4 | ((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/binary-util.jsx:338:71] null access\\n        out.push(Binary._base64EncodeChars.charAt(((c1 & 0x3)<< 4) | ((c2 & 0xF0) >> 4)));\\n                                                                       ^^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(c2)) & 0xF0) >> 4));\n\t\tout.push(Binary._base64EncodeChars.charAt(((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/binary-util.jsx:339:52] null access\\n        out.push(Binary._base64EncodeChars.charAt(((c2 & 0xF) << 2) | ((c3 & 0xC0) >>6)));\\n                                                    ^^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(c2)) & 0xF) << 2 | ((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/binary-util.jsx:339:72] null access\\n        out.push(Binary._base64EncodeChars.charAt(((c2 & 0xF) << 2) | ((c3 & 0xC0) >>6)));\\n                                                                        ^^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(c3)) & 0xC0) >> 6));\n\t\tout.push(Binary._base64EncodeChars.charAt((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/binary-util.jsx:340:50] null access\\n        out.push(Binary._base64EncodeChars.charAt(c3 & 0x3F));\\n                                                  ^^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(c3)) & 0x3F));\n\t}\n\treturn out.join('');\n};\n\nvar Binary$base64encode$S = Binary.base64encode$S;\n\n/**\n * @param {Array.<undefined|!number>} source\n * @return {!string}\n */\nBinary._mergeCharCode$AI = function (source) {\n\t/** @type {Array.<undefined|!string>} */\n\tvar result;\n\t/** @type {!number} */\n\tvar i;\n\tresult = [  ];\n\tfor (i = 0; i < source.length; i += 2) {\n\t\tresult.push(String.fromCharCode((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/binary-util.jsx:360:50] null access\\n            result.push(String.fromCharCode(source[i] + (source[i + 1] << 8)));\\n                                                  ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(source[i])) + ((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/binary-util.jsx:360:63] null access\\n            result.push(String.fromCharCode(source[i] + (source[i + 1] << 8)));\\n                                                               ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(source[i + 1])) << 8)));\n\t}\n\treturn result.join('');\n};\n\nvar Binary$_mergeCharCode$AI = Binary._mergeCharCode$AI;\n\n/**\n * @param {!string} str\n * @return {!string}\n */\nBinary.base64decode$S = function (str) {\n\t/** @type {!number} */\n\tvar len;\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {Array.<undefined|!number>} */\n\tvar out;\n\t/** @type {undefined|!number} */\n\tvar c1;\n\t/** @type {undefined|!number} */\n\tvar c2;\n\t/** @type {!number} */\n\tvar c3;\n\t/** @type {!number} */\n\tvar c4;\n\tlen = str.length;\n\ti = 0;\n\tout = [  ];\n\twhile (i < len) {\n\t\tdo {\n\t\t\tc1 = Binary._base64DecodeChars[str.charCodeAt(i++) & 0xff];\n\t\t} while (i < len && c1 == - 1);\n\t\tif (c1 == - 1) {\n\t\t\tbreak;\n\t\t}\n\t\tdo {\n\t\t\tc2 = Binary._base64DecodeChars[str.charCodeAt(i++) & 0xff];\n\t\t} while (i < len && c2 == - 1);\n\t\tif (c2 == - 1) {\n\t\t\tbreak;\n\t\t}\n\t\tout.push((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/binary-util.jsx:391:18] null access\\n        out.push((c1 << 2) | ((c2 & 0x30) >> 4));\\n                  ^^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(c1)) << 2 | ((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/binary-util.jsx:391:31] null access\\n        out.push((c1 << 2) | ((c2 & 0x30) >> 4));\\n                               ^^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(c2)) & 0x30) >> 4);\n\t\tdo {\n\t\t\tc3 = str.charCodeAt(i++) & 0xff;\n\t\t\tif (c3 === 61) {\n\t\t\t\treturn Binary$_mergeCharCode$AI(out);\n\t\t\t}\n\t\t\tc3 = (function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/binary-util.jsx:399:42] null access\\n            c3 = Binary._base64DecodeChars[c3];\\n                                          ^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(Binary._base64DecodeChars[c3]));\n\t\t} while (i < len && c3 === - 1);\n\t\tif (c3 === - 1) {\n\t\t\tbreak;\n\t\t}\n\t\tout.push(((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/binary-util.jsx:405:19] null access\\n        out.push(((c2 & 0XF) << 4) | ((c3 & 0x3C) >> 2));\\n                   ^^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(c2)) & 0XF) << 4 | (c3 & 0x3C) >> 2);\n\t\tdo {\n\t\t\tc4 = str.charCodeAt(i++) & 0xff;\n\t\t\tif (c4 === 61) {\n\t\t\t\treturn Binary$_mergeCharCode$AI(out);\n\t\t\t}\n\t\t\tc4 = ((function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/binary-util.jsx:414:42] null access\\n            c4 = Binary._base64DecodeChars[c4];\\n                                          ^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(Binary._base64DecodeChars[c4])) | 0);\n\t\t} while (i < len && c4 === - 1);\n\t\tif (c4 === - 1) {\n\t\t\tbreak;\n\t\t}\n\t\tout.push((c3 & 0x03) << 6 | c4);\n\t}\n\treturn Binary$_mergeCharCode$AI(out);\n};\n\nvar Binary$base64decode$S = Binary.base64decode$S;\n\n/**\n * class LoadedStringResult extends Object\n * @constructor\n */\nfunction LoadedStringResult() {\n}\n\n/**\n * @constructor\n * @param {!string} data\n * @param {!number} offset\n */\nfunction LoadedStringResult$SI(data, offset) {\n\t/** @type {!number} */\n\tvar strLength;\n\t/** @type {Array.<undefined|!string>} */\n\tvar bytes;\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {!number} */\n\tvar code;\n\tthis.result = \"\";\n\tthis.offset = 0;\n\tstrLength = Binary$load16bitNumber$SI(data, offset++);\n\tif (strLength > 32767) {\n\t\tstrLength = strLength - 32768;\n\t\tbytes = [  ];\n\t\tfor (i = 0; i < strLength; i += 2) {\n\t\t\tcode = data.charCodeAt(offset);\n\t\t\tbytes.push(String.fromCharCode(code & 0x00ff));\n\t\t\tif (i !== strLength - 1) {\n\t\t\t\tbytes.push(String.fromCharCode(code >>> 8));\n\t\t\t}\n\t\t\toffset++;\n\t\t}\n\t\tthis.result = bytes.join('');\n\t\tthis.offset = offset;\n\t} else {\n\t\tthis.result = data.slice(offset, offset + strLength);\n\t\tthis.offset = (offset + strLength | 0);\n\t}\n};\n\nLoadedStringResult$SI.prototype = new LoadedStringResult;\n\n/**\n * class LoadedStringListResult extends Object\n * @constructor\n */\nfunction LoadedStringListResult() {\n}\n\n/**\n * @constructor\n * @param {!string} data\n * @param {!number} offset\n */\nfunction LoadedStringListResult$SI(data, offset) {\n\t/** @type {!number} */\n\tvar length;\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {!number} */\n\tvar strLength;\n\t/** @type {!string} */\n\tvar resultStr;\n\t/** @type {Array.<undefined|!string>} */\n\tvar bytes;\n\t/** @type {!number} */\n\tvar j;\n\t/** @type {!number} */\n\tvar code;\n\tthis.offset = 0;\n\tthis.result = [  ];\n\tlength = Binary$load32bitNumber$SI(data, offset);\n\toffset += 2;\n\tfor (i = 0; i < length; i++) {\n\t\tstrLength = Binary$load16bitNumber$SI(data, offset++);\n\t\tif (strLength > 32767) {\n\t\t\tstrLength = strLength - 32768;\n\t\t\tbytes = [  ];\n\t\t\tfor (j = 0; j < strLength; j += 2) {\n\t\t\t\tcode = data.charCodeAt(offset);\n\t\t\t\tbytes.push(String.fromCharCode(code & 0x00ff));\n\t\t\t\tif (j !== strLength - 1) {\n\t\t\t\t\tbytes.push(String.fromCharCode(code >>> 8));\n\t\t\t\t}\n\t\t\t\toffset++;\n\t\t\t}\n\t\t\tresultStr = bytes.join('');\n\t\t} else {\n\t\t\tresultStr = data.slice(offset, offset + strLength);\n\t\t\toffset = (offset + strLength | 0);\n\t\t}\n\t\tthis.result.push(resultStr);\n\t}\n\tthis.offset = offset;\n};\n\nLoadedStringListResult$SI.prototype = new LoadedStringListResult;\n\n/**\n * class LoadedStringListMapResult extends Object\n * @constructor\n */\nfunction LoadedStringListMapResult() {\n}\n\n/**\n * @constructor\n * @param {!string} data\n * @param {!number} offset\n */\nfunction LoadedStringListMapResult$SI(data, offset) {\n\t/** @type {!number} */\n\tvar length;\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {LoadedStringResult} */\n\tvar keyResult;\n\t/** @type {LoadedStringListResult} */\n\tvar valueResult;\n\tthis.offset = 0;\n\tthis.result = ({  });\n\tlength = Binary$load32bitNumber$SI(data, offset);\n\toffset += 2;\n\tfor (i = 0; i < length; i++) {\n\t\tkeyResult = Binary$loadString$SI(data, offset);\n\t\tvalueResult = Binary$loadStringList$SI(data, keyResult.offset);\n\t\tthis.result[keyResult.result] = valueResult.result;\n\t\toffset = valueResult.offset;\n\t}\n\tthis.offset = offset;\n};\n\nLoadedStringListMapResult$SI.prototype = new LoadedStringListMapResult;\n\n/**\n * class LoadedNumberListResult extends Object\n * @constructor\n */\nfunction LoadedNumberListResult() {\n}\n\n/**\n * @constructor\n * @param {!string} data\n * @param {!number} offset\n */\nfunction LoadedNumberListResult$SI(data, offset) {\n\t/** @type {!number} */\n\tvar resultLength;\n\t/** @type {!number} */\n\tvar originalOffset;\n\t/** @type {Array.<undefined|!number>} */\n\tvar result;\n\t/** @type {!number} */\n\tvar tag;\n\t/** @type {!number} */\n\tvar length;\n\t/** @type {!number} */\n\tvar i;\n\tthis.result = null;\n\tthis.offset = 0;\n\tresultLength = Binary$load32bitNumber$SI(data, offset);\n\toriginalOffset = offset;\n\toffset += 2;\n\tresult = [  ];\n\twhile (result.length < resultLength) {\n\t\ttag = data.charCodeAt(offset++);\n\t\tif (tag >>> 15 === 1) {\n\t\t\tlength = Math.min(resultLength - result.length, 15);\n\t\t\tfor (i = 0; i < length; i++) {\n\t\t\t\tif (tag >>> i & 0x1) {\n\t\t\t\t\tresult.push(Binary$load32bitNumber$SI(data, offset));\n\t\t\t\t\toffset += 2;\n\t\t\t\t} else {\n\t\t\t\t\tresult.push(0);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (tag >>> 14 === 1) {\n\t\t\t\tlength = tag - 0x4000 + 1;\n\t\t\t\tfor (i = 0; i < length; i++) {\n\t\t\t\t\tresult.push(Binary$load32bitNumber$SI(data, offset));\n\t\t\t\t\toffset += 2;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlength = tag + 1;\n\t\t\t\tfor (i = 0; i < length; i++) {\n\t\t\t\t\tresult.push(0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tthis.result = result;\n\tthis.offset = offset;\n};\n\nLoadedNumberListResult$SI.prototype = new LoadedNumberListResult;\n\n/**\n * class CompressionReport extends Object\n * @constructor\n */\nfunction CompressionReport() {\n}\n\n/**\n * @constructor\n */\nfunction CompressionReport$() {\n\tthis.source = 0;\n\tthis.result = 0;\n};\n\nCompressionReport$.prototype = new CompressionReport;\n\n/**\n * @param {!number} source\n * @param {!number} result\n */\nCompressionReport.prototype.add$II = function (source, result) {\n\tthis.source += source;\n\tthis.result += result;\n};\n\n/**\n * @return {!number}\n */\nCompressionReport.prototype.rate$ = function () {\n\treturn (Math.round(this.result * 100.0 / this.source) | 0);\n};\n\n/**\n * class Query extends Object\n * @constructor\n */\nfunction Query() {\n}\n\n/**\n * @constructor\n */\nfunction Query$() {\n\tthis.word = '';\n\tthis.or = false;\n\tthis.not = false;\n\tthis.raw = false;\n};\n\nQuery$.prototype = new Query;\n\n/**\n * @return {!string}\n */\nQuery.prototype.toString = function () {\n\t/** @type {Array.<undefined|!string>} */\n\tvar result;\n\tresult = [  ];\n\tif (this.or) {\n\t\tresult.push(\"OR \");\n\t}\n\tif (this.not) {\n\t\tresult.push(\"-\");\n\t}\n\tif (this.raw) {\n\t\tresult.push('\"', this.word, '\"');\n\t} else {\n\t\tresult.push(this.word);\n\t}\n\treturn result.join('');\n};\n\n/**\n * class QueryStringParser extends Object\n * @constructor\n */\nfunction QueryStringParser() {\n}\n\n/**\n * @constructor\n */\nfunction QueryStringParser$() {\n\tthis.queries = [  ];\n};\n\nQueryStringParser$.prototype = new QueryStringParser;\n\n/**\n * @param {!string} queryString\n */\nQueryStringParser.prototype.parse$S = function (queryString) {\n\t/** @type {!boolean} */\n\tvar nextOr;\n\t/** @type {!boolean} */\n\tvar nextNot;\n\t/** @type {!number} */\n\tvar currentWordStart;\n\t/** @type {!number} */\n\tvar status;\n\t/** @type {RegExp} */\n\tvar isSpace;\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {!string} */\n\tvar ch;\n\t/** @type {!string} */\n\tvar word;\n\t/** @type {Query} */\n\tvar query;\n\tnextOr = false;\n\tnextNot = false;\n\tcurrentWordStart = 0;\n\tstatus = 0;\n\tisSpace = /[\\s\\u3000]/;\n\tfor (i = 0; i < queryString.length; i++) {\n\t\tch = queryString.charAt(i);\n\t\tswitch (status) {\n\t\tcase 0:\n\t\t\tif (! isSpace.test(ch)) {\n\t\t\t\tif (ch === '-') {\n\t\t\t\t\tnextNot = true;\n\t\t\t\t} else {\n\t\t\t\t\tif (ch === '\"') {\n\t\t\t\t\t\tcurrentWordStart = i + 1;\n\t\t\t\t\t\tstatus = 2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcurrentWordStart = i;\n\t\t\t\t\t\tstatus = 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tnextNot = false;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tif (isSpace.test(ch)) {\n\t\t\t\tword = queryString.slice(currentWordStart, i);\n\t\t\t\tif (word === 'OR') {\n\t\t\t\t\tnextOr = true;\n\t\t\t\t} else {\n\t\t\t\t\tquery = new Query$();\n\t\t\t\t\tquery.word = word;\n\t\t\t\t\tquery.or = nextOr;\n\t\t\t\t\tquery.not = nextNot;\n\t\t\t\t\tthis.queries.push(query);\n\t\t\t\t\tnextOr = false;\n\t\t\t\t\tnextNot = false;\n\t\t\t\t}\n\t\t\t\tstatus = 0;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tif (ch === '\"') {\n\t\t\t\tword = queryString.slice(currentWordStart, i);\n\t\t\t\tquery = new Query$();\n\t\t\t\tquery.word = word;\n\t\t\t\tquery.or = nextOr;\n\t\t\t\tquery.not = nextNot;\n\t\t\t\tquery.raw = true;\n\t\t\t\tthis.queries.push(query);\n\t\t\t\tnextOr = false;\n\t\t\t\tnextNot = false;\n\t\t\t\tstatus = 0;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\tswitch (status) {\n\tcase 0:\n\t\tbreak;\n\tcase 1:\n\t\tquery = new Query$();\n\t\tword = queryString.slice(currentWordStart, queryString.length);\n\t\tif (word !== 'OR') {\n\t\t\tquery.word = word;\n\t\t\tquery.or = nextOr;\n\t\t\tquery.not = nextNot;\n\t\t\tthis.queries.push(query);\n\t\t}\n\t\tbreak;\n\tcase 2:\n\t\tquery = new Query$();\n\t\tquery.word = queryString.slice(currentWordStart, queryString.length);\n\t\tquery.or = nextOr;\n\t\tquery.not = nextNot;\n\t\tquery.raw = true;\n\t\tthis.queries.push(query);\n\t\tbreak;\n\t}\n};\n\n/**\n * class Proposal extends Object\n * @constructor\n */\nfunction Proposal() {\n}\n\n/**\n * @constructor\n * @param {!number} omit\n * @param {!number} expect\n */\nfunction Proposal$II(omit, expect) {\n\tthis.omit = omit;\n\tthis.expect = expect;\n};\n\nProposal$II.prototype = new Proposal;\n\n/**\n * class Position extends Object\n * @constructor\n */\nfunction Position() {\n}\n\n/**\n * @constructor\n * @param {!string} word\n * @param {!number} position\n * @param {!boolean} stemmed\n */\nfunction Position$SIB(word, position, stemmed) {\n\tthis.word = word;\n\tthis.position = position;\n\tthis.stemmed = stemmed;\n};\n\nPosition$SIB.prototype = new Position;\n\n/**\n * class SearchUnit extends Object\n * @constructor\n */\nfunction SearchUnit() {\n}\n\n/**\n * @constructor\n * @param {!number} id\n */\nfunction SearchUnit$I(id) {\n\tthis.positions = ({  });\n\tthis.id = id;\n\tthis._size = 0;\n\tthis.score = 0;\n\tthis.startPosition = (- 1 | 0);\n};\n\nSearchUnit$I.prototype = new SearchUnit;\n\n/**\n * @param {!string} word\n * @param {!number} position\n * @param {!boolean} stemmed\n */\nSearchUnit.prototype.addPosition$SIB = function (word, position, stemmed) {\n\t/** @type {Position} */\n\tvar positionObj;\n\tpositionObj = this.positions[position + \"\"];\n\tif (! positionObj) {\n\t\tthis._size++;\n\t\tthis.positions[position + \"\"] = new Position$SIB(word, position, stemmed);\n\t} else {\n\t\tif (positionObj.word.length < word.length) {\n\t\t\tpositionObj.word = word;\n\t\t}\n\t\tpositionObj.stemmed = positionObj.stemmed && stemmed;\n\t}\n};\n\n/**\n * @param {!number} position\n * @return {Position}\n */\nSearchUnit.prototype.get$I = function (position) {\n\treturn this.positions[position + \"\"];\n};\n\n/**\n * @return {!number}\n */\nSearchUnit.prototype.size$ = function () {\n\treturn this._size;\n};\n\n/**\n * @param {SearchUnit} rhs\n */\nSearchUnit.prototype.merge$LSearchUnit$ = function (rhs) {\n\t/** @type {!string} */\n\tvar position;\n\t/** @type {Position} */\n\tvar pos;\n\tfor (position in rhs.positions) {\n\t\tpos = rhs.positions[position];\n\t\tthis.addPosition$SIB(pos.word, pos.position, pos.stemmed);\n\t}\n};\n\n/**\n * @return {Array.<undefined|Position>}\n */\nSearchUnit.prototype.getPositions$ = function () {\n\tvar $this = this;\n\t/** @type {Array.<undefined|Position>} */\n\tvar result;\n\t/** @type {!string} */\n\tvar pos;\n\tresult = [  ];\n\tfor (pos in this.positions) {\n\t\tresult.push(this.positions[pos]);\n\t}\n\tresult.sort((function (a, b) {\n\t\treturn a.position - b.position;\n\t}));\n\treturn result;\n};\n\n/**\n * class SingleResult extends Object\n * @constructor\n */\nfunction SingleResult() {\n}\n\n/**\n * @constructor\n */\nfunction SingleResult$() {\n\tthis.units = [  ];\n\tthis.unitIds = [  ];\n\tthis.or = false;\n\tthis.not = false;\n\tthis.searchWord = '';\n};\n\nSingleResult$.prototype = new SingleResult;\n\n/**\n * @constructor\n * @param {!string} searchWord\n * @param {!boolean} or\n * @param {!boolean} not\n */\nfunction SingleResult$SBB(searchWord, or, not) {\n\tthis.units = [  ];\n\tthis.unitIds = [  ];\n\tthis.or = or;\n\tthis.not = not;\n\tthis.searchWord = searchWord;\n};\n\nSingleResult$SBB.prototype = new SingleResult;\n\n/**\n * @param {!number} unitId\n * @return {SearchUnit}\n */\nSingleResult.prototype.getSearchUnit$I = function (unitId) {\n\t/** @type {!number} */\n\tvar existing;\n\t/** @type {SearchUnit} */\n\tvar result;\n\texisting = this.unitIds.indexOf(unitId);\n\tif (existing === - 1) {\n\t\tresult = new SearchUnit$I(unitId);\n\t\tthis.units.push(result);\n\t\tthis.unitIds.push(unitId);\n\t} else {\n\t\tresult = this.units[existing];\n\t}\n\treturn result;\n};\n\n/**\n * @param {SingleResult} rhs\n * @return {SingleResult}\n */\nSingleResult.prototype.merge$LSingleResult$ = function (rhs) {\n\t/** @type {SingleResult} */\n\tvar result;\n\tresult = new SingleResult$();\n\tif (rhs.or) {\n\t\tthis._orMerge$LSingleResult$LSingleResult$(result, rhs);\n\t} else {\n\t\tif (rhs.not) {\n\t\t\tthis._notMerge$LSingleResult$LSingleResult$(result, rhs);\n\t\t} else {\n\t\t\tthis._andMerge$LSingleResult$LSingleResult$(result, rhs);\n\t\t}\n\t}\n\treturn result;\n};\n\n/**\n * @return {!number}\n */\nSingleResult.prototype.size$ = function () {\n\treturn (this.units.length | 0);\n};\n\n/**\n * @param {SingleResult} result\n * @param {SingleResult} rhs\n */\nSingleResult.prototype._andMerge$LSingleResult$LSingleResult$ = function (result, rhs) {\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {undefined|!number} */\n\tvar id;\n\t/** @type {SearchUnit} */\n\tvar lhsSection;\n\tfor (i = 0; i < this.unitIds.length; i++) {\n\t\tid = this.unitIds[i];\n\t\tif (rhs.unitIds.indexOf(id) !== - 1) {\n\t\t\tlhsSection = this.units[i];\n\t\t\tresult.unitIds.push((function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/search-result.jsx:168:36] null access\\n                result.unitIds.push(id);\\n                                    ^^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(id)));\n\t\t\tresult.units.push(lhsSection);\n\t\t}\n\t}\n};\n\n/**\n * @param {SingleResult} result\n * @param {SingleResult} rhs\n */\nSingleResult.prototype._orMerge$LSingleResult$LSingleResult$ = function (result, rhs) {\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {undefined|!number} */\n\tvar id;\n\t/** @type {SearchUnit} */\n\tvar rhsSection;\n\t/** @type {SearchUnit} */\n\tvar lhsSection;\n\tresult.unitIds = this.unitIds.slice(0, this.unitIds.length);\n\tresult.units = this.units.slice(0, this.units.length);\n\tfor (i = 0; i < rhs.unitIds.length; i++) {\n\t\tid = rhs.unitIds[i];\n\t\trhsSection = rhs.units[i];\n\t\tif (result.unitIds.indexOf(id) !== - 1) {\n\t\t\tlhsSection = result.units[result.unitIds.indexOf(id)];\n\t\t\tlhsSection.merge$LSearchUnit$(rhsSection);\n\t\t} else {\n\t\t\tresult.unitIds.push((function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/search-result.jsx:190:36] null access\\n                result.unitIds.push(id);\\n                                    ^^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(id)));\n\t\t\tresult.units.push(rhsSection);\n\t\t}\n\t}\n};\n\n/**\n * @param {SingleResult} result\n * @param {SingleResult} rhs\n */\nSingleResult.prototype._notMerge$LSingleResult$LSingleResult$ = function (result, rhs) {\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {undefined|!number} */\n\tvar id;\n\t/** @type {SearchUnit} */\n\tvar lhsSection;\n\tfor (i = 0; i < this.unitIds.length; i++) {\n\t\tid = this.unitIds[i];\n\t\tif (rhs.unitIds.indexOf(id) === - 1) {\n\t\t\tlhsSection = this.units[i];\n\t\t\tresult.unitIds.push((function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/search-result.jsx:204:36] null access\\n                result.unitIds.push(id);\\n                                    ^^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(id)));\n\t\t\tresult.units.push(lhsSection);\n\t\t}\n\t}\n};\n\n/**\n * class SearchSummary extends Object\n * @constructor\n */\nfunction SearchSummary() {\n}\n\n/**\n * @constructor\n */\nfunction SearchSummary$() {\n\tthis.sourceResults = [  ];\n\tthis.result = null;\n\tthis.oktavia = null;\n};\n\nSearchSummary$.prototype = new SearchSummary;\n\n/**\n * @constructor\n * @param {Oktavia} oktavia\n */\nfunction SearchSummary$LOktavia$(oktavia) {\n\tthis.sourceResults = [  ];\n\tthis.result = null;\n\tthis.oktavia = oktavia;\n};\n\nSearchSummary$LOktavia$.prototype = new SearchSummary;\n\n/**\n * @param {SingleResult} result\n */\nSearchSummary.prototype.addQuery$LSingleResult$ = function (result) {\n\tthis.sourceResults.push(result);\n};\n\n/**\n */\nSearchSummary.prototype.mergeResult$ = function () {\n\tthis.result = this.mergeResult$ALSingleResult$(this.sourceResults);\n};\n\n/**\n * @param {Array.<undefined|SingleResult>} results\n * @return {SingleResult}\n */\nSearchSummary.prototype.mergeResult$ALSingleResult$ = function (results) {\n\t/** @type {SingleResult} */\n\tvar rhs;\n\t/** @type {!number} */\n\tvar i;\n\trhs = results[0];\n\tfor (i = 1; i < results.length; i++) {\n\t\trhs = rhs.merge$LSingleResult$(results[i]);\n\t}\n\treturn rhs;\n};\n\n/**\n * @return {Array.<undefined|Proposal>}\n */\nSearchSummary.prototype.getProposal$ = function () {\n\tvar $this = this;\n\t/** @type {Array.<undefined|Proposal>} */\n\tvar proposals;\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {Array.<undefined|SingleResult>} */\n\tvar tmpSource;\n\t/** @type {!number} */\n\tvar j;\n\t/** @type {SingleResult} */\n\tvar result;\n\tproposals = [  ];\n\tfor (i = 0; i < this.sourceResults.length; i++) {\n\t\ttmpSource = [  ];\n\t\tfor (j = 0; j < this.sourceResults.length; j++) {\n\t\t\tif (i !== j) {\n\t\t\t\ttmpSource.push(this.sourceResults[j]);\n\t\t\t}\n\t\t}\n\t\tresult = this.mergeResult$ALSingleResult$(tmpSource);\n\t\tproposals.push(new Proposal$II(i, result.size$()));\n\t}\n\tproposals.sort((function (a, b) {\n\t\treturn b.expect - a.expect;\n\t}));\n\treturn proposals;\n};\n\n/**\n * @return {Array.<undefined|SearchUnit>}\n */\nSearchSummary.prototype.getSortedResult$ = function () {\n\tvar $this = this;\n\t/** @type {Array.<undefined|SearchUnit>} */\n\tvar result;\n\tresult = this.result.units.slice(0, this.result.units.length);\n\tresult.sort((function (a, b) {\n\t\treturn b.score - a.score;\n\t}));\n\treturn result;\n};\n\n/**\n * @return {!number}\n */\nSearchSummary.prototype.size$ = function () {\n\treturn this.result.size$();\n};\n\n/**\n * @param {SingleResult} result\n */\nSearchSummary.prototype.add$LSingleResult$ = function (result) {\n\tthis.sourceResults.push(result);\n};\n\n/**\n * class Style extends Object\n * @constructor\n */\nfunction Style() {\n}\n\n/**\n * @constructor\n * @param {!string} mode\n */\nfunction Style$S(mode) {\n\tthis.styles = null;\n\tthis.escapeHTML = false;\n\tswitch (mode) {\n\tcase 'console':\n\t\tthis.styles = Style.console;\n\t\tbreak;\n\tcase 'html':\n\t\tthis.styles = Style.html;\n\t\tbreak;\n\tcase 'ignore':\n\t\tthis.styles = Style.ignore;\n\t\tbreak;\n\tdefault:\n\t\tthis.styles = Style.ignore;\n\t\tbreak;\n\t}\n\tthis.escapeHTML = mode === 'html';\n};\n\nStyle$S.prototype = new Style;\n\n/**\n * @param {!string} source\n * @return {!string}\n */\nStyle.prototype.convert$S = function (source) {\n\t/** @type {_HTMLHandler} */\n\tvar handler;\n\t/** @type {SAXParser} */\n\tvar parser;\n\thandler = new _HTMLHandler$HASB(this.styles, this.escapeHTML);\n\tparser = new SAXParser$LSAXHandler$(handler);\n\tparser.parse$S(source);\n\treturn handler.result$();\n};\n\n/**\n * class Stemmer\n * @constructor\n */\nfunction Stemmer() {\n}\n\nStemmer.prototype.$__jsx_implements_Stemmer = true;\n\n/**\n * @constructor\n */\nfunction Stemmer$() {\n};\n\nStemmer$.prototype = new Stemmer;\n\n/**\n * class BaseStemmer extends Object\n * @constructor\n */\nfunction BaseStemmer() {\n}\n\n$__jsx_merge_interface(BaseStemmer, Stemmer);\n\n/**\n * @constructor\n */\nfunction BaseStemmer$() {\n\tStemmer$.call(this);\n\tthis.current = \"\";\n\tthis.cursor = 0;\n\tthis.limit = 0;\n\tthis.limit_backward = 0;\n\tthis.bra = 0;\n\tthis.ket = 0;\n\tthis.cache = ({  });\n\tthis.setCurrent$S(\"\");\n};\n\nBaseStemmer$.prototype = new BaseStemmer;\n\n/**\n * @param {!string} value\n */\nBaseStemmer.prototype.setCurrent$S = function (value) {\n\tthis.current = value;\n\tthis.cursor = 0;\n\tthis.limit = this.current.length;\n\tthis.limit_backward = 0;\n\tthis.bra = this.cursor;\n\tthis.ket = this.limit;\n};\n\n/**\n * @return {!string}\n */\nBaseStemmer.prototype.getCurrent$ = function () {\n\treturn this.current;\n};\n\n/**\n * @param {BaseStemmer} other\n */\nBaseStemmer.prototype.copy_from$LBaseStemmer$ = function (other) {\n\tthis.current = other.current;\n\tthis.cursor = other.cursor;\n\tthis.limit = other.limit;\n\tthis.limit_backward = other.limit_backward;\n\tthis.bra = other.bra;\n\tthis.ket = other.ket;\n};\n\n/**\n * @param {Array.<undefined|!number>} s\n * @param {!number} min\n * @param {!number} max\n * @return {!boolean}\n */\nBaseStemmer.prototype.in_grouping$AIII = function (s, min, max) {\n\t/** @type {!number} */\n\tvar ch;\n\tif (this.cursor >= this.limit) {\n\t\treturn false;\n\t}\n\tch = this.current.charCodeAt(this.cursor);\n\tif (ch > max || ch < min) {\n\t\treturn false;\n\t}\n\tch -= min;\n\tif (((function (v) {\n\t\tif (! (v != null)) {\n\t\t\tdebugger;\n\t\t\tthrow new Error(\"[src/stemmer/base-stemmer.jsx:59:10] null access\\n    if ((s[ch >>> 3] & (0x1 << (ch & 0x7))) == 0) return false;\\n          ^\\n\");\n\t\t}\n\t\treturn v;\n\t}(s[ch >>> 3])) & 0x1 << (ch & 0x7)) === 0) {\n\t\treturn false;\n\t}\n\tthis.cursor++;\n\treturn true;\n};\n\n/**\n * @param {Array.<undefined|!number>} s\n * @param {!number} min\n * @param {!number} max\n * @return {!boolean}\n */\nBaseStemmer.prototype.in_grouping_b$AIII = function (s, min, max) {\n\t/** @type {!number} */\n\tvar ch;\n\tif (this.cursor <= this.limit_backward) {\n\t\treturn false;\n\t}\n\tch = this.current.charCodeAt(this.cursor - 1);\n\tif (ch > max || ch < min) {\n\t\treturn false;\n\t}\n\tch -= min;\n\tif (((function (v) {\n\t\tif (! (v != null)) {\n\t\t\tdebugger;\n\t\t\tthrow new Error(\"[src/stemmer/base-stemmer.jsx:70:10] null access\\n    if ((s[ch >>> 3] & (0x1 << (ch & 0x7))) == 0) return false;\\n          ^\\n\");\n\t\t}\n\t\treturn v;\n\t}(s[ch >>> 3])) & 0x1 << (ch & 0x7)) === 0) {\n\t\treturn false;\n\t}\n\tthis.cursor--;\n\treturn true;\n};\n\n/**\n * @param {Array.<undefined|!number>} s\n * @param {!number} min\n * @param {!number} max\n * @return {!boolean}\n */\nBaseStemmer.prototype.out_grouping$AIII = function (s, min, max) {\n\t/** @type {!number} */\n\tvar ch;\n\tif (this.cursor >= this.limit) {\n\t\treturn false;\n\t}\n\tch = this.current.charCodeAt(this.cursor);\n\tif (ch > max || ch < min) {\n\t\tthis.cursor++;\n\t\treturn true;\n\t}\n\tch -= min;\n\tif (((function (v) {\n\t\tif (! (v != null)) {\n\t\t\tdebugger;\n\t\t\tthrow new Error(\"[src/stemmer/base-stemmer.jsx:84:10] null access\\n    if ((s[ch >>> 3] & (0X1 << (ch & 0x7))) == 0) {\\n          ^\\n\");\n\t\t}\n\t\treturn v;\n\t}(s[ch >>> 3])) & 0X1 << (ch & 0x7)) === 0) {\n\t\tthis.cursor++;\n\t\treturn true;\n\t}\n\treturn false;\n};\n\n/**\n * @param {Array.<undefined|!number>} s\n * @param {!number} min\n * @param {!number} max\n * @return {!boolean}\n */\nBaseStemmer.prototype.out_grouping_b$AIII = function (s, min, max) {\n\t/** @type {!number} */\n\tvar ch;\n\tif (this.cursor <= this.limit_backward) {\n\t\treturn false;\n\t}\n\tch = this.current.charCodeAt(this.cursor - 1);\n\tif (ch > max || ch < min) {\n\t\tthis.cursor--;\n\t\treturn true;\n\t}\n\tch -= min;\n\tif (((function (v) {\n\t\tif (! (v != null)) {\n\t\t\tdebugger;\n\t\t\tthrow new Error(\"[src/stemmer/base-stemmer.jsx:100:10] null access\\n    if ((s[ch >>> 3] & (0x1 << (ch & 0x7))) == 0) {\\n          ^\\n\");\n\t\t}\n\t\treturn v;\n\t}(s[ch >>> 3])) & 0x1 << (ch & 0x7)) === 0) {\n\t\tthis.cursor--;\n\t\treturn true;\n\t}\n\treturn false;\n};\n\n/**\n * @param {!number} min\n * @param {!number} max\n * @return {!boolean}\n */\nBaseStemmer.prototype.in_range$II = function (min, max) {\n\t/** @type {!number} */\n\tvar ch;\n\tif (this.cursor >= this.limit) {\n\t\treturn false;\n\t}\n\tch = this.current.charCodeAt(this.cursor);\n\tif (ch > max || ch < min) {\n\t\treturn false;\n\t}\n\tthis.cursor++;\n\treturn true;\n};\n\n/**\n * @param {!number} min\n * @param {!number} max\n * @return {!boolean}\n */\nBaseStemmer.prototype.in_range_b$II = function (min, max) {\n\t/** @type {!number} */\n\tvar ch;\n\tif (this.cursor <= this.limit_backward) {\n\t\treturn false;\n\t}\n\tch = this.current.charCodeAt(this.cursor - 1);\n\tif (ch > max || ch < min) {\n\t\treturn false;\n\t}\n\tthis.cursor--;\n\treturn true;\n};\n\n/**\n * @param {!number} min\n * @param {!number} max\n * @return {!boolean}\n */\nBaseStemmer.prototype.out_range$II = function (min, max) {\n\t/** @type {!number} */\n\tvar ch;\n\tif (this.cursor >= this.limit) {\n\t\treturn false;\n\t}\n\tch = this.current.charCodeAt(this.cursor);\n\tif (! (ch > max || ch < min)) {\n\t\treturn false;\n\t}\n\tthis.cursor++;\n\treturn true;\n};\n\n/**\n * @param {!number} min\n * @param {!number} max\n * @return {!boolean}\n */\nBaseStemmer.prototype.out_range_b$II = function (min, max) {\n\t/** @type {!number} */\n\tvar ch;\n\tif (this.cursor <= this.limit_backward) {\n\t\treturn false;\n\t}\n\tch = this.current.charCodeAt(this.cursor - 1);\n\tif (! (ch > max || ch < min)) {\n\t\treturn false;\n\t}\n\tthis.cursor--;\n\treturn true;\n};\n\n/**\n * @param {!number} s_size\n * @param {!string} s\n * @return {!boolean}\n */\nBaseStemmer.prototype.eq_s$IS = function (s_size, s) {\n\tif (this.limit - this.cursor < s_size) {\n\t\treturn false;\n\t}\n\tif (this.current.slice(this.cursor, this.cursor + s_size) !== s) {\n\t\treturn false;\n\t}\n\tthis.cursor += s_size;\n\treturn true;\n};\n\n/**\n * @param {!number} s_size\n * @param {!string} s\n * @return {!boolean}\n */\nBaseStemmer.prototype.eq_s_b$IS = function (s_size, s) {\n\tif (this.cursor - this.limit_backward < s_size) {\n\t\treturn false;\n\t}\n\tif (this.current.slice(this.cursor - s_size, this.cursor) !== s) {\n\t\treturn false;\n\t}\n\tthis.cursor -= s_size;\n\treturn true;\n};\n\n/**\n * @param {!string} s\n * @return {!boolean}\n */\nBaseStemmer.prototype.eq_v$S = function (s) {\n\treturn this.eq_s$IS(s.length, s);\n};\n\n/**\n * @param {!string} s\n * @return {!boolean}\n */\nBaseStemmer.prototype.eq_v_b$S = function (s) {\n\treturn this.eq_s_b$IS(s.length, s);\n};\n\n/**\n * @param {Array.<undefined|Among>} v\n * @param {!number} v_size\n * @return {!number}\n */\nBaseStemmer.prototype.find_among$ALAmong$I = function (v, v_size) {\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {!number} */\n\tvar j;\n\t/** @type {!number} */\n\tvar c;\n\t/** @type {!number} */\n\tvar l;\n\t/** @type {!number} */\n\tvar common_i;\n\t/** @type {!number} */\n\tvar common_j;\n\t/** @type {!boolean} */\n\tvar first_key_inspected;\n\t/** @type {!number} */\n\tvar k;\n\t/** @type {!number} */\n\tvar diff;\n\t/** @type {!number} */\n\tvar common;\n\t/** @type {Among} */\n\tvar w;\n\t/** @type {!number} */\n\tvar i2;\n\t/** @type {!boolean} */\n\tvar res;\n\ti = 0;\n\tj = v_size;\n\tc = this.cursor;\n\tl = this.limit;\n\tcommon_i = 0;\n\tcommon_j = 0;\n\tfirst_key_inspected = false;\n\twhile (true) {\n\t\tk = i + (j - i >>> 1);\n\t\tdiff = 0;\n\t\tcommon = (common_i < common_j ? common_i : common_j);\n\t\tw = v[k];\n\t\tfor (i2 = common; i2 < w.s_size; i2++) {\n\t\t\tif (c + common === l) {\n\t\t\t\tdiff = - 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdiff = this.current.charCodeAt(c + common) - w.s.charCodeAt(i2);\n\t\t\tif (diff !== 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcommon++;\n\t\t}\n\t\tif (diff < 0) {\n\t\t\tj = k;\n\t\t\tcommon_j = common;\n\t\t} else {\n\t\t\ti = k;\n\t\t\tcommon_i = common;\n\t\t}\n\t\tif (j - i <= 1) {\n\t\t\tif (i > 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j === i) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (first_key_inspected) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tfirst_key_inspected = true;\n\t\t}\n\t}\n\twhile (true) {\n\t\tw = v[i];\n\t\tif (common_i >= w.s_size) {\n\t\t\tthis.cursor = (c + w.s_size | 0);\n\t\t\tif (w.method == null) {\n\t\t\t\treturn w.result;\n\t\t\t}\n\t\t\tres = w.method(w.instance);\n\t\t\tthis.cursor = (c + w.s_size | 0);\n\t\t\tif (res) {\n\t\t\t\treturn w.result;\n\t\t\t}\n\t\t}\n\t\ti = w.substring_i;\n\t\tif (i < 0) {\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn (- 1 | 0);\n};\n\n/**\n * @param {Array.<undefined|Among>} v\n * @param {!number} v_size\n * @return {!number}\n */\nBaseStemmer.prototype.find_among_b$ALAmong$I = function (v, v_size) {\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {!number} */\n\tvar j;\n\t/** @type {!number} */\n\tvar c;\n\t/** @type {!number} */\n\tvar lb;\n\t/** @type {!number} */\n\tvar common_i;\n\t/** @type {!number} */\n\tvar common_j;\n\t/** @type {!boolean} */\n\tvar first_key_inspected;\n\t/** @type {!number} */\n\tvar k;\n\t/** @type {!number} */\n\tvar diff;\n\t/** @type {!number} */\n\tvar common;\n\t/** @type {Among} */\n\tvar w;\n\t/** @type {!number} */\n\tvar i2;\n\t/** @type {!boolean} */\n\tvar res;\n\ti = 0;\n\tj = v_size;\n\tc = this.cursor;\n\tlb = this.limit_backward;\n\tcommon_i = 0;\n\tcommon_j = 0;\n\tfirst_key_inspected = false;\n\twhile (true) {\n\t\tk = i + (j - i >> 1);\n\t\tdiff = 0;\n\t\tcommon = (common_i < common_j ? common_i : common_j);\n\t\tw = v[k];\n\t\tfor (i2 = w.s_size - 1 - common; i2 >= 0; i2--) {\n\t\t\tif (c - common === lb) {\n\t\t\t\tdiff = - 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdiff = this.current.charCodeAt(c - 1 - common) - w.s.charCodeAt(i2);\n\t\t\tif (diff !== 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcommon++;\n\t\t}\n\t\tif (diff < 0) {\n\t\t\tj = k;\n\t\t\tcommon_j = common;\n\t\t} else {\n\t\t\ti = k;\n\t\t\tcommon_i = common;\n\t\t}\n\t\tif (j - i <= 1) {\n\t\t\tif (i > 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j === i) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (first_key_inspected) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tfirst_key_inspected = true;\n\t\t}\n\t}\n\twhile (true) {\n\t\tw = v[i];\n\t\tif (common_i >= w.s_size) {\n\t\t\tthis.cursor = (c - w.s_size | 0);\n\t\t\tif (w.method == null) {\n\t\t\t\treturn w.result;\n\t\t\t}\n\t\t\tres = w.method(this);\n\t\t\tthis.cursor = (c - w.s_size | 0);\n\t\t\tif (res) {\n\t\t\t\treturn w.result;\n\t\t\t}\n\t\t}\n\t\ti = w.substring_i;\n\t\tif (i < 0) {\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn (- 1 | 0);\n};\n\n/**\n * @param {!number} c_bra\n * @param {!number} c_ket\n * @param {!string} s\n * @return {!number}\n */\nBaseStemmer.prototype.replace_s$IIS = function (c_bra, c_ket, s) {\n\t/** @type {!number} */\n\tvar adjustment;\n\tadjustment = s.length - (c_ket - c_bra);\n\tthis.current = this.current.slice(0, c_bra) + s + this.current.slice(c_ket);\n\tthis.limit += (adjustment | 0);\n\tif (this.cursor >= c_ket) {\n\t\tthis.cursor += (adjustment | 0);\n\t} else {\n\t\tif (this.cursor > c_bra) {\n\t\t\tthis.cursor = c_bra;\n\t\t}\n\t}\n\treturn (adjustment | 0);\n};\n\n/**\n * @return {!boolean}\n */\nBaseStemmer.prototype.slice_check$ = function () {\n\tif (this.bra < 0 || this.bra > this.ket || this.ket > this.limit || this.limit > this.current.length) {\n\t\treturn false;\n\t}\n\treturn true;\n};\n\n/**\n * @param {!string} s\n * @return {!boolean}\n */\nBaseStemmer.prototype.slice_from$S = function (s) {\n\t/** @type {!boolean} */\n\tvar result;\n\tresult = false;\n\tif (this.slice_check$()) {\n\t\tthis.replace_s$IIS(this.bra, this.ket, s);\n\t\tresult = true;\n\t}\n\treturn result;\n};\n\n/**\n * @return {!boolean}\n */\nBaseStemmer.prototype.slice_del$ = function () {\n\treturn this.slice_from$S(\"\");\n};\n\n/**\n * @param {!number} c_bra\n * @param {!number} c_ket\n * @param {!string} s\n */\nBaseStemmer.prototype.insert$IIS = function (c_bra, c_ket, s) {\n\t/** @type {!number} */\n\tvar adjustment;\n\tadjustment = this.replace_s$IIS(c_bra, c_ket, s);\n\tif (c_bra <= this.bra) {\n\t\tthis.bra += (adjustment | 0);\n\t}\n\tif (c_bra <= this.ket) {\n\t\tthis.ket += (adjustment | 0);\n\t}\n};\n\n/**\n * @param {!string} s\n * @return {!string}\n */\nBaseStemmer.prototype.slice_to$S = function (s) {\n\t/** @type {!string} */\n\tvar result;\n\tresult = '';\n\tif (this.slice_check$()) {\n\t\tresult = this.current.slice(this.bra, this.ket);\n\t}\n\treturn result;\n};\n\n/**\n * @param {!string} s\n * @return {!string}\n */\nBaseStemmer.prototype.assign_to$S = function (s) {\n\treturn this.current.slice(0, this.limit);\n};\n\n/**\n * @return {!boolean}\n */\nBaseStemmer.prototype.stem$ = function () {\n\treturn false;\n};\n\n/**\n * @param {!string} word\n * @return {!string}\n */\nBaseStemmer.prototype.stemWord$S = function (word) {\n\t/** @type {undefined|!string} */\n\tvar result;\n\tresult = this.cache['.' + word];\n\tif (result == null) {\n\t\tthis.setCurrent$S(word);\n\t\tthis.stem$();\n\t\tresult = this.getCurrent$();\n\t\tthis.cache['.' + word] = result;\n\t}\n\treturn (function (v) {\n\t\tif (! (v != null)) {\n\t\t\tdebugger;\n\t\t\tthrow new Error(\"[src/stemmer/base-stemmer.jsx:398:15] null access\\n        return result;\\n               ^^^^^^\\n\");\n\t\t}\n\t\treturn v;\n\t}(result));\n};\n\n/**\n * @param {Array.<undefined|!string>} words\n * @return {Array.<undefined|!string>}\n */\nBaseStemmer.prototype.stemWords$AS = function (words) {\n\t/** @type {Array.<undefined|!string>} */\n\tvar results;\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {undefined|!string} */\n\tvar word;\n\t/** @type {undefined|!string} */\n\tvar result;\n\tresults = [  ];\n\tfor (i = 0; i < words.length; i++) {\n\t\tword = words[i];\n\t\tresult = this.cache['.' + (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/stemmer/base-stemmer.jsx:407:42] null access\\n            var result = this.cache[\\'.\\' + word];\\n                                          ^^^^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(word))];\n\t\tif (result == null) {\n\t\t\tthis.setCurrent$S((function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/stemmer/base-stemmer.jsx:410:32] null access\\n                this.setCurrent(word);\\n                                ^^^^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(word)));\n\t\t\tthis.stem$();\n\t\t\tresult = this.getCurrent$();\n\t\t\tthis.cache['.' + (function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/stemmer/base-stemmer.jsx:413:33] null access\\n                this.cache[\\'.\\' + word] = result;\\n                                 ^^^^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(word))] = result;\n\t\t}\n\t\tresults.push((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/stemmer/base-stemmer.jsx:415:25] null access\\n            results.push(result);\\n                         ^^^^^^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(result)));\n\t}\n\treturn results;\n};\n\n/**\n * class EnglishStemmer extends BaseStemmer\n * @constructor\n */\nfunction EnglishStemmer() {\n}\n\nEnglishStemmer.prototype = new BaseStemmer;\n/**\n * @constructor\n */\nfunction EnglishStemmer$() {\n\tBaseStemmer$.call(this);\n\tthis.B_Y_found = false;\n\tthis.I_p2 = 0;\n\tthis.I_p1 = 0;\n};\n\nEnglishStemmer$.prototype = new EnglishStemmer;\n\n/**\n * @param {EnglishStemmer} other\n */\nEnglishStemmer.prototype.copy_from$LEnglishStemmer$ = function (other) {\n\tthis.B_Y_found = other.B_Y_found;\n\tthis.I_p2 = other.I_p2;\n\tthis.I_p1 = other.I_p1;\n\tBaseStemmer.prototype.copy_from$LBaseStemmer$.call(this, other);\n};\n\n/**\n * @return {!boolean}\n */\nEnglishStemmer.prototype.r_prelude$ = function () {\n\t/** @type {!number} */\n\tvar v_1;\n\t/** @type {!number} */\n\tvar v_2;\n\t/** @type {!number} */\n\tvar v_3;\n\t/** @type {!number} */\n\tvar v_4;\n\t/** @type {!number} */\n\tvar v_5;\n\t/** @type {!boolean} */\n\tvar lab0;\n\t/** @type {!boolean} */\n\tvar lab1;\n\t/** @type {!boolean} */\n\tvar lab2;\n\t/** @type {!boolean} */\n\tvar lab4;\n\t/** @type {!boolean} */\n\tvar lab6;\n\tthis.B_Y_found = false;\n\tv_1 = this.cursor;\n\tlab0 = true;\nlab0:\n\twhile (lab0 === true) {\n\t\tlab0 = false;\n\t\tthis.bra = this.cursor;\n\t\tif (! this.eq_s$IS(1, \"'\")) {\n\t\t\tbreak lab0;\n\t\t}\n\t\tthis.ket = this.cursor;\n\t\tif (! this.slice_del$()) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tthis.cursor = v_1;\n\tv_2 = this.cursor;\n\tlab1 = true;\nlab1:\n\twhile (lab1 === true) {\n\t\tlab1 = false;\n\t\tthis.bra = this.cursor;\n\t\tif (! this.eq_s$IS(1, \"y\")) {\n\t\t\tbreak lab1;\n\t\t}\n\t\tthis.ket = this.cursor;\n\t\tif (! this.slice_from$S(\"Y\")) {\n\t\t\treturn false;\n\t\t}\n\t\tthis.B_Y_found = true;\n\t}\n\tthis.cursor = v_2;\n\tv_3 = this.cursor;\n\tlab2 = true;\nlab2:\n\twhile (lab2 === true) {\n\t\tlab2 = false;\n\treplab3:\n\t\twhile (true) {\n\t\t\tv_4 = this.cursor;\n\t\t\tlab4 = true;\n\t\tlab4:\n\t\t\twhile (lab4 === true) {\n\t\t\t\tlab4 = false;\n\t\t\tgolab5:\n\t\t\t\twhile (true) {\n\t\t\t\t\tv_5 = this.cursor;\n\t\t\t\t\tlab6 = true;\n\t\t\t\tlab6:\n\t\t\t\t\twhile (lab6 === true) {\n\t\t\t\t\t\tlab6 = false;\n\t\t\t\t\t\tif (! this.in_grouping$AIII(EnglishStemmer.g_v, 97, 121)) {\n\t\t\t\t\t\t\tbreak lab6;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.bra = this.cursor;\n\t\t\t\t\t\tif (! this.eq_s$IS(1, \"y\")) {\n\t\t\t\t\t\t\tbreak lab6;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.ket = this.cursor;\n\t\t\t\t\t\tthis.cursor = v_5;\n\t\t\t\t\t\tbreak golab5;\n\t\t\t\t\t}\n\t\t\t\t\tthis.cursor = v_5;\n\t\t\t\t\tif (this.cursor >= this.limit) {\n\t\t\t\t\t\tbreak lab4;\n\t\t\t\t\t}\n\t\t\t\t\tthis.cursor++;\n\t\t\t\t}\n\t\t\t\tif (! this.slice_from$S(\"Y\")) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tthis.B_Y_found = true;\n\t\t\t\tcontinue replab3;\n\t\t\t}\n\t\t\tthis.cursor = v_4;\n\t\t\tbreak replab3;\n\t\t}\n\t}\n\tthis.cursor = v_3;\n\treturn true;\n};\n\n/**\n * @return {!boolean}\n */\nEnglishStemmer.prototype.r_mark_regions$ = function () {\n\t/** @type {!number} */\n\tvar v_1;\n\t/** @type {!number} */\n\tvar v_2;\n\t/** @type {!boolean} */\n\tvar lab0;\n\t/** @type {!boolean} */\n\tvar lab1;\n\t/** @type {!boolean} */\n\tvar lab2;\n\t/** @type {!boolean} */\n\tvar lab4;\n\t/** @type {!boolean} */\n\tvar lab6;\n\t/** @type {!boolean} */\n\tvar lab8;\n\t/** @type {!boolean} */\n\tvar lab10;\n\tthis.I_p1 = this.limit;\n\tthis.I_p2 = this.limit;\n\tv_1 = this.cursor;\n\tlab0 = true;\nlab0:\n\twhile (lab0 === true) {\n\t\tlab0 = false;\n\t\tlab1 = true;\n\tlab1:\n\t\twhile (lab1 === true) {\n\t\t\tlab1 = false;\n\t\t\tv_2 = this.cursor;\n\t\t\tlab2 = true;\n\t\tlab2:\n\t\t\twhile (lab2 === true) {\n\t\t\t\tlab2 = false;\n\t\t\t\tif (this.find_among$ALAmong$I(EnglishStemmer.a_0, 3) === 0) {\n\t\t\t\t\tbreak lab2;\n\t\t\t\t}\n\t\t\t\tbreak lab1;\n\t\t\t}\n\t\t\tthis.cursor = v_2;\n\t\tgolab3:\n\t\t\twhile (true) {\n\t\t\t\tlab4 = true;\n\t\t\tlab4:\n\t\t\t\twhile (lab4 === true) {\n\t\t\t\t\tlab4 = false;\n\t\t\t\t\tif (! this.in_grouping$AIII(EnglishStemmer.g_v, 97, 121)) {\n\t\t\t\t\t\tbreak lab4;\n\t\t\t\t\t}\n\t\t\t\t\tbreak golab3;\n\t\t\t\t}\n\t\t\t\tif (this.cursor >= this.limit) {\n\t\t\t\t\tbreak lab0;\n\t\t\t\t}\n\t\t\t\tthis.cursor++;\n\t\t\t}\n\t\tgolab5:\n\t\t\twhile (true) {\n\t\t\t\tlab6 = true;\n\t\t\tlab6:\n\t\t\t\twhile (lab6 === true) {\n\t\t\t\t\tlab6 = false;\n\t\t\t\t\tif (! this.out_grouping$AIII(EnglishStemmer.g_v, 97, 121)) {\n\t\t\t\t\t\tbreak lab6;\n\t\t\t\t\t}\n\t\t\t\t\tbreak golab5;\n\t\t\t\t}\n\t\t\t\tif (this.cursor >= this.limit) {\n\t\t\t\t\tbreak lab0;\n\t\t\t\t}\n\t\t\t\tthis.cursor++;\n\t\t\t}\n\t\t}\n\t\tthis.I_p1 = this.cursor;\n\tgolab7:\n\t\twhile (true) {\n\t\t\tlab8 = true;\n\t\tlab8:\n\t\t\twhile (lab8 === true) {\n\t\t\t\tlab8 = false;\n\t\t\t\tif (! this.in_grouping$AIII(EnglishStemmer.g_v, 97, 121)) {\n\t\t\t\t\tbreak lab8;\n\t\t\t\t}\n\t\t\t\tbreak golab7;\n\t\t\t}\n\t\t\tif (this.cursor >= this.limit) {\n\t\t\t\tbreak lab0;\n\t\t\t}\n\t\t\tthis.cursor++;\n\t\t}\n\tgolab9:\n\t\twhile (true) {\n\t\t\tlab10 = true;\n\t\tlab10:\n\t\t\twhile (lab10 === true) {\n\t\t\t\tlab10 = false;\n\t\t\t\tif (! this.out_grouping$AIII(EnglishStemmer.g_v, 97, 121)) {\n\t\t\t\t\tbreak lab10;\n\t\t\t\t}\n\t\t\t\tbreak golab9;\n\t\t\t}\n\t\t\tif (this.cursor >= this.limit) {\n\t\t\t\tbreak lab0;\n\t\t\t}\n\t\t\tthis.cursor++;\n\t\t}\n\t\tthis.I_p2 = this.cursor;\n\t}\n\tthis.cursor = v_1;\n\treturn true;\n};\n\n/**\n * @return {!boolean}\n */\nEnglishStemmer.prototype.r_shortv$ = function () {\n\t/** @type {!number} */\n\tvar v_1;\n\t/** @type {!boolean} */\n\tvar lab0;\n\t/** @type {!boolean} */\n\tvar lab1;\n\tlab0 = true;\nlab0:\n\twhile (lab0 === true) {\n\t\tlab0 = false;\n\t\tv_1 = this.limit - this.cursor;\n\t\tlab1 = true;\n\tlab1:\n\t\twhile (lab1 === true) {\n\t\t\tlab1 = false;\n\t\t\tif (! this.out_grouping_b$AIII(EnglishStemmer.g_v_WXY, 89, 121)) {\n\t\t\t\tbreak lab1;\n\t\t\t}\n\t\t\tif (! this.in_grouping_b$AIII(EnglishStemmer.g_v, 97, 121)) {\n\t\t\t\tbreak lab1;\n\t\t\t}\n\t\t\tif (! this.out_grouping_b$AIII(EnglishStemmer.g_v, 97, 121)) {\n\t\t\t\tbreak lab1;\n\t\t\t}\n\t\t\tbreak lab0;\n\t\t}\n\t\tthis.cursor = this.limit - v_1;\n\t\tif (! this.out_grouping_b$AIII(EnglishStemmer.g_v, 97, 121)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (! this.in_grouping_b$AIII(EnglishStemmer.g_v, 97, 121)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this.cursor > this.limit_backward) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n};\n\n/**\n * @return {!boolean}\n */\nEnglishStemmer.prototype.r_R1$ = function () {\n\tif (! (this.I_p1 <= this.cursor)) {\n\t\treturn false;\n\t}\n\treturn true;\n};\n\n/**\n * @return {!boolean}\n */\nEnglishStemmer.prototype.r_R2$ = function () {\n\tif (! (this.I_p2 <= this.cursor)) {\n\t\treturn false;\n\t}\n\treturn true;\n};\n\n/**\n * @return {!boolean}\n */\nEnglishStemmer.prototype.r_Step_1a$ = function () {\n\t/** @type {!number} */\n\tvar among_var;\n\t/** @type {!number} */\n\tvar v_1;\n\t/** @type {!number} */\n\tvar v_2;\n\t/** @type {!boolean} */\n\tvar lab0;\n\t/** @type {!boolean} */\n\tvar lab1;\n\t/** @type {!boolean} */\n\tvar lab2;\n\t/** @type {!number} */\n\tvar c;\n\t/** @type {!boolean} */\n\tvar lab4;\n\tv_1 = this.limit - this.cursor;\n\tlab0 = true;\nlab0:\n\twhile (lab0 === true) {\n\t\tlab0 = false;\n\t\tthis.ket = this.cursor;\n\t\tamong_var = this.find_among_b$ALAmong$I(EnglishStemmer.a_1, 3);\n\t\tif (among_var === 0) {\n\t\t\tthis.cursor = this.limit - v_1;\n\t\t\tbreak lab0;\n\t\t}\n\t\tthis.bra = this.cursor;\n\t\tswitch (among_var) {\n\t\tcase 0:\n\t\t\tthis.cursor = this.limit - v_1;\n\t\t\tbreak lab0;\n\t\tcase 1:\n\t\t\tif (! this.slice_del$()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\tthis.ket = this.cursor;\n\tamong_var = this.find_among_b$ALAmong$I(EnglishStemmer.a_2, 6);\n\tif (among_var === 0) {\n\t\treturn false;\n\t}\n\tthis.bra = this.cursor;\n\tswitch (among_var) {\n\tcase 0:\n\t\treturn false;\n\tcase 1:\n\t\tif (! this.slice_from$S(\"ss\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 2:\n\t\tlab1 = true;\n\tlab1:\n\t\twhile (lab1 === true) {\n\t\t\tlab1 = false;\n\t\t\tv_2 = this.limit - this.cursor;\n\t\t\tlab2 = true;\n\t\tlab2:\n\t\t\twhile (lab2 === true) {\n\t\t\t\tlab2 = false;\n\t\t\t\tc = (this.cursor - 2 | 0);\n\t\t\t\tif (this.limit_backward > c || c > this.limit) {\n\t\t\t\t\tbreak lab2;\n\t\t\t\t}\n\t\t\t\tthis.cursor = c;\n\t\t\t\tif (! this.slice_from$S(\"i\")) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tbreak lab1;\n\t\t\t}\n\t\t\tthis.cursor = this.limit - v_2;\n\t\t\tif (! this.slice_from$S(\"ie\")) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tbreak;\n\tcase 3:\n\t\tif (this.cursor <= this.limit_backward) {\n\t\t\treturn false;\n\t\t}\n\t\tthis.cursor--;\n\tgolab3:\n\t\twhile (true) {\n\t\t\tlab4 = true;\n\t\tlab4:\n\t\t\twhile (lab4 === true) {\n\t\t\t\tlab4 = false;\n\t\t\t\tif (! this.in_grouping_b$AIII(EnglishStemmer.g_v, 97, 121)) {\n\t\t\t\t\tbreak lab4;\n\t\t\t\t}\n\t\t\t\tbreak golab3;\n\t\t\t}\n\t\t\tif (this.cursor <= this.limit_backward) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tthis.cursor--;\n\t\t}\n\t\tif (! this.slice_del$()) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\t}\n\treturn true;\n};\n\n/**\n * @return {!boolean}\n */\nEnglishStemmer.prototype.r_Step_1b$ = function () {\n\t/** @type {!number} */\n\tvar among_var;\n\t/** @type {!number} */\n\tvar v_1;\n\t/** @type {!number} */\n\tvar v_3;\n\t/** @type {!number} */\n\tvar v_4;\n\t/** @type {!boolean} */\n\tvar lab1;\n\t/** @type {!number} */\n\tvar c;\n\tthis.ket = this.cursor;\n\tamong_var = this.find_among_b$ALAmong$I(EnglishStemmer.a_4, 6);\n\tif (among_var === 0) {\n\t\treturn false;\n\t}\n\tthis.bra = this.cursor;\n\tswitch (among_var) {\n\tcase 0:\n\t\treturn false;\n\tcase 1:\n\t\tif (! this.r_R1$()) {\n\t\t\treturn false;\n\t\t}\n\t\tif (! this.slice_from$S(\"ee\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 2:\n\t\tv_1 = this.limit - this.cursor;\n\tgolab0:\n\t\twhile (true) {\n\t\t\tlab1 = true;\n\t\tlab1:\n\t\t\twhile (lab1 === true) {\n\t\t\t\tlab1 = false;\n\t\t\t\tif (! this.in_grouping_b$AIII(EnglishStemmer.g_v, 97, 121)) {\n\t\t\t\t\tbreak lab1;\n\t\t\t\t}\n\t\t\t\tbreak golab0;\n\t\t\t}\n\t\t\tif (this.cursor <= this.limit_backward) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tthis.cursor--;\n\t\t}\n\t\tthis.cursor = this.limit - v_1;\n\t\tif (! this.slice_del$()) {\n\t\t\treturn false;\n\t\t}\n\t\tv_3 = this.limit - this.cursor;\n\t\tamong_var = this.find_among_b$ALAmong$I(EnglishStemmer.a_3, 13);\n\t\tif (among_var === 0) {\n\t\t\treturn false;\n\t\t}\n\t\tthis.cursor = this.limit - v_3;\n\t\tswitch (among_var) {\n\t\tcase 0:\n\t\t\treturn false;\n\t\tcase 1:\n\t\t\tc = this.cursor;\n\t\t\tthis.insert$IIS(this.cursor, this.cursor, \"e\");\n\t\t\tthis.cursor = c;\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tthis.ket = this.cursor;\n\t\t\tif (this.cursor <= this.limit_backward) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tthis.cursor--;\n\t\t\tthis.bra = this.cursor;\n\t\t\tif (! this.slice_del$()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tif (this.cursor !== this.I_p1) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tv_4 = this.limit - this.cursor;\n\t\t\tif (! this.r_shortv$()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tthis.cursor = this.limit - v_4;\n\t\t\tc = this.cursor;\n\t\t\tthis.insert$IIS(this.cursor, this.cursor, \"e\");\n\t\t\tthis.cursor = c;\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\t}\n\treturn true;\n};\n\n/**\n * @return {!boolean}\n */\nEnglishStemmer.prototype.r_Step_1c$ = function () {\n\t/** @type {!number} */\n\tvar v_1;\n\t/** @type {!number} */\n\tvar v_2;\n\t/** @type {!boolean} */\n\tvar lab0;\n\t/** @type {!boolean} */\n\tvar lab1;\n\t/** @type {!boolean} */\n\tvar lab2;\n\tthis.ket = this.cursor;\n\tlab0 = true;\nlab0:\n\twhile (lab0 === true) {\n\t\tlab0 = false;\n\t\tv_1 = this.limit - this.cursor;\n\t\tlab1 = true;\n\tlab1:\n\t\twhile (lab1 === true) {\n\t\t\tlab1 = false;\n\t\t\tif (! this.eq_s_b$IS(1, \"y\")) {\n\t\t\t\tbreak lab1;\n\t\t\t}\n\t\t\tbreak lab0;\n\t\t}\n\t\tthis.cursor = this.limit - v_1;\n\t\tif (! this.eq_s_b$IS(1, \"Y\")) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tthis.bra = this.cursor;\n\tif (! this.out_grouping_b$AIII(EnglishStemmer.g_v, 97, 121)) {\n\t\treturn false;\n\t}\n\tv_2 = this.limit - this.cursor;\n\tlab2 = true;\nlab2:\n\twhile (lab2 === true) {\n\t\tlab2 = false;\n\t\tif (this.cursor > this.limit_backward) {\n\t\t\tbreak lab2;\n\t\t}\n\t\treturn false;\n\t}\n\tthis.cursor = this.limit - v_2;\n\tif (! this.slice_from$S(\"i\")) {\n\t\treturn false;\n\t}\n\treturn true;\n};\n\n/**\n * @return {!boolean}\n */\nEnglishStemmer.prototype.r_Step_2$ = function () {\n\t/** @type {!number} */\n\tvar among_var;\n\tthis.ket = this.cursor;\n\tamong_var = this.find_among_b$ALAmong$I(EnglishStemmer.a_5, 24);\n\tif (among_var === 0) {\n\t\treturn false;\n\t}\n\tthis.bra = this.cursor;\n\tif (! this.r_R1$()) {\n\t\treturn false;\n\t}\n\tswitch (among_var) {\n\tcase 0:\n\t\treturn false;\n\tcase 1:\n\t\tif (! this.slice_from$S(\"tion\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 2:\n\t\tif (! this.slice_from$S(\"ence\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 3:\n\t\tif (! this.slice_from$S(\"ance\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 4:\n\t\tif (! this.slice_from$S(\"able\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 5:\n\t\tif (! this.slice_from$S(\"ent\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 6:\n\t\tif (! this.slice_from$S(\"ize\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 7:\n\t\tif (! this.slice_from$S(\"ate\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 8:\n\t\tif (! this.slice_from$S(\"al\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 9:\n\t\tif (! this.slice_from$S(\"ful\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 10:\n\t\tif (! this.slice_from$S(\"ous\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 11:\n\t\tif (! this.slice_from$S(\"ive\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 12:\n\t\tif (! this.slice_from$S(\"ble\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 13:\n\t\tif (! this.eq_s_b$IS(1, \"l\")) {\n\t\t\treturn false;\n\t\t}\n\t\tif (! this.slice_from$S(\"og\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 14:\n\t\tif (! this.slice_from$S(\"ful\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 15:\n\t\tif (! this.slice_from$S(\"less\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 16:\n\t\tif (! this.in_grouping_b$AIII(EnglishStemmer.g_valid_LI, 99, 116)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (! this.slice_del$()) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\t}\n\treturn true;\n};\n\n/**\n * @return {!boolean}\n */\nEnglishStemmer.prototype.r_Step_3$ = function () {\n\t/** @type {!number} */\n\tvar among_var;\n\tthis.ket = this.cursor;\n\tamong_var = this.find_among_b$ALAmong$I(EnglishStemmer.a_6, 9);\n\tif (among_var === 0) {\n\t\treturn false;\n\t}\n\tthis.bra = this.cursor;\n\tif (! this.r_R1$()) {\n\t\treturn false;\n\t}\n\tswitch (among_var) {\n\tcase 0:\n\t\treturn false;\n\tcase 1:\n\t\tif (! this.slice_from$S(\"tion\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 2:\n\t\tif (! this.slice_from$S(\"ate\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 3:\n\t\tif (! this.slice_from$S(\"al\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 4:\n\t\tif (! this.slice_from$S(\"ic\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 5:\n\t\tif (! this.slice_del$()) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 6:\n\t\tif (! this.r_R2$()) {\n\t\t\treturn false;\n\t\t}\n\t\tif (! this.slice_del$()) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\t}\n\treturn true;\n};\n\n/**\n * @return {!boolean}\n */\nEnglishStemmer.prototype.r_Step_4$ = function () {\n\t/** @type {!number} */\n\tvar among_var;\n\t/** @type {!number} */\n\tvar v_1;\n\t/** @type {!boolean} */\n\tvar lab0;\n\t/** @type {!boolean} */\n\tvar lab1;\n\tthis.ket = this.cursor;\n\tamong_var = this.find_among_b$ALAmong$I(EnglishStemmer.a_7, 18);\n\tif (among_var === 0) {\n\t\treturn false;\n\t}\n\tthis.bra = this.cursor;\n\tif (! this.r_R2$()) {\n\t\treturn false;\n\t}\n\tswitch (among_var) {\n\tcase 0:\n\t\treturn false;\n\tcase 1:\n\t\tif (! this.slice_del$()) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 2:\n\t\tlab0 = true;\n\tlab0:\n\t\twhile (lab0 === true) {\n\t\t\tlab0 = false;\n\t\t\tv_1 = this.limit - this.cursor;\n\t\t\tlab1 = true;\n\t\tlab1:\n\t\t\twhile (lab1 === true) {\n\t\t\t\tlab1 = false;\n\t\t\t\tif (! this.eq_s_b$IS(1, \"s\")) {\n\t\t\t\t\tbreak lab1;\n\t\t\t\t}\n\t\t\t\tbreak lab0;\n\t\t\t}\n\t\t\tthis.cursor = this.limit - v_1;\n\t\t\tif (! this.eq_s_b$IS(1, \"t\")) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tif (! this.slice_del$()) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\t}\n\treturn true;\n};\n\n/**\n * @return {!boolean}\n */\nEnglishStemmer.prototype.r_Step_5$ = function () {\n\t/** @type {!number} */\n\tvar among_var;\n\t/** @type {!number} */\n\tvar v_1;\n\t/** @type {!number} */\n\tvar v_2;\n\t/** @type {!boolean} */\n\tvar lab0;\n\t/** @type {!boolean} */\n\tvar lab1;\n\t/** @type {!boolean} */\n\tvar lab2;\n\tthis.ket = this.cursor;\n\tamong_var = this.find_among_b$ALAmong$I(EnglishStemmer.a_8, 2);\n\tif (among_var === 0) {\n\t\treturn false;\n\t}\n\tthis.bra = this.cursor;\n\tswitch (among_var) {\n\tcase 0:\n\t\treturn false;\n\tcase 1:\n\t\tlab0 = true;\n\tlab0:\n\t\twhile (lab0 === true) {\n\t\t\tlab0 = false;\n\t\t\tv_1 = this.limit - this.cursor;\n\t\t\tlab1 = true;\n\t\tlab1:\n\t\t\twhile (lab1 === true) {\n\t\t\t\tlab1 = false;\n\t\t\t\tif (! this.r_R2$()) {\n\t\t\t\t\tbreak lab1;\n\t\t\t\t}\n\t\t\t\tbreak lab0;\n\t\t\t}\n\t\t\tthis.cursor = this.limit - v_1;\n\t\t\tif (! this.r_R1$()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tv_2 = this.limit - this.cursor;\n\t\t\tlab2 = true;\n\t\tlab2:\n\t\t\twhile (lab2 === true) {\n\t\t\t\tlab2 = false;\n\t\t\t\tif (! this.r_shortv$()) {\n\t\t\t\t\tbreak lab2;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tthis.cursor = this.limit - v_2;\n\t\t}\n\t\tif (! this.slice_del$()) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 2:\n\t\tif (! this.r_R2$()) {\n\t\t\treturn false;\n\t\t}\n\t\tif (! this.eq_s_b$IS(1, \"l\")) {\n\t\t\treturn false;\n\t\t}\n\t\tif (! this.slice_del$()) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\t}\n\treturn true;\n};\n\n/**\n * @return {!boolean}\n */\nEnglishStemmer.prototype.r_exception2$ = function () {\n\tthis.ket = this.cursor;\n\tif (this.find_among_b$ALAmong$I(EnglishStemmer.a_9, 8) === 0) {\n\t\treturn false;\n\t}\n\tthis.bra = this.cursor;\n\tif (this.cursor > this.limit_backward) {\n\t\treturn false;\n\t}\n\treturn true;\n};\n\n/**\n * @return {!boolean}\n */\nEnglishStemmer.prototype.r_exception1$ = function () {\n\t/** @type {!number} */\n\tvar among_var;\n\tthis.bra = this.cursor;\n\tamong_var = this.find_among$ALAmong$I(EnglishStemmer.a_10, 18);\n\tif (among_var === 0) {\n\t\treturn false;\n\t}\n\tthis.ket = this.cursor;\n\tif (this.cursor < this.limit) {\n\t\treturn false;\n\t}\n\tswitch (among_var) {\n\tcase 0:\n\t\treturn false;\n\tcase 1:\n\t\tif (! this.slice_from$S(\"ski\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 2:\n\t\tif (! this.slice_from$S(\"sky\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 3:\n\t\tif (! this.slice_from$S(\"die\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 4:\n\t\tif (! this.slice_from$S(\"lie\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 5:\n\t\tif (! this.slice_from$S(\"tie\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 6:\n\t\tif (! this.slice_from$S(\"idl\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 7:\n\t\tif (! this.slice_from$S(\"gentl\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 8:\n\t\tif (! this.slice_from$S(\"ugli\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 9:\n\t\tif (! this.slice_from$S(\"earli\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 10:\n\t\tif (! this.slice_from$S(\"onli\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 11:\n\t\tif (! this.slice_from$S(\"singl\")) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\t}\n\treturn true;\n};\n\n/**\n * @return {!boolean}\n */\nEnglishStemmer.prototype.r_postlude$ = function () {\n\t/** @type {!number} */\n\tvar v_1;\n\t/** @type {!number} */\n\tvar v_2;\n\t/** @type {!boolean} */\n\tvar lab1;\n\t/** @type {!boolean} */\n\tvar lab3;\n\tif (! this.B_Y_found) {\n\t\treturn false;\n\t}\nreplab0:\n\twhile (true) {\n\t\tv_1 = this.cursor;\n\t\tlab1 = true;\n\tlab1:\n\t\twhile (lab1 === true) {\n\t\t\tlab1 = false;\n\t\tgolab2:\n\t\t\twhile (true) {\n\t\t\t\tv_2 = this.cursor;\n\t\t\t\tlab3 = true;\n\t\t\tlab3:\n\t\t\t\twhile (lab3 === true) {\n\t\t\t\t\tlab3 = false;\n\t\t\t\t\tthis.bra = this.cursor;\n\t\t\t\t\tif (! this.eq_s$IS(1, \"Y\")) {\n\t\t\t\t\t\tbreak lab3;\n\t\t\t\t\t}\n\t\t\t\t\tthis.ket = this.cursor;\n\t\t\t\t\tthis.cursor = v_2;\n\t\t\t\t\tbreak golab2;\n\t\t\t\t}\n\t\t\t\tthis.cursor = v_2;\n\t\t\t\tif (this.cursor >= this.limit) {\n\t\t\t\t\tbreak lab1;\n\t\t\t\t}\n\t\t\t\tthis.cursor++;\n\t\t\t}\n\t\t\tif (! this.slice_from$S(\"y\")) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tcontinue replab0;\n\t\t}\n\t\tthis.cursor = v_1;\n\t\tbreak replab0;\n\t}\n\treturn true;\n};\n\n/**\n * @return {!boolean}\n */\nEnglishStemmer.prototype.stem$ = function () {\n\t/** @type {!number} */\n\tvar v_1;\n\t/** @type {!number} */\n\tvar v_2;\n\t/** @type {!number} */\n\tvar v_3;\n\t/** @type {!number} */\n\tvar v_4;\n\t/** @type {!number} */\n\tvar v_5;\n\t/** @type {!number} */\n\tvar v_6;\n\t/** @type {!number} */\n\tvar v_7;\n\t/** @type {!number} */\n\tvar v_8;\n\t/** @type {!number} */\n\tvar v_9;\n\t/** @type {!number} */\n\tvar v_10;\n\t/** @type {!number} */\n\tvar v_11;\n\t/** @type {!number} */\n\tvar v_12;\n\t/** @type {!number} */\n\tvar v_13;\n\t/** @type {!boolean} */\n\tvar lab0;\n\t/** @type {!boolean} */\n\tvar lab1;\n\t/** @type {!boolean} */\n\tvar lab2;\n\t/** @type {!boolean} */\n\tvar lab3;\n\t/** @type {!number} */\n\tvar c;\n\t/** @type {!boolean} */\n\tvar lab4;\n\t/** @type {!boolean} */\n\tvar lab5;\n\t/** @type {!boolean} */\n\tvar lab6;\n\t/** @type {!boolean} */\n\tvar lab7;\n\t/** @type {!boolean} */\n\tvar lab8;\n\t/** @type {!boolean} */\n\tvar lab9;\n\t/** @type {!boolean} */\n\tvar lab10;\n\t/** @type {!boolean} */\n\tvar lab11;\n\t/** @type {!boolean} */\n\tvar lab12;\n\t/** @type {!boolean} */\n\tvar lab13;\n\t/** @type {!boolean} */\n\tvar lab14;\n\t/** @type {!boolean} */\n\tvar lab15;\n\tlab0 = true;\nlab0:\n\twhile (lab0 === true) {\n\t\tlab0 = false;\n\t\tv_1 = this.cursor;\n\t\tlab1 = true;\n\tlab1:\n\t\twhile (lab1 === true) {\n\t\t\tlab1 = false;\n\t\t\tif (! this.r_exception1$()) {\n\t\t\t\tbreak lab1;\n\t\t\t}\n\t\t\tbreak lab0;\n\t\t}\n\t\tthis.cursor = v_1;\n\t\tlab2 = true;\n\tlab2:\n\t\twhile (lab2 === true) {\n\t\t\tlab2 = false;\n\t\t\tv_2 = this.cursor;\n\t\t\tlab3 = true;\n\t\tlab3:\n\t\t\twhile (lab3 === true) {\n\t\t\t\tlab3 = false;\n\t\t\t\tc = (this.cursor + 3 | 0);\n\t\t\t\tif (0 > c || c > this.limit) {\n\t\t\t\t\tbreak lab3;\n\t\t\t\t}\n\t\t\t\tthis.cursor = c;\n\t\t\t\tbreak lab2;\n\t\t\t}\n\t\t\tthis.cursor = v_2;\n\t\t\tbreak lab0;\n\t\t}\n\t\tthis.cursor = v_1;\n\t\tv_3 = this.cursor;\n\t\tlab4 = true;\n\tlab4:\n\t\twhile (lab4 === true) {\n\t\t\tlab4 = false;\n\t\t\tif (! this.r_prelude$()) {\n\t\t\t\tbreak lab4;\n\t\t\t}\n\t\t}\n\t\tthis.cursor = v_3;\n\t\tv_4 = this.cursor;\n\t\tlab5 = true;\n\tlab5:\n\t\twhile (lab5 === true) {\n\t\t\tlab5 = false;\n\t\t\tif (! this.r_mark_regions$()) {\n\t\t\t\tbreak lab5;\n\t\t\t}\n\t\t}\n\t\tthis.cursor = v_4;\n\t\tthis.limit_backward = this.cursor;\n\t\tthis.cursor = this.limit;\n\t\tv_5 = this.limit - this.cursor;\n\t\tlab6 = true;\n\tlab6:\n\t\twhile (lab6 === true) {\n\t\t\tlab6 = false;\n\t\t\tif (! this.r_Step_1a$()) {\n\t\t\t\tbreak lab6;\n\t\t\t}\n\t\t}\n\t\tthis.cursor = this.limit - v_5;\n\t\tlab7 = true;\n\tlab7:\n\t\twhile (lab7 === true) {\n\t\t\tlab7 = false;\n\t\t\tv_6 = this.limit - this.cursor;\n\t\t\tlab8 = true;\n\t\tlab8:\n\t\t\twhile (lab8 === true) {\n\t\t\t\tlab8 = false;\n\t\t\t\tif (! this.r_exception2$()) {\n\t\t\t\t\tbreak lab8;\n\t\t\t\t}\n\t\t\t\tbreak lab7;\n\t\t\t}\n\t\t\tthis.cursor = this.limit - v_6;\n\t\t\tv_7 = this.limit - this.cursor;\n\t\t\tlab9 = true;\n\t\tlab9:\n\t\t\twhile (lab9 === true) {\n\t\t\t\tlab9 = false;\n\t\t\t\tif (! this.r_Step_1b$()) {\n\t\t\t\t\tbreak lab9;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.cursor = this.limit - v_7;\n\t\t\tv_8 = this.limit - this.cursor;\n\t\t\tlab10 = true;\n\t\tlab10:\n\t\t\twhile (lab10 === true) {\n\t\t\t\tlab10 = false;\n\t\t\t\tif (! this.r_Step_1c$()) {\n\t\t\t\t\tbreak lab10;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.cursor = this.limit - v_8;\n\t\t\tv_9 = this.limit - this.cursor;\n\t\t\tlab11 = true;\n\t\tlab11:\n\t\t\twhile (lab11 === true) {\n\t\t\t\tlab11 = false;\n\t\t\t\tif (! this.r_Step_2$()) {\n\t\t\t\t\tbreak lab11;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.cursor = this.limit - v_9;\n\t\t\tv_10 = this.limit - this.cursor;\n\t\t\tlab12 = true;\n\t\tlab12:\n\t\t\twhile (lab12 === true) {\n\t\t\t\tlab12 = false;\n\t\t\t\tif (! this.r_Step_3$()) {\n\t\t\t\t\tbreak lab12;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.cursor = this.limit - v_10;\n\t\t\tv_11 = this.limit - this.cursor;\n\t\t\tlab13 = true;\n\t\tlab13:\n\t\t\twhile (lab13 === true) {\n\t\t\t\tlab13 = false;\n\t\t\t\tif (! this.r_Step_4$()) {\n\t\t\t\t\tbreak lab13;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.cursor = this.limit - v_11;\n\t\t\tv_12 = this.limit - this.cursor;\n\t\t\tlab14 = true;\n\t\tlab14:\n\t\t\twhile (lab14 === true) {\n\t\t\t\tlab14 = false;\n\t\t\t\tif (! this.r_Step_5$()) {\n\t\t\t\t\tbreak lab14;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.cursor = this.limit - v_12;\n\t\t}\n\t\tthis.cursor = this.limit_backward;\n\t\tv_13 = this.cursor;\n\t\tlab15 = true;\n\tlab15:\n\t\twhile (lab15 === true) {\n\t\t\tlab15 = false;\n\t\t\tif (! this.r_postlude$()) {\n\t\t\t\tbreak lab15;\n\t\t\t}\n\t\t}\n\t\tthis.cursor = v_13;\n\t}\n\treturn true;\n};\n\n/**\n * @param {*} o\n * @return {!boolean}\n */\nEnglishStemmer.prototype.equals$X = function (o) {\n\treturn o instanceof EnglishStemmer;\n};\n\n/**\n * @return {!number}\n */\nEnglishStemmer.prototype.hashCode$ = function () {\n\t/** @type {!string} */\n\tvar classname;\n\t/** @type {!number} */\n\tvar hash;\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {!number} */\n\tvar char;\n\tclassname = \"EnglishStemmer\";\n\thash = 0;\n\tif (classname.length === 0) {\n\t\treturn (hash | 0);\n\t}\n\tfor (i = 0; i < classname.length; i++) {\n\t\tchar = classname.charCodeAt(i);\n\t\thash = (hash << 5) - hash + char;\n\t\thash = hash & hash;\n\t}\n\treturn (hash | 0);\n};\n\n/**\n * class Among extends Object\n * @constructor\n */\nfunction Among() {\n}\n\n/**\n * @constructor\n * @param {!string} s\n * @param {!number} substring_i\n * @param {!number} result\n */\nfunction Among$SII(s, substring_i, result) {\n\tthis.s_size = s.length;\n\tthis.s = s;\n\tthis.substring_i = substring_i;\n\tthis.result = result;\n\tthis.method = null;\n\tthis.instance = null;\n};\n\nAmong$SII.prototype = new Among;\n\n/**\n * @constructor\n * @param {!string} s\n * @param {!number} substring_i\n * @param {!number} result\n * @param {*} method\n * @param {BaseStemmer} instance\n */\nfunction Among$SIIF$LBaseStemmer$B$LBaseStemmer$(s, substring_i, result, method, instance) {\n\tthis.s_size = s.length;\n\tthis.s = s;\n\tthis.substring_i = substring_i;\n\tthis.result = result;\n\tthis.method = method;\n\tthis.instance = instance;\n};\n\nAmong$SIIF$LBaseStemmer$B$LBaseStemmer$.prototype = new Among;\n\n/**\n * class Metadata extends Object\n * @constructor\n */\nfunction Metadata() {\n}\n\n/**\n * @constructor\n * @param {Oktavia} parent\n */\nfunction Metadata$LOktavia$(parent) {\n\tthis._parent = parent;\n\tthis._bitVector = new BitVector$();\n};\n\nMetadata$LOktavia$.prototype = new Metadata;\n\n/**\n * @return {!number}\n */\nMetadata.prototype._size$ = function () {\n\treturn this._bitVector.rank$I(this._bitVector.size$());\n};\n\n/**\n * @param {!number} index\n * @return {!string}\n */\nMetadata.prototype.getContent$I = function (index) {\n\t/** @type {!number} */\n\tvar startPosition;\n\t/** @type {!number} */\n\tvar length;\n\tif (index < 0 || this._size$() <= index) {\n\t\tthrow new Error(\"Section.getContent() : range error \" + (index + \"\"));\n\t}\n\tstartPosition = 0;\n\tif (index > 0) {\n\t\tstartPosition = this._bitVector.select$I(index - 1) + 1;\n\t}\n\tconsole.log(startPosition);\n\tlength = this._bitVector.select$I(index) - startPosition + 1;\n\tconsole.log(length);\n\treturn this._parent._getSubstring$II(startPosition, length);\n};\n\n/**\n * @param {!number} index\n * @return {!number}\n */\nMetadata.prototype.getStartPosition$I = function (index) {\n\t/** @type {!number} */\n\tvar startPosition;\n\tif (index < 0 || this._size$() <= index) {\n\t\tthrow new Error(\"Section.getContent() : range error \" + (index + \"\"));\n\t}\n\tstartPosition = 0;\n\tif (index > 0) {\n\t\tstartPosition = this._bitVector.select$I(index - 1) + 1;\n\t}\n\treturn (startPosition | 0);\n};\n\n/**\n * @param {SingleResult} result\n * @param {Array.<undefined|!number>} positions\n * @param {!string} word\n * @param {!boolean} stemmed\n */\nMetadata.prototype.grouping$LSingleResult$AISB = function (result, positions, word, stemmed) {\n};\n\n/**\n * @param {!number} index\n * @return {!string}\n */\nMetadata.prototype.getInformation$I = function (index) {\n\treturn '';\n};\n\n/**\n */\nMetadata.prototype._build$ = function () {\n\tthis._bitVector.build$();\n};\n\n/**\n * @param {!string} name\n * @param {!string} data\n * @param {!number} offset\n * @return {!number}\n */\nMetadata.prototype._load$SSI = function (name, data, offset) {\n\toffset = this._bitVector.load$SI(data, offset);\n\tthis._parent._metadataLabels.push(name);\n\tthis._parent._metadatas[name] = this;\n\treturn offset;\n};\n\n/**\n * @return {!string}\n */\nMetadata.prototype._dump$ = function () {\n\treturn this._bitVector.dump$();\n};\n\n/**\n * @param {CompressionReport} report\n * @return {!string}\n */\nMetadata.prototype._dump$LCompressionReport$ = function (report) {\n\treturn this._bitVector.dump$LCompressionReport$(report);\n};\n\n/**\n * class Section extends Metadata\n * @constructor\n */\nfunction Section() {\n}\n\nSection.prototype = new Metadata;\n/**\n * @constructor\n * @param {Oktavia} parent\n */\nfunction Section$LOktavia$(parent) {\n\tMetadata$LOktavia$.call(this, parent);\n\tthis._names = [  ];\n};\n\nSection$LOktavia$.prototype = new Section;\n\n/**\n * @param {!string} name\n */\nSection.prototype.setTail$S = function (name) {\n\tthis.setTail$SI(name, this._parent.contentSize$());\n};\n\n/**\n * @param {!string} name\n * @param {!number} index\n */\nSection.prototype.setTail$SI = function (name, index) {\n\tthis._names.push(name);\n\tthis._bitVector.set$I(index - 1);\n};\n\n/**\n * @return {!number}\n */\nSection.prototype.size$ = function () {\n\treturn (this._names.length | 0);\n};\n\n/**\n * @param {!number} position\n * @return {!number}\n */\nSection.prototype.getSectionIndex$I = function (position) {\n\tif (position < 0 || this._bitVector.size$() <= position) {\n\t\tthrow new Error(\"Section.getSectionIndex() : range error \" + (position + \"\"));\n\t}\n\treturn this._bitVector.rank$I(position);\n};\n\n/**\n * @param {!number} index\n * @return {!string}\n */\nSection.prototype.getName$I = function (index) {\n\tif (index < 0 || this.size$() <= index) {\n\t\tthrow new Error(\"Section.getName() : range error\");\n\t}\n\treturn (function (v) {\n\t\tif (! (v != null)) {\n\t\t\tdebugger;\n\t\t\tthrow new Error(\"[src/metadata.jsx:129:26] null access\\n        return this._names[index];\\n                          ^\\n\");\n\t\t}\n\t\treturn v;\n\t}(this._names[index]));\n};\n\n/**\n * @param {SingleResult} result\n * @param {Array.<undefined|!number>} positions\n * @param {!string} word\n * @param {!boolean} stemmed\n */\nSection.prototype.grouping$LSingleResult$AISB = function (result, positions, word, stemmed) {\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {undefined|!number} */\n\tvar position;\n\t/** @type {!number} */\n\tvar index;\n\t/** @type {SearchUnit} */\n\tvar unit;\n\tfor (i = 0; i < positions.length; i++) {\n\t\tposition = positions[i];\n\t\tindex = this.getSectionIndex$I((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/metadata.jsx:137:45] null access\\n            var index = this.getSectionIndex(position);\\n                                             ^^^^^^^^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(position)));\n\t\tunit = result.getSearchUnit$I(index);\n\t\tif (unit.startPosition < 0) {\n\t\t\tunit.startPosition = this.getStartPosition$I(index);\n\t\t}\n\t\tunit.addPosition$SIB(word, (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/metadata.jsx:143:35] null access\\n            unit.addPosition(word, position - unit.startPosition, stemmed);\\n                                   ^^^^^^^^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(position)) - unit.startPosition, stemmed);\n\t}\n};\n\n/**\n * @param {!number} index\n * @return {!string}\n */\nSection.prototype.getInformation$I = function (index) {\n\treturn this.getName$I(index);\n};\n\n/**\n * @param {Oktavia} parent\n * @param {!string} name\n * @param {!string} data\n * @param {!number} offset\n * @return {!number}\n */\nSection._load$LOktavia$SSI = function (parent, name, data, offset) {\n\t/** @type {LoadedStringListResult} */\n\tvar strs;\n\t/** @type {Section} */\n\tvar section;\n\tstrs = Binary$loadStringList$SI(data, offset);\n\tsection = new Section$LOktavia$(parent);\n\tsection._names = strs.result;\n\treturn section._load$SSI(name, data, strs.offset);\n};\n\nvar Section$_load$LOktavia$SSI = Section._load$LOktavia$SSI;\n\n/**\n * @return {!string}\n */\nSection.prototype._dump$ = function () {\n\treturn [ Binary$dump16bitNumber$I(0), Binary$dumpStringList$AS(this._names), Metadata.prototype._dump$.call(this) ].join('');\n};\n\n/**\n * @param {CompressionReport} report\n * @return {!string}\n */\nSection.prototype._dump$LCompressionReport$ = function (report) {\n\treport.add$II(1, 1);\n\treturn [ Binary$dump16bitNumber$I(0), Binary$dumpStringList$ASLCompressionReport$(this._names, report), Metadata.prototype._dump$LCompressionReport$.call(this, report) ].join('');\n};\n\n/**\n * class Splitter extends Metadata\n * @constructor\n */\nfunction Splitter() {\n}\n\nSplitter.prototype = new Metadata;\n/**\n * @constructor\n * @param {Oktavia} parent\n */\nfunction Splitter$LOktavia$(parent) {\n\tMetadata$LOktavia$.call(this, parent);\n\tthis.name = null;\n};\n\nSplitter$LOktavia$.prototype = new Splitter;\n\n/**\n * @constructor\n * @param {Oktavia} parent\n * @param {!string} name\n */\nfunction Splitter$LOktavia$S(parent, name) {\n\tMetadata$LOktavia$.call(this, parent);\n\tthis.name = name;\n};\n\nSplitter$LOktavia$S.prototype = new Splitter;\n\n/**\n * @return {!number}\n */\nSplitter.prototype.size$ = function () {\n\treturn this._size$();\n};\n\n/**\n */\nSplitter.prototype.split$ = function () {\n\tthis.split$I(this._parent.contentSize$());\n};\n\n/**\n * @param {!number} index\n */\nSplitter.prototype.split$I = function (index) {\n\tthis._bitVector.set$I(index - 1);\n};\n\n/**\n * @param {!number} position\n * @return {!number}\n */\nSplitter.prototype.getIndex$I = function (position) {\n\tif (position < 0 || this._bitVector.size$() <= position) {\n\t\tthrow new Error(\"Section.getSectionIndex() : range error\");\n\t}\n\treturn this._bitVector.rank$I(position);\n};\n\n/**\n * @param {SingleResult} result\n * @param {Array.<undefined|!number>} positions\n * @param {!string} word\n * @param {!boolean} stemmed\n */\nSplitter.prototype.grouping$LSingleResult$AISB = function (result, positions, word, stemmed) {\n};\n\n/**\n * @param {!number} index\n * @return {!string}\n */\nSplitter.prototype.getInformation$I = function (index) {\n\tif (this.name != null) {\n\t\treturn (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/metadata.jsx:221:23] null access\\n            return this.name + ((index + 1) as string);\\n                       ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(this.name)) + (index + 1 + \"\");\n\t}\n\treturn '';\n};\n\n/**\n * @param {Oktavia} parent\n * @param {!string} name\n * @param {!string} data\n * @param {!number} offset\n * @return {!number}\n */\nSplitter._load$LOktavia$SSI = function (parent, name, data, offset) {\n\t/** @type {Splitter} */\n\tvar section;\n\tsection = new Splitter$LOktavia$(parent);\n\treturn section._load$SSI(name, data, offset);\n};\n\nvar Splitter$_load$LOktavia$SSI = Splitter._load$LOktavia$SSI;\n\n/**\n * @return {!string}\n */\nSplitter.prototype._dump$ = function () {\n\treturn [ Binary$dump16bitNumber$I(1), Metadata.prototype._dump$.call(this) ].join('');\n};\n\n/**\n * @param {CompressionReport} report\n * @return {!string}\n */\nSplitter.prototype._dump$LCompressionReport$ = function (report) {\n\treport.add$II(1, 1);\n\treturn [ Binary$dump16bitNumber$I(1), Metadata.prototype._dump$LCompressionReport$.call(this, report) ].join('');\n};\n\n/**\n * class Table extends Metadata\n * @constructor\n */\nfunction Table() {\n}\n\nTable.prototype = new Metadata;\n/**\n * @constructor\n * @param {Oktavia} parent\n * @param {Array.<undefined|!string>} headers\n */\nfunction Table$LOktavia$AS(parent, headers) {\n\tMetadata$LOktavia$.call(this, parent);\n\tthis._headers = headers;\n\tthis._columnTails = new BitVector$();\n};\n\nTable$LOktavia$AS.prototype = new Table;\n\n/**\n * @return {!number}\n */\nTable.prototype.rowSize$ = function () {\n\treturn this._size$();\n};\n\n/**\n * @return {!number}\n */\nTable.prototype.columnSize$ = function () {\n\treturn (this._headers.length | 0);\n};\n\n/**\n */\nTable.prototype.setColumnTail$ = function () {\n\t/** @type {!number} */\n\tvar index;\n\tindex = this._parent.contentSize$();\n\tthis._parent.addEndOfBlock$();\n\tthis._columnTails.set$I(index - 1);\n};\n\n/**\n */\nTable.prototype.setRowTail$ = function () {\n\t/** @type {!number} */\n\tvar index;\n\tindex = this._parent.contentSize$();\n\tthis._bitVector.set$I(index - 1);\n};\n\n/**\n * @param {!number} position\n * @return {Array.<undefined|!number>}\n */\nTable.prototype.getCell$I = function (position) {\n\t/** @type {!number} */\n\tvar row;\n\t/** @type {!number} */\n\tvar currentColumn;\n\t/** @type {!number} */\n\tvar lastRowColumn;\n\t/** @type {!number} */\n\tvar startPosition;\n\t/** @type {Array.<undefined|!number>} */\n\tvar result;\n\tif (position < 0 || this._bitVector.size$() <= position) {\n\t\tthrow new Error(\"Section.getSectionIndex() : range error \" + (position + \"\"));\n\t}\n\trow = this._bitVector.rank$I(position);\n\tcurrentColumn = this._columnTails.rank$I(position);\n\tlastRowColumn = 0;\n\tif (row > 0) {\n\t\tstartPosition = this._bitVector.select$I(row - 1) + 1;\n\t\tlastRowColumn = this._columnTails.rank$I(startPosition);\n\t}\n\tresult = [ row, currentColumn - lastRowColumn ];\n\treturn result;\n};\n\n/**\n * @param {!number} rowIndex\n * @return {Object.<string, undefined|!string>}\n */\nTable.prototype.getRowContent$I = function (rowIndex) {\n\t/** @type {!string} */\n\tvar content;\n\t/** @type {Array.<undefined|!string>} */\n\tvar values;\n\t/** @type {Object.<string, undefined|!string>} */\n\tvar result;\n\t/** @type {!number} */\n\tvar i;\n\tcontent = this.getContent$I(rowIndex);\n\tvalues = content.split(Oktavia.eob, this._headers.length);\n\tresult = ({  });\n\tfor (i in this._headers) {\n\t\tif (i < values.length) {\n\t\t\tresult[this._headers[i]] = values[i];\n\t\t} else {\n\t\t\tresult[this._headers[i]] = '';\n\t\t}\n\t}\n\treturn result;\n};\n\n/**\n * @param {SingleResult} result\n * @param {Array.<undefined|!number>} positions\n * @param {!string} word\n * @param {!boolean} stemmed\n */\nTable.prototype.grouping$LSingleResult$AISB = function (result, positions, word, stemmed) {\n};\n\n/**\n * @param {!number} index\n * @return {!string}\n */\nTable.prototype.getInformation$I = function (index) {\n\treturn '';\n};\n\n/**\n */\nTable.prototype._build$ = function () {\n\tthis._bitVector.build$();\n\tthis._columnTails.build$();\n};\n\n/**\n * @param {Oktavia} parent\n * @param {!string} name\n * @param {!string} data\n * @param {!number} offset\n * @return {!number}\n */\nTable._load$LOktavia$SSI = function (parent, name, data, offset) {\n\t/** @type {LoadedStringListResult} */\n\tvar strs;\n\t/** @type {Table} */\n\tvar table;\n\tstrs = Binary$loadStringList$SI(data, offset);\n\ttable = new Table$LOktavia$AS(parent, strs.result);\n\toffset = table._load$SSI(name, data, strs.offset);\n\treturn table._columnTails.load$SI(data, offset);\n};\n\nvar Table$_load$LOktavia$SSI = Table._load$LOktavia$SSI;\n\n/**\n * @return {!string}\n */\nTable.prototype._dump$ = function () {\n\treturn [ Binary$dump16bitNumber$I(2), Binary$dumpStringList$AS(this._headers), Metadata.prototype._dump$.call(this), this._columnTails.dump$() ].join('');\n};\n\n/**\n * @param {CompressionReport} report\n * @return {!string}\n */\nTable.prototype._dump$LCompressionReport$ = function (report) {\n\treport.add$II(1, 1);\n\treturn [ Binary$dump16bitNumber$I(2), Binary$dumpStringList$ASLCompressionReport$(this._headers, report), Metadata.prototype._dump$LCompressionReport$.call(this, report), this._columnTails.dump$LCompressionReport$(report) ].join('');\n};\n\n/**\n * class Block extends Metadata\n * @constructor\n */\nfunction Block() {\n}\n\nBlock.prototype = new Metadata;\n/**\n * @constructor\n * @param {Oktavia} parent\n */\nfunction Block$LOktavia$(parent) {\n\tMetadata$LOktavia$.call(this, parent);\n\tthis._names = [  ];\n\tthis._start = false;\n};\n\nBlock$LOktavia$.prototype = new Block;\n\n/**\n * @param {!string} blockName\n */\nBlock.prototype.startBlock$S = function (blockName) {\n\tthis.startBlock$SI(blockName, this._parent.contentSize$());\n};\n\n/**\n * @param {!string} blockName\n * @param {!number} index\n */\nBlock.prototype.startBlock$SI = function (blockName, index) {\n\tif (this._start) {\n\t\tthrow new Error('Splitter `' + (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/metadata.jsx:380:54] null access\\n            throw new Error(\\'Splitter `\\' + this._names[this._names.length - 1] + \\'` is not closed\\');\\n                                                      ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(this._names[this._names.length - 1])) + '` is not closed');\n\t}\n\tthis._start = true;\n\tthis._names.push(blockName);\n\tthis._bitVector.set$I(index - 1);\n};\n\n/**\n */\nBlock.prototype.endBlock$ = function () {\n\tthis.endBlock$I(this._parent.contentSize$());\n};\n\n/**\n * @param {!number} index\n */\nBlock.prototype.endBlock$I = function (index) {\n\tif (! this._start) {\n\t\tthrow new Error('Splitter is not started');\n\t}\n\tthis._start = false;\n\tthis._bitVector.set$I(index - 1);\n};\n\n/**\n * @return {!number}\n */\nBlock.prototype.size$ = function () {\n\treturn (this._names.length | 0);\n};\n\n/**\n * @param {!number} position\n * @return {!number}\n */\nBlock.prototype.blockIndex$I = function (position) {\n\t/** @type {!number} */\n\tvar result;\n\tif (position < 0 || this._parent._fmindex.size$() - 1 <= position) {\n\t\tthrow new Error(\"Block.blockIndex() : range error \" + (position + \"\"));\n\t}\n\tif (position >= this._bitVector.size$()) {\n\t\tposition = (this._bitVector.size$() - 1 | 0);\n\t\tresult = (this._bitVector.rank$I(position) + 1 | 0);\n\t} else {\n\t\tresult = this._bitVector.rank$I(position);\n\t}\n\treturn result;\n};\n\n/**\n * @param {!number} position\n * @return {!boolean}\n */\nBlock.prototype.inBlock$I = function (position) {\n\t/** @type {!number} */\n\tvar blockIndex;\n\tblockIndex = this.blockIndex$I(position);\n\treturn blockIndex % 2 !== 0;\n};\n\n/**\n * @param {!number} position\n * @return {!string}\n */\nBlock.prototype.getBlockContent$I = function (position) {\n\t/** @type {!number} */\n\tvar blockIndex;\n\t/** @type {!string} */\n\tvar result;\n\tblockIndex = this.blockIndex$I(position);\n\tif (blockIndex % 2 !== 0) {\n\t\tresult = this.getContent$I(blockIndex);\n\t} else {\n\t\tresult = '';\n\t}\n\treturn result;\n};\n\n/**\n * @param {!number} position\n * @return {!string}\n */\nBlock.prototype.getBlockName$I = function (position) {\n\t/** @type {!number} */\n\tvar blockIndex;\n\t/** @type {!string} */\n\tvar result;\n\tblockIndex = this.blockIndex$I(position);\n\tif (blockIndex % 2 !== 0) {\n\t\tresult = (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/metadata.jsx:453:32] null access\\n            result = this._names[blockIndex >>> 1];\\n                                ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(this._names[blockIndex >>> 1]));\n\t} else {\n\t\tresult = '';\n\t}\n\treturn result;\n};\n\n/**\n * @param {SingleResult} result\n * @param {Array.<undefined|!number>} positions\n * @param {!string} word\n * @param {!boolean} stemmed\n */\nBlock.prototype.grouping$LSingleResult$AISB = function (result, positions, word, stemmed) {\n};\n\n/**\n * @param {!number} index\n * @return {!string}\n */\nBlock.prototype.getInformation$I = function (index) {\n\treturn '';\n};\n\n/**\n * @param {Oktavia} parent\n * @param {!string} name\n * @param {!string} data\n * @param {!number} offset\n * @return {!number}\n */\nBlock._load$LOktavia$SSI = function (parent, name, data, offset) {\n\t/** @type {LoadedStringListResult} */\n\tvar strs;\n\t/** @type {Block} */\n\tvar block;\n\tstrs = Binary$loadStringList$SI(data, offset);\n\tblock = new Block$LOktavia$(parent);\n\tblock._names = strs.result;\n\treturn block._load$SSI(name, data, strs.offset);\n};\n\nvar Block$_load$LOktavia$SSI = Block._load$LOktavia$SSI;\n\n/**\n * @return {!string}\n */\nBlock.prototype._dump$ = function () {\n\treturn [ Binary$dump16bitNumber$I(3), Binary$dumpStringList$AS(this._names), Metadata.prototype._dump$.call(this) ].join('');\n};\n\n/**\n * @param {CompressionReport} report\n * @return {!string}\n */\nBlock.prototype._dump$LCompressionReport$ = function (report) {\n\treport.add$II(1, 1);\n\treturn [ Binary$dump16bitNumber$I(3), Binary$dumpStringList$ASLCompressionReport$(this._names, report), Metadata.prototype._dump$LCompressionReport$.call(this, report) ].join('');\n};\n\n/**\n * class FMIndex extends Object\n * @constructor\n */\nfunction FMIndex() {\n}\n\n/**\n * @constructor\n */\nfunction FMIndex$() {\n\tthis._ssize = 0;\n\t(this._ddic = 0, this._head = 0);\n\tthis._substr = \"\";\n\tthis._sv = new WaveletMatrix$();\n\tthis._posdic = [  ];\n\tthis._idic = [  ];\n\tthis._rlt = [  ];\n\tthis._rlt.length = 65536;\n};\n\nFMIndex$.prototype = new FMIndex;\n\n/**\n */\nFMIndex.prototype.clear$ = function () {\n\tthis._sv.clear$();\n\tthis._posdic.length = 0;\n\tthis._idic.length = 0;\n\tthis._ddic = 0;\n\tthis._head = 0;\n\tthis._substr = \"\";\n};\n\n/**\n * @return {!number}\n */\nFMIndex.prototype.size$ = function () {\n\treturn this._sv.size$();\n};\n\n/**\n * @return {!number}\n */\nFMIndex.prototype.contentSize$ = function () {\n\treturn this._substr.length;\n};\n\n/**\n * @param {!string} key\n * @return {!number}\n */\nFMIndex.prototype.getRows$S = function (key) {\n\t/** @type {Array.<undefined|!number>} */\n\tvar pos;\n\tpos = [  ];\n\treturn this.getRows$SAI(key, pos);\n};\n\n/**\n * @param {!string} key\n * @param {Array.<undefined|!number>} pos\n * @return {!number}\n */\nFMIndex.prototype.getRows$SAI = function (key, pos) {\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {!number} */\n\tvar code;\n\t/** @type {!number} */\n\tvar first;\n\t/** @type {undefined|!number} */\n\tvar last;\n\t/** @type {!number} */\n\tvar c;\n\ti = key.length - 1;\n\tcode = key.charCodeAt(i);\n\tfirst = (function (v) {\n\t\tif (! (v != null)) {\n\t\t\tdebugger;\n\t\t\tthrow new Error(\"[src/fm-index.jsx:67:29] null access\\n        var first = this._rlt[code] + 1;\\n                             ^\\n\");\n\t\t}\n\t\treturn v;\n\t}(this._rlt[code])) + 1;\n\tlast = this._rlt[code + 1];\n\twhile (first <= (function (v) {\n\t\tif (! (v != null)) {\n\t\t\tdebugger;\n\t\t\tthrow new Error(\"[src/fm-index.jsx:69:24] null access\\n        while (first <= last)\\n                        ^^^^\\n\");\n\t\t}\n\t\treturn v;\n\t}(last))) {\n\t\tif (i === 0) {\n\t\t\tpos[0] = (-- first | 0);\n\t\t\tpos[1] = -- last;\n\t\t\treturn ((function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/fm-index.jsx:75:24] null access\\n                return (last - first  + 1);\\n                        ^^^^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(last)) - first + 1 | 0);\n\t\t}\n\t\ti--;\n\t\tc = key.charCodeAt(i);\n\t\tfirst = (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/fm-index.jsx:79:29] null access\\n            first = this._rlt[c] + this._sv.rank(first - 1, c) + 1;\\n                             ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(this._rlt[c])) + this._sv.rank$II(first - 1, c) + 1;\n\t\tlast = (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/fm-index.jsx:80:29] null access\\n            last  = this._rlt[c] + this._sv.rank(last,      c);\\n                             ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(this._rlt[c])) + this._sv.rank$II((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/fm-index.jsx:80:49] null access\\n            last  = this._rlt[c] + this._sv.rank(last,      c);\\n                                                 ^^^^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(last)), c);\n\t}\n\treturn 0;\n};\n\n/**\n * @param {!number} i\n * @return {!number}\n */\nFMIndex.prototype.getPosition$I = function (i) {\n\t/** @type {!number} */\n\tvar pos;\n\t/** @type {!number} */\n\tvar c;\n\tif (i >= this.size$()) {\n\t\tthrow new Error(\"FMIndex.getPosition() : range error\");\n\t}\n\tpos = 0;\n\twhile (i !== this._head) {\n\t\tif (i % this._ddic === 0) {\n\t\t\tpos += (function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/fm-index.jsx:96:36] null access\\n                pos += (this._posdic[i / this._ddic] + 1);\\n                                    ^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(this._posdic[i / this._ddic])) + 1;\n\t\t\tbreak;\n\t\t}\n\t\tc = this._sv.get$I(i);\n\t\ti = (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/fm-index.jsx:100:25] null access\\n            i = this._rlt[c] + this._sv.rank(i, c); //LF\\n                         ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(this._rlt[c])) + this._sv.rank$II(i, c);\n\t\tpos++;\n\t}\n\treturn (pos % this.size$() | 0);\n};\n\n/**\n * @param {!number} pos\n * @param {!number} len\n * @return {!string}\n */\nFMIndex.prototype.getSubstring$II = function (pos, len) {\n\t/** @type {!number} */\n\tvar pos_end;\n\t/** @type {!number} */\n\tvar pos_tmp;\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {!number} */\n\tvar pos_idic;\n\t/** @type {!string} */\n\tvar substr;\n\t/** @type {!number} */\n\tvar c;\n\tif (pos >= this.size$()) {\n\t\tthrow new Error(\"FMIndex.getSubstring() : range error\");\n\t}\n\tpos_end = Math.min(pos + len, this.size$());\n\tpos_tmp = this.size$() - 1;\n\ti = this._head;\n\tpos_idic = Math.floor((pos_end + this._ddic - 2) / this._ddic);\n\tif (pos_idic < this._idic.length) {\n\t\tpos_tmp = pos_idic * this._ddic;\n\t\ti = (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/fm-index.jsx:119:32] null access\\n            i       = this._idic[pos_idic];\\n                                ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(this._idic[pos_idic]));\n\t}\n\tsubstr = \"\";\n\twhile (pos_tmp >= pos) {\n\t\tc = this._sv.get$I(i);\n\t\ti = (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/fm-index.jsx:126:25] null access\\n            i = this._rlt[c] + this._sv.rank(i, c); //LF\\n                         ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(this._rlt[c])) + this._sv.rank$II(i, c);\n\t\tif (pos_tmp < pos_end) {\n\t\t\tsubstr = String.fromCharCode(c) + substr;\n\t\t}\n\t\tif (pos_tmp === 0) {\n\t\t\tbreak;\n\t\t}\n\t\tpos_tmp--;\n\t}\n\treturn substr;\n};\n\n/**\n */\nFMIndex.prototype.build$ = function () {\n\tthis.build$SIIB(String.fromCharCode(0), 65535, 20, false);\n};\n\n/**\n * @param {!string} end_marker\n * @param {!number} ddic\n * @param {!boolean} verbose\n */\nFMIndex.prototype.build$SIB = function (end_marker, ddic, verbose) {\n\tthis.build$SIIB(end_marker, 65535, ddic, verbose);\n};\n\n/**\n * @param {!string} end_marker\n * @param {!number} maxChar\n * @param {!number} ddic\n * @param {!boolean} verbose\n */\nFMIndex.prototype.build$SIIB = function (end_marker, maxChar, ddic, verbose) {\n\t/** @type {BurrowsWheelerTransform} */\n\tvar b;\n\t/** @type {!string} */\n\tvar s;\n\t/** @type {!number} */\n\tvar c;\n\tif (verbose) {\n\t\tconsole.time(\"building burrows-wheeler transform\");\n\t}\n\tthis._substr += end_marker;\n\tb = new BurrowsWheelerTransform$();\n\tb.build$S(this._substr);\n\ts = b.get$();\n\tthis._ssize = s.length;\n\tthis._head = b.head$();\n\tb.clear$();\n\tthis._substr = \"\";\n\tif (verbose) {\n\t\tconsole.timeEnd(\"building burrows-wheeler transform\");\n\t}\n\tif (verbose) {\n\t\tconsole.time(\"building wavelet matrix\");\n\t}\n\tthis._sv.setMaxCharCode$I(maxChar);\n\tif (verbose) {\n\t\tconsole.log(\"  maxCharCode: \", maxChar);\n\t\tconsole.log(\"  bitSize: \", this._sv.bitsize$());\n\t}\n\tthis._sv.build$S(s);\n\tif (verbose) {\n\t\tconsole.timeEnd(\"building wavelet matrix\");\n\t}\n\tif (verbose) {\n\t\tconsole.time(\"caching rank less than\");\n\t}\n\tfor (c = 0; c < maxChar; c++) {\n\t\tthis._rlt[c] = this._sv.rank_less_than$II(this._sv.size$(), c);\n\t}\n\tif (verbose) {\n\t\tconsole.timeEnd(\"caching rank less than\");\n\t}\n\tthis._ddic = ddic;\n\tif (verbose) {\n\t\tconsole.time(\"building dictionaries\");\n\t}\n\tthis._buildDictionaries$();\n\tif (verbose) {\n\t\tconsole.timeEnd(\"building dictionaries\");\n\t\tconsole.log('');\n\t}\n};\n\n/**\n */\nFMIndex.prototype._buildDictionaries$ = function () {\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {!number} */\n\tvar pos;\n\t/** @type {!number} */\n\tvar c;\n\tfor (i = 0; i < this._ssize / this._ddic + 1; i++) {\n\t\tthis._posdic.push(0);\n\t\tthis._idic.push(0);\n\t}\n\ti = this._head;\n\tpos = this.size$() - 1;\n\tdo {\n\t\tif (i % this._ddic === 0) {\n\t\t\tthis._posdic[Math.floor(i / this._ddic)] = (pos | 0);\n\t\t}\n\t\tif (pos % this._ddic === 0) {\n\t\t\tthis._idic[Math.floor(pos / this._ddic)] = (i | 0);\n\t\t}\n\t\tc = this._sv.get$I(i);\n\t\ti = (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/fm-index.jsx:228:25] null access\\n            i = this._rlt[c] + this._sv.rank(i, c); //LF\\n                         ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(this._rlt[c])) + this._sv.rank$II(i, c);\n\t\tpos--;\n\t} while (i !== this._head);\n};\n\n/**\n * @param {!string} doc\n */\nFMIndex.prototype.push$S = function (doc) {\n\tif (doc.length <= 0) {\n\t\tthrow new Error(\"FMIndex::push(): empty string\");\n\t}\n\tthis._substr += doc;\n};\n\n/**\n * @param {!string} keyword\n * @return {Array.<undefined|!number>}\n */\nFMIndex.prototype.search$S = function (keyword) {\n\t/** @type {Object.<string, undefined|!number>} */\n\tvar result_map;\n\t/** @type {Array.<undefined|!number>} */\n\tvar result;\n\t/** @type {Array.<undefined|!number>} */\n\tvar position;\n\t/** @type {!number} */\n\tvar rows;\n\t/** @type {undefined|!number} */\n\tvar first;\n\t/** @type {undefined|!number} */\n\tvar last;\n\t/** @type {undefined|!number} */\n\tvar i;\n\tresult_map = ({  });\n\tresult = [  ];\n\tposition = [  ];\n\trows = this.getRows$SAI(keyword, position);\n\tif (rows > 0) {\n\t\tfirst = position[0];\n\t\tlast = position[1];\n\t\tfor (i = first; (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/fm-index.jsx:252:32] null access\\n            for (var i = first; i <= last; i++)\\n                                ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(i)) <= (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/fm-index.jsx:252:37] null access\\n            for (var i = first; i <= last; i++)\\n                                     ^^^^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(last)); i++) {\n\t\t\tresult.push(this.getPosition$I((function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/fm-index.jsx:254:45] null access\\n                result.push(this.getPosition(i));\\n                                             ^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(i))));\n\t\t}\n\t}\n\treturn result;\n};\n\n/**\n * @return {!string}\n */\nFMIndex.prototype.dump$ = function () {\n\treturn this.dump$B(false);\n};\n\n/**\n * @param {!boolean} verbose\n * @return {!string}\n */\nFMIndex.prototype.dump$B = function (verbose) {\n\t/** @type {Array.<undefined|!string>} */\n\tvar contents;\n\t/** @type {CompressionReport} */\n\tvar report;\n\t/** @type {!number} */\n\tvar i;\n\tcontents = [  ];\n\treport = new CompressionReport$();\n\tcontents.push(Binary$dump32bitNumber$N(this._ddic));\n\tcontents.push(Binary$dump32bitNumber$N(this._ssize));\n\tcontents.push(Binary$dump32bitNumber$N(this._head));\n\treport.add$II(6, 6);\n\tcontents.push(this._sv.dump$LCompressionReport$(report));\n\tif (verbose) {\n\t\tconsole.log(\"Serializing FM-index\");\n\t\tconsole.log('    Wavelet Matrix: ' + (contents[3].length * 2 + \"\") + ' bytes (' + (report.rate$() + \"\") + '%)');\n\t}\n\tcontents.push(Binary$dump32bitNumber$N(this._posdic.length));\n\tfor (i in this._posdic) {\n\t\tcontents.push(Binary$dump32bitNumber$N((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/fm-index.jsx:282:61] null access\\n            contents.push(Binary.dump32bitNumber(this._posdic[i]));\\n                                                             ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(this._posdic[i]))));\n\t}\n\tfor (i in this._idic) {\n\t\tcontents.push(Binary$dump32bitNumber$N((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/fm-index.jsx:286:59] null access\\n            contents.push(Binary.dump32bitNumber(this._idic[i]));\\n                                                           ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(this._idic[i]))));\n\t}\n\tif (verbose) {\n\t\tconsole.log('    Dictionary Cache: ' + (this._idic.length * 16 + \"\") + ' bytes');\n\t}\n\treturn contents.join(\"\");\n};\n\n/**\n * @param {!string} data\n * @return {!number}\n */\nFMIndex.prototype.load$S = function (data) {\n\treturn this.load$SI(data, 0);\n};\n\n/**\n * @param {!string} data\n * @param {!number} offset\n * @return {!number}\n */\nFMIndex.prototype.load$SI = function (data, offset) {\n\t/** @type {!number} */\n\tvar maxChar;\n\t/** @type {!number} */\n\tvar c;\n\t/** @type {!number} */\n\tvar size;\n\t/** @type {!number} */\n\tvar i;\n\tthis._ddic = (Binary$load32bitNumber$SI(data, offset) | 0);\n\tthis._ssize = (Binary$load32bitNumber$SI(data, offset + 2) | 0);\n\tthis._head = (Binary$load32bitNumber$SI(data, offset + 4) | 0);\n\toffset = this._sv.load$SI(data, offset + 6);\n\tmaxChar = Math.pow(2, this._sv.bitsize$());\n\tfor (c = 0; c < maxChar; c++) {\n\t\tthis._rlt[c] = this._sv.rank_less_than$II(this._sv.size$(), c);\n\t}\n\tsize = Binary$load32bitNumber$SI(data, offset);\n\toffset += 2;\n\tfor (i = 0; i < size; (i++, offset += 2)) {\n\t\tthis._posdic.push(Binary$load32bitNumber$SI(data, offset));\n\t}\n\tfor (i = 0; i < size; (i++, offset += 2)) {\n\t\tthis._idic.push(Binary$load32bitNumber$SI(data, offset));\n\t}\n\treturn offset;\n};\n\n/**\n * class Tag extends Object\n * @constructor\n */\nfunction Tag() {\n}\n\n/**\n * @constructor\n * @param {!string} name\n */\nfunction Tag$S(name) {\n\tthis.name = name;\n\tthis.attributes = ({  });\n\tthis.isSelfClosing = false;\n};\n\nTag$S.prototype = new Tag;\n\n/**\n * class _Common extends Object\n * @constructor\n */\nfunction _Common() {\n}\n\n/**\n * @constructor\n */\nfunction _Common$() {\n};\n\n_Common$.prototype = new _Common;\n\n/**\n * class _State extends Object\n * @constructor\n */\nfunction _State() {\n}\n\n/**\n * @constructor\n */\nfunction _State$() {\n};\n\n_State$.prototype = new _State;\n\n/**\n * class SAXHandler extends Object\n * @constructor\n */\nfunction SAXHandler() {\n}\n\n/**\n * @constructor\n */\nfunction SAXHandler$() {\n\tthis.position = 0;\n\tthis.column = 0;\n\tthis.line = 0;\n};\n\nSAXHandler$.prototype = new SAXHandler;\n\n/**\n * @param {Error} error\n */\nSAXHandler.prototype.onerror$LError$ = function (error) {\n};\n\n/**\n * @param {!string} text\n */\nSAXHandler.prototype.ontext$S = function (text) {\n};\n\n/**\n * @param {!string} doctype\n */\nSAXHandler.prototype.ondoctype$S = function (doctype) {\n};\n\n/**\n * @param {!string} name\n * @param {!string} body\n */\nSAXHandler.prototype.onprocessinginstruction$SS = function (name, body) {\n};\n\n/**\n * @param {!string} sgmlDecl\n */\nSAXHandler.prototype.onsgmldeclaration$S = function (sgmlDecl) {\n};\n\n/**\n * @param {!string} tagname\n * @param {Object.<string, undefined|!string>} attributes\n */\nSAXHandler.prototype.onopentag$SHS = function (tagname, attributes) {\n};\n\n/**\n * @param {!string} tagname\n */\nSAXHandler.prototype.onclosetag$S = function (tagname) {\n};\n\n/**\n * @param {!string} name\n * @param {!string} value\n */\nSAXHandler.prototype.onattribute$SS = function (name, value) {\n};\n\n/**\n * @param {!string} comment\n */\nSAXHandler.prototype.oncomment$S = function (comment) {\n};\n\n/**\n */\nSAXHandler.prototype.onopencdata$ = function () {\n};\n\n/**\n * @param {!string} cdata\n */\nSAXHandler.prototype.oncdata$S = function (cdata) {\n};\n\n/**\n */\nSAXHandler.prototype.onclosecdata$ = function () {\n};\n\n/**\n */\nSAXHandler.prototype.onend$ = function () {\n};\n\n/**\n */\nSAXHandler.prototype.onready$ = function () {\n};\n\n/**\n * @param {!string} script\n */\nSAXHandler.prototype.onscript$S = function (script) {\n};\n\n/**\n * class _HTMLHandler extends SAXHandler\n * @constructor\n */\nfunction _HTMLHandler() {\n}\n\n_HTMLHandler.prototype = new SAXHandler;\n/**\n * @constructor\n * @param {Object.<string, undefined|Array.<undefined|!string>>} styles\n * @param {!boolean} escape\n */\nfunction _HTMLHandler$HASB(styles, escape) {\n\tSAXHandler$.call(this);\n\tthis.text = [  ];\n\tthis.escape = escape;\n\tthis.styles = styles;\n};\n\n_HTMLHandler$HASB.prototype = new _HTMLHandler;\n\n/**\n * @param {!string} str\n * @return {!string}\n */\n_HTMLHandler.escapeHTML$S = function (str) {\n\treturn str.replace(/\\n/g, \"<br/>\").replace(/&/g, \"&amp;\").replace(/\"/g, \"&quot;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n};\n\nvar _HTMLHandler$escapeHTML$S = _HTMLHandler.escapeHTML$S;\n\n/**\n * @param {!string} tagname\n * @param {Object.<string, undefined|!string>} attributes\n */\n_HTMLHandler.prototype.onopentag$SHS = function (tagname, attributes) {\n\tthis.text.push((function (v) {\n\t\tif (! (v != null)) {\n\t\t\tdebugger;\n\t\t\tthrow new Error(\"[src/style.jsx:23:43] null access\\n        this.text.push(this.styles[tagname][0]);\\n                                           ^\\n\");\n\t\t}\n\t\treturn v;\n\t}(this.styles[tagname][0])));\n};\n\n/**\n * @param {!string} tagname\n */\n_HTMLHandler.prototype.onclosetag$S = function (tagname) {\n\tthis.text.push((function (v) {\n\t\tif (! (v != null)) {\n\t\t\tdebugger;\n\t\t\tthrow new Error(\"[src/style.jsx:28:43] null access\\n        this.text.push(this.styles[tagname][1]);\\n                                           ^\\n\");\n\t\t}\n\t\treturn v;\n\t}(this.styles[tagname][1])));\n};\n\n/**\n * @param {!string} text\n */\n_HTMLHandler.prototype.ontext$S = function (text) {\n\tif (this.escape) {\n\t\tthis.text.push(_HTMLHandler$escapeHTML$S(text));\n\t} else {\n\t\tthis.text.push(text);\n\t}\n};\n\n/**\n * @return {!string}\n */\n_HTMLHandler.prototype.result$ = function () {\n\treturn this.text.join('');\n};\n\n/**\n * class SAXParser extends Object\n * @constructor\n */\nfunction SAXParser() {\n}\n\n/**\n * @constructor\n * @param {SAXHandler} handler\n */\nfunction SAXParser$LSAXHandler$(handler) {\n\tthis.q = \"\";\n\tthis.c = \"\";\n\tthis.bufferCheckPosition = 0;\n\tthis.looseCase = \"\";\n\tthis.tags = [  ];\n\tthis.closed = false;\n\tthis.closedRoot = false;\n\tthis.sawRoot = false;\n\tthis.tag = null;\n\tthis.error = null;\n\tthis.handler = null;\n\tthis.ENTITIES = null;\n\tthis.strict = false;\n\tthis.tagName = \"\";\n\tthis.state = 0;\n\tthis.line = 0;\n\tthis.column = 0;\n\tthis.position = 0;\n\tthis.startTagPosition = 0;\n\tthis.attribName = \"\";\n\tthis.attribValue = \"\";\n\tthis.script = \"\";\n\tthis.textNode = \"\";\n\tthis.attribList = null;\n\tthis.noscript = false;\n\tthis.cdata = \"\";\n\tthis.procInstBody = \"\";\n\tthis.procInstName = \"\";\n\tthis.doctype = \"\";\n\tthis.entity = \"\";\n\tthis.sgmlDecl = \"\";\n\tthis.comment = \"\";\n\tthis.preTags = 0;\n\tthis._init$LSAXHandler$B(handler, false);\n};\n\nSAXParser$LSAXHandler$.prototype = new SAXParser;\n\n/**\n * @constructor\n * @param {SAXHandler} handler\n * @param {!boolean} strict\n */\nfunction SAXParser$LSAXHandler$B(handler, strict) {\n\tthis.q = \"\";\n\tthis.c = \"\";\n\tthis.bufferCheckPosition = 0;\n\tthis.looseCase = \"\";\n\tthis.tags = [  ];\n\tthis.closed = false;\n\tthis.closedRoot = false;\n\tthis.sawRoot = false;\n\tthis.tag = null;\n\tthis.error = null;\n\tthis.handler = null;\n\tthis.ENTITIES = null;\n\tthis.strict = false;\n\tthis.tagName = \"\";\n\tthis.state = 0;\n\tthis.line = 0;\n\tthis.column = 0;\n\tthis.position = 0;\n\tthis.startTagPosition = 0;\n\tthis.attribName = \"\";\n\tthis.attribValue = \"\";\n\tthis.script = \"\";\n\tthis.textNode = \"\";\n\tthis.attribList = null;\n\tthis.noscript = false;\n\tthis.cdata = \"\";\n\tthis.procInstBody = \"\";\n\tthis.procInstName = \"\";\n\tthis.doctype = \"\";\n\tthis.entity = \"\";\n\tthis.sgmlDecl = \"\";\n\tthis.comment = \"\";\n\tthis.preTags = 0;\n\tthis._init$LSAXHandler$B(handler, strict);\n};\n\nSAXParser$LSAXHandler$B.prototype = new SAXParser;\n\n/**\n * @param {SAXHandler} handler\n * @param {!boolean} strict\n */\nSAXParser.prototype._init$LSAXHandler$B = function (handler, strict) {\n\tthis.handler = handler;\n\tthis.clearBuffers$();\n\tthis.q = \"\";\n\tthis.bufferCheckPosition = (_Common.MAX_BUFFER_LENGTH | 0);\n\tthis.looseCase = 'toLowerCase';\n\tthis.tags = [  ];\n\tthis.closed = this.closedRoot = this.sawRoot = false;\n\tthis.tag = null;\n\tthis.error = null;\n\tthis.strict = strict;\n\tthis.noscript = strict;\n\tthis.state = (_State.BEGIN | 0);\n\tthis.ENTITIES = _Entities$entity_list$();\n\tthis.attribList = [  ];\n\tthis.noscript = false;\n\tthis.preTags = 0;\n\tthis.handler.onready$();\n};\n\n/**\n * @param {!boolean} flag\n */\nSAXParser.prototype.set_noscript$B = function (flag) {\n\tthis.noscript = flag;\n};\n\n/**\n * @return {SAXParser}\n */\nSAXParser.prototype.resume$ = function () {\n\tthis.error = null;\n\treturn this;\n};\n\n/**\n * @return {SAXParser}\n */\nSAXParser.prototype.close$ = function () {\n\treturn this.parse$S('');\n};\n\n/**\n * @param {!string} chunk\n * @return {SAXParser}\n */\nSAXParser.prototype.parse$S = function (chunk) {\n\t/** @type {Char} */\n\tvar _;\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {!string} */\n\tvar c;\n\t/** @type {!number} */\n\tvar starti;\n\t/** @type {!number} */\n\tvar pad;\n\t/** @type {!number} */\n\tvar returnState;\n\t_ = new Char$();\n\tif (this.error) {\n\t\tthrow this.error;\n\t}\n\tif (this.closed) {\n\t\treturn this.emiterror$S(\"Cannot write after close. Assign an onready handler.\");\n\t}\n\t(i = 0, c = \"\");\n\twhile (this.c = c = chunk.charAt(i++)) {\n\t\tthis.position++;\n\t\tif (c === \"\\n\") {\n\t\t\tthis.handler.line++;\n\t\t\tthis.handler.column = 0;\n\t\t} else {\n\t\t\tthis.handler.column++;\n\t\t}\n\t\tswitch (this.state) {\n\t\tcase _State.BEGIN:\n\t\t\tif (c === \"<\") {\n\t\t\t\tthis.state = (_State.OPEN_WAKA | 0);\n\t\t\t\tthis.startTagPosition = this.position;\n\t\t\t} else {\n\t\t\t\tif (_.not$HBS(_.whitespace, c)) {\n\t\t\t\t\tthis.strictFail$S(\"Non-whitespace before first tag.\");\n\t\t\t\t\tthis.textNode = c;\n\t\t\t\t\tthis.state = (_State.TEXT | 0);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.TEXT:\n\t\t\tif (this.sawRoot && ! this.closedRoot) {\n\t\t\t\tstarti = i - 1;\n\t\t\t\twhile (c && c !== \"<\" && c !== \"&\") {\n\t\t\t\t\tc = chunk.charAt(i++);\n\t\t\t\t\tif (c) {\n\t\t\t\t\t\tthis.position++;\n\t\t\t\t\t\tif (c === \"\\n\") {\n\t\t\t\t\t\t\tthis.handler.line++;\n\t\t\t\t\t\t\tthis.handler.column = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.handler.column++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.textNode += chunk.substring(starti, i - 1);\n\t\t\t}\n\t\t\tif (c === \"<\") {\n\t\t\t\tthis.state = (_State.OPEN_WAKA | 0);\n\t\t\t\tthis.startTagPosition = this.position;\n\t\t\t} else {\n\t\t\t\tif (_.not$HBS(_.whitespace, c) && (! this.sawRoot || this.closedRoot)) {\n\t\t\t\t\tthis.strictFail$S(\"Text data outside of root node.\");\n\t\t\t\t}\n\t\t\t\tif (c === \"&\") {\n\t\t\t\t\tthis.state = (_State.TEXT_ENTITY | 0);\n\t\t\t\t} else {\n\t\t\t\t\tthis.textNode += c;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.SCRIPT:\n\t\t\tif (c === \"<\") {\n\t\t\t\tthis.state = (_State.SCRIPT_ENDING | 0);\n\t\t\t} else {\n\t\t\t\tthis.script += c;\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.SCRIPT_ENDING:\n\t\t\tif (c === \"/\") {\n\t\t\t\tthis.state = (_State.CLOSE_TAG | 0);\n\t\t\t} else {\n\t\t\t\tthis.script += \"<\" + c;\n\t\t\t\tthis.state = (_State.SCRIPT | 0);\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.OPEN_WAKA:\n\t\t\tif (c === \"!\") {\n\t\t\t\tthis.state = (_State.SGML_DECL | 0);\n\t\t\t\tthis.sgmlDecl = \"\";\n\t\t\t} else {\n\t\t\t\tif (_.is$HBS(_.whitespace, c)) {\n\t\t\t\t} else {\n\t\t\t\t\tif (_.is$LRegExp$S(_.nameStart, c)) {\n\t\t\t\t\t\tthis.state = (_State.OPEN_TAG | 0);\n\t\t\t\t\t\tthis.tagName = c;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (c === \"/\") {\n\t\t\t\t\t\t\tthis.state = (_State.CLOSE_TAG | 0);\n\t\t\t\t\t\t\tthis.tagName = \"\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (c === \"?\") {\n\t\t\t\t\t\t\t\tthis.state = (_State.PROC_INST | 0);\n\t\t\t\t\t\t\t\tthis.procInstName = this.procInstBody = \"\";\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.strictFail$S(\"Unencoded <\");\n\t\t\t\t\t\t\t\tif (this.startTagPosition + 1 < this.position) {\n\t\t\t\t\t\t\t\t\tpad = this.position - this.startTagPosition;\n\t\t\t\t\t\t\t\t\tfor (i = 0; i < pad; i++) {\n\t\t\t\t\t\t\t\t\t\tc = \" \" + c;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tthis.textNode += \"<\" + c;\n\t\t\t\t\t\t\t\tthis.state = (_State.TEXT | 0);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.SGML_DECL:\n\t\t\tif ((this.sgmlDecl + c).toUpperCase() === _.CDATA) {\n\t\t\t\tthis.closetext_if_exist$();\n\t\t\t\tthis.handler.onopencdata$();\n\t\t\t\tthis.state = (_State.CDATA | 0);\n\t\t\t\tthis.sgmlDecl = \"\";\n\t\t\t\tthis.cdata = \"\";\n\t\t\t} else {\n\t\t\t\tif (this.sgmlDecl + c === \"--\") {\n\t\t\t\t\tthis.state = (_State.COMMENT | 0);\n\t\t\t\t\tthis.comment = \"\";\n\t\t\t\t\tthis.sgmlDecl = \"\";\n\t\t\t\t} else {\n\t\t\t\t\tif ((this.sgmlDecl + c).toUpperCase() === _.DOCTYPE) {\n\t\t\t\t\t\tthis.state = (_State.DOCTYPE | 0);\n\t\t\t\t\t\tif (this.doctype || this.sawRoot) {\n\t\t\t\t\t\t\tthis.strictFail$S(\"Inappropriately located doctype declaration\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.doctype = \"\";\n\t\t\t\t\t\tthis.sgmlDecl = \"\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (c === \">\") {\n\t\t\t\t\t\t\tthis.closetext_if_exist$();\n\t\t\t\t\t\t\tthis.handler.onsgmldeclaration$S(this.sgmlDecl);\n\t\t\t\t\t\t\tthis.sgmlDecl = \"\";\n\t\t\t\t\t\t\tthis.state = (_State.TEXT | 0);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (_.is$HBS(_.quote, c)) {\n\t\t\t\t\t\t\t\tthis.state = (_State.SGML_DECL_QUOTED | 0);\n\t\t\t\t\t\t\t\tthis.sgmlDecl += c;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.sgmlDecl += c;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.SGML_DECL_QUOTED:\n\t\t\tif (c === this.q) {\n\t\t\t\tthis.state = (_State.SGML_DECL | 0);\n\t\t\t\tthis.q = \"\";\n\t\t\t}\n\t\t\tthis.sgmlDecl += c;\n\t\t\tcontinue;\n\t\tcase _State.DOCTYPE:\n\t\t\tif (c === \">\") {\n\t\t\t\tthis.state = (_State.TEXT | 0);\n\t\t\t\tthis.closetext_if_exist$();\n\t\t\t\tthis.handler.ondoctype$S(this.doctype);\n\t\t\t} else {\n\t\t\t\tthis.doctype += c;\n\t\t\t\tif (c === \"[\") {\n\t\t\t\t\tthis.state = (_State.DOCTYPE_DTD | 0);\n\t\t\t\t} else {\n\t\t\t\t\tif (_.is$HBS(_.quote, c)) {\n\t\t\t\t\t\tthis.state = (_State.DOCTYPE_QUOTED | 0);\n\t\t\t\t\t\tthis.q = c;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.DOCTYPE_QUOTED:\n\t\t\tthis.doctype += c;\n\t\t\tif (c === this.q) {\n\t\t\t\tthis.q = \"\";\n\t\t\t\tthis.state = (_State.DOCTYPE | 0);\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.DOCTYPE_DTD:\n\t\t\tthis.doctype += c;\n\t\t\tif (c === \"]\") {\n\t\t\t\tthis.state = (_State.DOCTYPE | 0);\n\t\t\t} else {\n\t\t\t\tif (_.is$HBS(_.quote, c)) {\n\t\t\t\t\tthis.state = (_State.DOCTYPE_DTD_QUOTED | 0);\n\t\t\t\t\tthis.q = c;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.DOCTYPE_DTD_QUOTED:\n\t\t\tthis.doctype += c;\n\t\t\tif (c === this.q) {\n\t\t\t\tthis.state = (_State.DOCTYPE_DTD | 0);\n\t\t\t\tthis.q = \"\";\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.COMMENT:\n\t\t\tif (c === \"-\") {\n\t\t\t\tthis.state = (_State.COMMENT_ENDING | 0);\n\t\t\t} else {\n\t\t\t\tthis.comment += c;\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.COMMENT_ENDING:\n\t\t\tif (c === \"-\") {\n\t\t\t\tthis.state = (_State.COMMENT_ENDED | 0);\n\t\t\t\tthis.comment = this.textopts$S(this.comment);\n\t\t\t\tif (this.comment) {\n\t\t\t\t\tthis.closetext_if_exist$();\n\t\t\t\t\tthis.handler.oncomment$S(this.comment);\n\t\t\t\t}\n\t\t\t\tthis.comment = \"\";\n\t\t\t} else {\n\t\t\t\tthis.comment += \"-\" + c;\n\t\t\t\tthis.state = (_State.COMMENT | 0);\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.COMMENT_ENDED:\n\t\t\tif (c !== \">\") {\n\t\t\t\tthis.strictFail$S(\"Malformed comment\");\n\t\t\t\tthis.comment += \"--\" + c;\n\t\t\t\tthis.state = (_State.COMMENT | 0);\n\t\t\t} else {\n\t\t\t\tthis.state = (_State.TEXT | 0);\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.CDATA:\n\t\t\tif (c === \"]\") {\n\t\t\t\tthis.state = (_State.CDATA_ENDING | 0);\n\t\t\t} else {\n\t\t\t\tthis.cdata += c;\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.CDATA_ENDING:\n\t\t\tif (c === \"]\") {\n\t\t\t\tthis.state = (_State.CDATA_ENDING_2 | 0);\n\t\t\t} else {\n\t\t\t\tthis.cdata += \"]\" + c;\n\t\t\t\tthis.state = (_State.CDATA | 0);\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.CDATA_ENDING_2:\n\t\t\tif (c === \">\") {\n\t\t\t\tif (this.cdata) {\n\t\t\t\t\tthis.closetext_if_exist$();\n\t\t\t\t}\n\t\t\t\tthis.handler.oncdata$S(this.cdata);\n\t\t\t\tthis.handler.onclosecdata$();\n\t\t\t\tthis.cdata = \"\";\n\t\t\t\tthis.state = (_State.TEXT | 0);\n\t\t\t} else {\n\t\t\t\tif (c === \"]\") {\n\t\t\t\t\tthis.cdata += \"]\";\n\t\t\t\t} else {\n\t\t\t\t\tthis.cdata += \"]]\" + c;\n\t\t\t\t\tthis.state = (_State.CDATA | 0);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.PROC_INST:\n\t\t\tif (c === \"?\") {\n\t\t\t\tthis.state = (_State.PROC_INST_ENDING | 0);\n\t\t\t} else {\n\t\t\t\tif (_.is$HBS(_.whitespace, c)) {\n\t\t\t\t\tthis.state = (_State.PROC_INST_BODY | 0);\n\t\t\t\t} else {\n\t\t\t\t\tthis.procInstName += c;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.PROC_INST_BODY:\n\t\t\tif (! this.procInstBody && _.is$HBS(_.whitespace, c)) {\n\t\t\t\tcontinue;\n\t\t\t} else {\n\t\t\t\tif (c === \"?\") {\n\t\t\t\t\tthis.state = (_State.PROC_INST_ENDING | 0);\n\t\t\t\t} else {\n\t\t\t\t\tthis.procInstBody += c;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.PROC_INST_ENDING:\n\t\t\tif (c === \">\") {\n\t\t\t\tthis.closetext_if_exist$();\n\t\t\t\tthis.handler.onprocessinginstruction$SS(this.procInstName, this.procInstBody);\n\t\t\t\tthis.procInstName = this.procInstBody = \"\";\n\t\t\t\tthis.state = (_State.TEXT | 0);\n\t\t\t} else {\n\t\t\t\tthis.procInstBody += \"?\" + c;\n\t\t\t\tthis.state = (_State.PROC_INST_BODY | 0);\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.OPEN_TAG:\n\t\t\tif (_.is$LRegExp$S(_.nameBody, c)) {\n\t\t\t\tthis.tagName += c;\n\t\t\t} else {\n\t\t\t\tthis.newTag$();\n\t\t\t\tif (c === \">\") {\n\t\t\t\t\tthis.openTag$();\n\t\t\t\t} else {\n\t\t\t\t\tif (c === \"/\") {\n\t\t\t\t\t\tthis.state = (_State.OPEN_TAG_SLASH | 0);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (_.not$HBS(_.whitespace, c)) {\n\t\t\t\t\t\t\tthis.strictFail$S(\"Invalid character in tag name\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.state = (_State.ATTRIB | 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.OPEN_TAG_SLASH:\n\t\t\tif (c === \">\") {\n\t\t\t\tthis.openTag$B(true);\n\t\t\t\tthis.closeTag$();\n\t\t\t} else {\n\t\t\t\tthis.strictFail$S(\"Forward-slash in opening tag not followed by >\");\n\t\t\t\tthis.state = (_State.ATTRIB | 0);\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.ATTRIB:\n\t\t\tif (_.is$HBS(_.whitespace, c)) {\n\t\t\t\tcontinue;\n\t\t\t} else {\n\t\t\t\tif (c === \">\") {\n\t\t\t\t\tthis.openTag$();\n\t\t\t\t} else {\n\t\t\t\t\tif (c === \"/\") {\n\t\t\t\t\t\tthis.state = (_State.OPEN_TAG_SLASH | 0);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (_.is$LRegExp$S(_.nameStart, c)) {\n\t\t\t\t\t\t\tthis.attribName = c;\n\t\t\t\t\t\t\tthis.attribValue = \"\";\n\t\t\t\t\t\t\tthis.state = (_State.ATTRIB_NAME | 0);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.strictFail$S(\"Invalid attribute name\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.ATTRIB_NAME:\n\t\t\tif (c === \"=\") {\n\t\t\t\tthis.state = (_State.ATTRIB_VALUE | 0);\n\t\t\t} else {\n\t\t\t\tif (c === \">\") {\n\t\t\t\t\tthis.strictFail$S(\"Attribute without value\");\n\t\t\t\t\tthis.attribValue = this.attribName;\n\t\t\t\t\tthis.attrib$();\n\t\t\t\t\tthis.openTag$();\n\t\t\t\t} else {\n\t\t\t\t\tif (_.is$HBS(_.whitespace, c)) {\n\t\t\t\t\t\tthis.state = (_State.ATTRIB_NAME_SAW_WHITE | 0);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (_.is$LRegExp$S(_.nameBody, c)) {\n\t\t\t\t\t\t\tthis.attribName += c;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.strictFail$S(\"Invalid attribute name\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.ATTRIB_NAME_SAW_WHITE:\n\t\t\tif (c === \"=\") {\n\t\t\t\tthis.state = (_State.ATTRIB_VALUE | 0);\n\t\t\t} else {\n\t\t\t\tif (_.is$HBS(_.whitespace, c)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t} else {\n\t\t\t\t\tthis.strictFail$S(\"Attribute without value\");\n\t\t\t\t\tthis.tag.attributes[this.attribName] = \"\";\n\t\t\t\t\tthis.attribValue = \"\";\n\t\t\t\t\tthis.closetext_if_exist$();\n\t\t\t\t\tthis.handler.onattribute$SS(this.attribName, \"\");\n\t\t\t\t\tthis.attribName = \"\";\n\t\t\t\t\tif (c === \">\") {\n\t\t\t\t\t\tthis.openTag$();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (_.is$LRegExp$S(_.nameStart, c)) {\n\t\t\t\t\t\t\tthis.attribName = c;\n\t\t\t\t\t\t\tthis.state = (_State.ATTRIB_NAME | 0);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.strictFail$S(\"Invalid attribute name\");\n\t\t\t\t\t\t\tthis.state = (_State.ATTRIB | 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.ATTRIB_VALUE:\n\t\t\tif (_.is$HBS(_.whitespace, c)) {\n\t\t\t\tcontinue;\n\t\t\t} else {\n\t\t\t\tif (_.is$HBS(_.quote, c)) {\n\t\t\t\t\tthis.q = c;\n\t\t\t\t\tthis.state = (_State.ATTRIB_VALUE_QUOTED | 0);\n\t\t\t\t} else {\n\t\t\t\t\tthis.strictFail$S(\"Unquoted attribute value\");\n\t\t\t\t\tthis.state = (_State.ATTRIB_VALUE_UNQUOTED | 0);\n\t\t\t\t\tthis.attribValue = c;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.ATTRIB_VALUE_QUOTED:\n\t\t\tif (c !== this.q) {\n\t\t\t\tif (c === \"&\") {\n\t\t\t\t\tthis.state = (_State.ATTRIB_VALUE_ENTITY_Q | 0);\n\t\t\t\t} else {\n\t\t\t\t\tthis.attribValue += c;\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthis.attrib$();\n\t\t\tthis.q = \"\";\n\t\t\tthis.state = (_State.ATTRIB | 0);\n\t\t\tcontinue;\n\t\tcase _State.ATTRIB_VALUE_UNQUOTED:\n\t\t\tif (_.not$HBS(_.attribEnd, c)) {\n\t\t\t\tif (c === \"&\") {\n\t\t\t\t\tthis.state = (_State.ATTRIB_VALUE_ENTITY_U | 0);\n\t\t\t\t} else {\n\t\t\t\t\tthis.attribValue += c;\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthis.attrib$();\n\t\t\tif (c === \">\") {\n\t\t\t\tthis.openTag$();\n\t\t\t} else {\n\t\t\t\tthis.state = (_State.ATTRIB | 0);\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.CLOSE_TAG:\n\t\t\tif (! this.tagName) {\n\t\t\t\tif (_.is$HBS(_.whitespace, c)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t} else {\n\t\t\t\t\tif (_.not$LRegExp$S(_.nameStart, c)) {\n\t\t\t\t\t\tif (this.script) {\n\t\t\t\t\t\t\tthis.script += \"</\" + c;\n\t\t\t\t\t\t\tthis.state = (_State.SCRIPT | 0);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.strictFail$S(\"Invalid tagname in closing tag.\");\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.tagName = c;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (c === \">\") {\n\t\t\t\t\tthis.closeTag$();\n\t\t\t\t} else {\n\t\t\t\t\tif (_.is$LRegExp$S(_.nameBody, c)) {\n\t\t\t\t\t\tthis.tagName += c;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (this.script) {\n\t\t\t\t\t\t\tthis.script += \"</\" + this.tagName;\n\t\t\t\t\t\t\tthis.tagName = \"\";\n\t\t\t\t\t\t\tthis.state = (_State.SCRIPT | 0);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (_.not$HBS(_.whitespace, c)) {\n\t\t\t\t\t\t\t\tthis.strictFail$S(\"Invalid tagname in closing tag\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.state = (_State.CLOSE_TAG_SAW_WHITE | 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.CLOSE_TAG_SAW_WHITE:\n\t\t\tif (_.is$HBS(_.whitespace, c)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (c === \">\") {\n\t\t\t\tthis.closeTag$();\n\t\t\t} else {\n\t\t\t\tthis.strictFail$S(\"Invalid characters in closing tag\");\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.TEXT_ENTITY:\n\t\t\tif (c === \";\") {\n\t\t\t\tthis.textNode += this.parseEntity$();\n\t\t\t\tthis.entity = \"\";\n\t\t\t\tthis.state = (_State.TEXT | 0);\n\t\t\t} else {\n\t\t\t\tif (_.is$HBS(_.entity, c)) {\n\t\t\t\t\tthis.entity += c;\n\t\t\t\t} else {\n\t\t\t\t\tthis.strictFail$S(\"Invalid character entity\");\n\t\t\t\t\tthis.textNode += \"&\" + this.entity + c;\n\t\t\t\t\tthis.entity = \"\";\n\t\t\t\t\tthis.state = (_State.TEXT | 0);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcontinue;\n\t\tcase _State.ATTRIB_VALUE_ENTITY_Q:\n\t\tcase _State.ATTRIB_VALUE_ENTITY_U:\n\t\t\tif (this.state === _State.ATTRIB_VALUE_ENTITY_Q) {\n\t\t\t\treturnState = _State.ATTRIB_VALUE_QUOTED;\n\t\t\t} else {\n\t\t\t\treturnState = _State.ATTRIB_VALUE_UNQUOTED;\n\t\t\t}\n\t\t\tif (c === \";\") {\n\t\t\t\tthis.attribValue += this.parseEntity$();\n\t\t\t\tthis.entity = \"\";\n\t\t\t\tthis.state = (returnState | 0);\n\t\t\t} else {\n\t\t\t\tif (_.is$HBS(_.entity, c)) {\n\t\t\t\t\tthis.entity += c;\n\t\t\t\t} else {\n\t\t\t\t\tthis.strictFail$S(\"Invalid character entity\");\n\t\t\t\t\tthis.attribValue += \"&\" + this.entity + c;\n\t\t\t\t\tthis.entity = \"\";\n\t\t\t\t\tthis.state = (returnState | 0);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcontinue;\n\t\tdefault:\n\t\t\tthrow new Error(\"Unknown state: \" + (this.state + \"\"));\n\t\t}\n\t}\n\tthis.end$();\n\treturn this;\n};\n\n/**\n */\nSAXParser.prototype.clearBuffers$ = function () {\n\tthis.comment = '';\n\tthis.sgmlDecl = '';\n\tthis.textNode = '';\n\tthis.tagName = '';\n\tthis.doctype = '';\n\tthis.procInstName = '';\n\tthis.procInstBody = '';\n\tthis.entity = '';\n\tthis.attribName = '';\n\tthis.attribValue = '';\n\tthis.cdata = '';\n\tthis.script = '';\n};\n\n/**\n */\nSAXParser.prototype.closetext_if_exist$ = function () {\n\tif (this.textNode !== '') {\n\t\tthis.closetext$();\n\t}\n};\n\n/**\n */\nSAXParser.prototype.closetext$ = function () {\n\t/** @type {!string} */\n\tvar text;\n\tif (this.preTags === 0) {\n\t\ttext = this.textopts$S(this.textNode);\n\t\tif (text) {\n\t\t\tthis.handler.ontext$S(text);\n\t\t}\n\t} else {\n\t\tif (this.textNode) {\n\t\t\tthis.handler.ontext$S(this.textNode);\n\t\t}\n\t}\n\tthis.textNode = \"\";\n};\n\n/**\n * @param {!string} text\n * @return {!string}\n */\nSAXParser.prototype.textopts$S = function (text) {\n\ttext = text.replace(/[\\n\\t]/g, ' ');\n\ttext = text.replace(/\\s\\s+/g, \" \");\n\treturn text;\n};\n\n/**\n * @param {!string} er\n * @return {SAXParser}\n */\nSAXParser.prototype.emiterror$S = function (er) {\n\t/** @type {Error} */\n\tvar error;\n\tthis.closetext$();\n\ter += \"\\nLine: \" + (this.line + \"\") + \"\\nColumn: \" + (this.column + \"\") + \"\\nChar: \" + this.c;\n\terror = new Error(er);\n\tthis.error = error;\n\tthis.handler.onerror$LError$(error);\n\treturn this;\n};\n\n/**\n */\nSAXParser.prototype.end$ = function () {\n\tif (! this.closedRoot) {\n\t\tthis.strictFail$S(\"Unclosed root tag\");\n\t}\n\tif (this.state !== _State.TEXT) {\n\t\tthis.emiterror$S(\"Unexpected end\");\n\t}\n\tthis.closetext$();\n\tthis.c = \"\";\n\tthis.closed = true;\n\tthis.handler.onend$();\n};\n\n/**\n * @param {!string} message\n */\nSAXParser.prototype.strictFail$S = function (message) {\n\tif (this.strict) {\n\t\tthis.emiterror$S(message);\n\t}\n};\n\n/**\n */\nSAXParser.prototype.newTag$ = function () {\n\t/** @type {!boolean} */\n\tvar parent;\n\t/** @type {Tag} */\n\tvar tag;\n\tif (! this.strict) {\n\t\tthis.tagName = this.tagName.toLowerCase();\n\t}\n\tparent = !! (this.tags[this.tags.length - 1] || this);\n\ttag = this.tag = new Tag$S(this.tagName);\n\tthis.attribList.length = 0;\n};\n\n/**\n */\nSAXParser.prototype.attrib$ = function () {\n\tif (! this.strict) {\n\t\tthis.attribName = this.attribName.toLowerCase();\n\t}\n\tif ($__jsx_ObjectHasOwnProperty.call(this.tag.attributes, this.attribName)) {\n\t\tthis.attribName = this.attribValue = \"\";\n\t\treturn;\n\t}\n\tthis.tag.attributes[this.attribName] = this.attribValue;\n\tthis.closetext_if_exist$();\n\tthis.handler.onattribute$SS(this.attribName, this.attribValue);\n\tthis.attribName = this.attribValue = \"\";\n};\n\n/**\n */\nSAXParser.prototype.openTag$ = function () {\n\tthis.openTag$B(false);\n};\n\n/**\n * @param {!boolean} selfClosing\n */\nSAXParser.prototype.openTag$B = function (selfClosing) {\n\tthis.tag.isSelfClosing = selfClosing;\n\tthis.sawRoot = true;\n\tthis.tags.push(this.tag);\n\tthis.closetext_if_exist$();\n\tthis.handler.onopentag$SHS(this.tag.name, this.tag.attributes);\n\tif (this.tag.name === 'pre') {\n\t\tthis.preTags++;\n\t}\n\tif (! selfClosing) {\n\t\tif (! this.noscript && this.tagName.toLowerCase() === \"script\") {\n\t\t\tthis.state = (_State.SCRIPT | 0);\n\t\t} else {\n\t\t\tthis.state = (_State.TEXT | 0);\n\t\t}\n\t\tthis.tag = null;\n\t\tthis.tagName = \"\";\n\t}\n\tthis.attribName = this.attribValue = \"\";\n\tthis.attribList.length = 0;\n};\n\n/**\n */\nSAXParser.prototype.closeTag$ = function () {\n\t/** @type {!number} */\n\tvar t;\n\t/** @type {!string} */\n\tvar tagName;\n\t/** @type {!string} */\n\tvar closeTo;\n\t/** @type {Tag} */\n\tvar close;\n\t/** @type {!number} */\n\tvar s;\n\t/** @type {Tag} */\n\tvar tag;\n\t/** @type {Tag} */\n\tvar parent;\n\tif (! this.tagName) {\n\t\tthis.strictFail$S(\"Weird empty close tag.\");\n\t\tthis.textNode += \"</>\";\n\t\tthis.state = (_State.TEXT | 0);\n\t\treturn;\n\t}\n\tif (this.script) {\n\t\tif (this.tagName !== \"script\") {\n\t\t\tthis.script += \"</\" + this.tagName + \">\";\n\t\t\tthis.tagName = \"\";\n\t\t\tthis.state = (_State.SCRIPT | 0);\n\t\t\treturn;\n\t\t}\n\t\tthis.closetext_if_exist$();\n\t\tthis.handler.onscript$S(this.script);\n\t\tthis.script = \"\";\n\t}\n\tt = this.tags.length;\n\ttagName = this.tagName;\n\tif (! this.strict) {\n\t\ttagName = tagName.toLowerCase();\n\t}\n\tcloseTo = tagName;\n\twhile (t--) {\n\t\tclose = this.tags[t];\n\t\tif (close.name !== closeTo) {\n\t\t\tthis.strictFail$S(\"Unexpected close tag\");\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (t < 0) {\n\t\tthis.strictFail$S(\"Unmatched closing tag: \" + this.tagName);\n\t\tthis.textNode += \"</\" + this.tagName + \">\";\n\t\tthis.state = (_State.TEXT | 0);\n\t\treturn;\n\t}\n\tthis.tagName = tagName;\n\ts = this.tags.length;\n\twhile (s-- > t) {\n\t\ttag = this.tag = this.tags.pop();\n\t\tthis.tagName = this.tag.name;\n\t\tthis.closetext_if_exist$();\n\t\tthis.handler.onclosetag$S(this.tagName);\n\t\tparent = this.tags[this.tags.length - 1];\n\t\tif (this.tagName === 'pre') {\n\t\t\tthis.preTags--;\n\t\t}\n\t}\n\tif (t === 0) {\n\t\tthis.closedRoot = true;\n\t}\n\tthis.tagName = this.attribValue = this.attribName = \"\";\n\tthis.attribList.length = 0;\n\tthis.state = (_State.TEXT | 0);\n};\n\n/**\n * @return {!string}\n */\nSAXParser.prototype.parseEntity$ = function () {\n\t/** @type {!string} */\n\tvar entity;\n\t/** @type {!string} */\n\tvar entityLC;\n\t/** @type {!number} */\n\tvar num;\n\t/** @type {!string} */\n\tvar numStr;\n\tentity = this.entity;\n\tentityLC = entity.toLowerCase();\n\tnum = 0;\n\tnumStr = \"\";\n\tif (this.ENTITIES[entity]) {\n\t\treturn (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/sax.jsx:977:32] null access\\n            return this.ENTITIES[entity];\\n                                ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(this.ENTITIES[entity]));\n\t}\n\tif (this.ENTITIES[entityLC]) {\n\t\treturn (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/sax.jsx:981:32] null access\\n            return this.ENTITIES[entityLC];\\n                                ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(this.ENTITIES[entityLC]));\n\t}\n\tentity = entityLC;\n\tif (entity.charAt(0) === \"#\") {\n\t\tif (entity.charAt(1) === \"x\") {\n\t\t\tentity = entity.slice(2);\n\t\t\tnum = $__jsx_parseInt(entity, 16);\n\t\t\tnumStr = num.toString(16);\n\t\t} else {\n\t\t\tentity = entity.slice(1);\n\t\t\tnum = $__jsx_parseInt(entity, 10);\n\t\t\tnumStr = num.toString(10);\n\t\t}\n\t}\n\tentity = entity.replace(/^0+/, \"\");\n\tif (numStr.toLowerCase() !== entity) {\n\t\tthis.strictFail$S(\"Invalid character entity\");\n\t\treturn \"&\" + this.entity + \";\";\n\t}\n\treturn String.fromCharCode(num);\n};\n\n/**\n * class Char extends Object\n * @constructor\n */\nfunction Char() {\n}\n\n/**\n * @constructor\n */\nfunction Char$() {\n\t/** @type {!string} */\n\tvar whitespace;\n\t/** @type {!string} */\n\tvar number;\n\t/** @type {!string} */\n\tvar letter;\n\t/** @type {!string} */\n\tvar quote;\n\t/** @type {!string} */\n\tvar entity;\n\t/** @type {!string} */\n\tvar attribEnd;\n\twhitespace = \"\\r\\n\\t \";\n\tnumber = \"0124356789\";\n\tletter = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\tquote = \"'\\\"\";\n\tentity = number + letter + \"#\";\n\tattribEnd = whitespace + \">\";\n\tthis.CDATA = \"[CDATA[\";\n\tthis.DOCTYPE = \"DOCTYPE\";\n\tthis.XML_NAMESPACE = \"http://www.w3.org/XML/1998/namespace\";\n\tthis.whitespace = this._charClass$S(whitespace);\n\tthis.number = this._charClass$S(number);\n\tthis.letter = this._charClass$S(letter);\n\tthis.quote = this._charClass$S(quote);\n\tthis.entity = this._charClass$S(entity);\n\tthis.attribEnd = this._charClass$S(attribEnd);\n\tthis.nameStart = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/;\n\tthis.nameBody = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040\\.\\d-]/;\n};\n\nChar$.prototype = new Char;\n\n/**\n * @param {!string} str\n * @return {Object.<string, undefined|!boolean>}\n */\nChar.prototype._charClass$S = function (str) {\n\t/** @type {Object.<string, undefined|!boolean>} */\n\tvar result;\n\t/** @type {!number} */\n\tvar i;\n\tresult = ({  });\n\tfor (i = 0; i < str.length; i++) {\n\t\tresult[str.slice(i, i + 1)] = true;\n\t}\n\treturn result;\n};\n\n/**\n * @param {RegExp} charclass\n * @param {!string} c\n * @return {!boolean}\n */\nChar.prototype.is$LRegExp$S = function (charclass, c) {\n\treturn charclass.test(c);\n};\n\n/**\n * @param {Object.<string, undefined|!boolean>} charclass\n * @param {!string} c\n * @return {!boolean}\n */\nChar.prototype.is$HBS = function (charclass, c) {\n\treturn $__jsx_ObjectHasOwnProperty.call(charclass, c);\n};\n\n/**\n * @param {RegExp} charclass\n * @param {!string} c\n * @return {!boolean}\n */\nChar.prototype.not$LRegExp$S = function (charclass, c) {\n\treturn ! this.is$LRegExp$S(charclass, c);\n};\n\n/**\n * @param {Object.<string, undefined|!boolean>} charclass\n * @param {!string} c\n * @return {!boolean}\n */\nChar.prototype.not$HBS = function (charclass, c) {\n\treturn ! this.is$HBS(charclass, c);\n};\n\n/**\n * class _Entities extends Object\n * @constructor\n */\nfunction _Entities() {\n}\n\n/**\n * @constructor\n */\nfunction _Entities$() {\n};\n\n_Entities$.prototype = new _Entities;\n\n/**\n * @return {Object.<string, undefined|!string>}\n */\n_Entities.entity_list$ = function () {\n\t/** @type {Object.<string, undefined|!string>} */\n\tvar result;\n\t/** @type {!string} */\n\tvar key;\n\t/** @type {*} */\n\tvar value;\n\tresult = ({  });\n\tfor (key in _Entities._entities) {\n\t\tvalue = _Entities._entities[key];\n\t\tif (typeof value === 'string') {\n\t\t\tresult[key] = value + \"\";\n\t\t} else {\n\t\t\tif (typeof value === 'number') {\n\t\t\t\tresult[key] = String.fromCharCode(value | 0);\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n};\n\nvar _Entities$entity_list$ = _Entities.entity_list$;\n\n/**\n * class BitVector extends Object\n * @constructor\n */\nfunction BitVector() {\n}\n\n/**\n * @constructor\n */\nfunction BitVector$() {\n\tthis._size = 0;\n\tthis._size1 = 0;\n\tthis._r = [  ];\n\tthis._v = [  ];\n\tthis.clear$();\n};\n\nBitVector$.prototype = new BitVector;\n\n/**\n */\nBitVector.prototype.build$ = function () {\n\t/** @type {!number} */\n\tvar i;\n\tthis._size1 = 0;\n\tfor (i = 0; i < this._v.length; i++) {\n\t\tif (i % BitVector.BLOCK_RATE === 0) {\n\t\t\tthis._r.push(this.size$B(true));\n\t\t}\n\t\tthis._size1 += this._rank32$IIB((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/bit-vector.jsx:37:47] null access\\n            this._size1 += this._rank32(this._v[i], BitVector.SMALL_BLOCK_SIZE, true);\\n                                               ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(this._v[i])), BitVector.SMALL_BLOCK_SIZE, true);\n\t}\n};\n\n/**\n */\nBitVector.prototype.clear$ = function () {\n\tthis._v.length = 0;\n\tthis._r.length = 0;\n\tthis._size = 0;\n\tthis._size1 = 0;\n};\n\n/**\n * @return {!number}\n */\nBitVector.prototype.size$ = function () {\n\treturn this._size;\n};\n\n/**\n * @param {!boolean} b\n * @return {!number}\n */\nBitVector.prototype.size$B = function (b) {\n\treturn (b ? this._size1 : this._size - this._size1);\n};\n\n/**\n * @param {!number} value\n */\nBitVector.prototype.set$I = function (value) {\n\tthis.set$IB(value, true);\n};\n\n/**\n * @param {!number} value\n * @param {!boolean} flag\n */\nBitVector.prototype.set$IB = function (value, flag) {\n\t/** @type {!number} */\n\tvar q;\n\t/** @type {!number} */\n\tvar r;\n\t/** @type {!number} */\n\tvar m;\n\tif (value >= this.size$()) {\n\t\tthis._size = (value + 1 | 0);\n\t}\n\tq = (value / BitVector.SMALL_BLOCK_SIZE | 0);\n\tr = (value % BitVector.SMALL_BLOCK_SIZE | 0);\n\twhile (q >= this._v.length) {\n\t\tthis._v.push(0);\n\t}\n\tm = 0x1 << r;\n\tif (flag) {\n\t\tthis._v[q] |= m;\n\t} else {\n\t\tthis._v[q] &= ~ m;\n\t}\n};\n\n/**\n * @param {!number} value\n * @return {!boolean}\n */\nBitVector.prototype.get$I = function (value) {\n\t/** @type {!number} */\n\tvar q;\n\t/** @type {!number} */\n\tvar r;\n\t/** @type {!number} */\n\tvar m;\n\tif (value >= this.size$()) {\n\t\tthrow new Error(\"BitVector.get() : range error\");\n\t}\n\tq = (value / BitVector.SMALL_BLOCK_SIZE | 0);\n\tr = (value % BitVector.SMALL_BLOCK_SIZE | 0);\n\tm = 0x1 << r;\n\treturn !! ((function (v) {\n\t\tif (! (v != null)) {\n\t\t\tdebugger;\n\t\t\tthrow new Error(\"[src/bit-vector.jsx:96:23] null access\\n        return (this._v[q] & m) as boolean;\\n                       ^\\n\");\n\t\t}\n\t\treturn v;\n\t}(this._v[q])) & m);\n};\n\n/**\n * @param {!number} i\n * @return {!number}\n */\nBitVector.prototype.rank$I = function (i) {\n\treturn this.rank$IB(i, true);\n};\n\n/**\n * @param {!number} i\n * @param {!boolean} b\n * @return {!number}\n */\nBitVector.prototype.rank$IB = function (i, b) {\n\t/** @type {!number} */\n\tvar q_large;\n\t/** @type {!number} */\n\tvar q_small;\n\t/** @type {!number} */\n\tvar r;\n\t/** @type {!number} */\n\tvar rank;\n\t/** @type {!number} */\n\tvar begin;\n\t/** @type {!number} */\n\tvar j;\n\tif (i > this.size$()) {\n\t\tthrow new Error(\"BitVector.rank() : range error\");\n\t}\n\tif (i === 0) {\n\t\treturn 0;\n\t}\n\ti--;\n\tq_large = (Math.floor(i / BitVector.LARGE_BLOCK_SIZE) | 0);\n\tq_small = (Math.floor(i / BitVector.SMALL_BLOCK_SIZE) | 0);\n\tr = (Math.floor(i % BitVector.SMALL_BLOCK_SIZE) | 0);\n\trank = ((function (v) {\n\t\tif (! (v != null)) {\n\t\t\tdebugger;\n\t\t\tthrow new Error(\"[src/bit-vector.jsx:118:32] null access\\n        var rank : int = this._r[q_large];\\n                                ^\\n\");\n\t\t}\n\t\treturn v;\n\t}(this._r[q_large])) | 0);\n\tif (! b) {\n\t\trank = q_large * BitVector.LARGE_BLOCK_SIZE - rank;\n\t}\n\tbegin = q_large * BitVector.BLOCK_RATE;\n\tfor (j = begin; j < q_small; j++) {\n\t\trank += this._rank32$IIB((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/bit-vector.jsx:126:40] null access\\n            rank += this._rank32(this._v[j], BitVector.SMALL_BLOCK_SIZE, b);\\n                                        ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(this._v[j])), BitVector.SMALL_BLOCK_SIZE, b);\n\t}\n\trank += this._rank32$IIB((function (v) {\n\t\tif (! (v != null)) {\n\t\t\tdebugger;\n\t\t\tthrow new Error(\"[src/bit-vector.jsx:128:36] null access\\n        rank += this._rank32(this._v[q_small], r + 1, b);\\n                                    ^\\n\");\n\t\t}\n\t\treturn v;\n\t}(this._v[q_small])), r + 1, b);\n\treturn rank;\n};\n\n/**\n * @param {!number} i\n * @return {!number}\n */\nBitVector.prototype.select$I = function (i) {\n\treturn this.select$IB(i, true);\n};\n\n/**\n * @param {!number} i\n * @param {!boolean} b\n * @return {!number}\n */\nBitVector.prototype.select$IB = function (i, b) {\n\t/** @type {!number} */\n\tvar left;\n\t/** @type {!number} */\n\tvar right;\n\t/** @type {!number} */\n\tvar pivot;\n\t/** @type {undefined|!number} */\n\tvar rank;\n\t/** @type {!number} */\n\tvar j;\n\tif (i >= this.size$B(b)) {\n\t\tthrow new Error(\"BitVector.select() : range error\");\n\t}\n\tleft = 0;\n\tright = this._r.length;\n\twhile (left < right) {\n\t\tpivot = Math.floor((left + right) / 2);\n\t\trank = this._r[pivot];\n\t\tif (! b) {\n\t\t\trank = pivot * BitVector.LARGE_BLOCK_SIZE - (function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/bit-vector.jsx:152:60] null access\\n                rank = pivot * BitVector.LARGE_BLOCK_SIZE - rank;\\n                                                            ^^^^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(rank));\n\t\t}\n\t\tif (i < (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/bit-vector.jsx:154:20] null access\\n            if (i < rank)\\n                    ^^^^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(rank))) {\n\t\t\tright = pivot;\n\t\t} else {\n\t\t\tleft = pivot + 1;\n\t\t}\n\t}\n\tright--;\n\tif (b) {\n\t\ti -= ((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/bit-vector.jsx:167:24] null access\\n            i -= this._r[right];\\n                        ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(this._r[right])) | 0);\n\t} else {\n\t\ti -= (right * BitVector.LARGE_BLOCK_SIZE - (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/bit-vector.jsx:171:61] null access\\n            i -= right * BitVector.LARGE_BLOCK_SIZE - this._r[right];\\n                                                             ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(this._r[right])) | 0);\n\t}\n\tj = right * BitVector.BLOCK_RATE;\n\twhile (1) {\n\t\trank = this._rank32$IIB((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/bit-vector.jsx:176:43] null access\\n            var rank = this._rank32(this._v[j], BitVector.SMALL_BLOCK_SIZE, b);\\n                                           ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(this._v[j])), BitVector.SMALL_BLOCK_SIZE, b);\n\t\tif (i < (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/bit-vector.jsx:177:20] null access\\n            if (i < rank)\\n                    ^^^^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(rank))) {\n\t\t\tbreak;\n\t\t}\n\t\tj++;\n\t\ti -= ((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/bit-vector.jsx:182:17] null access\\n            i -= rank;\\n                 ^^^^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(rank)) | 0);\n\t}\n\treturn (j * BitVector.SMALL_BLOCK_SIZE + this._select32$IIB((function (v) {\n\t\tif (! (v != null)) {\n\t\t\tdebugger;\n\t\t\tthrow new Error(\"[src/bit-vector.jsx:184:70] null access\\n        return j * BitVector.SMALL_BLOCK_SIZE + this._select32(this._v[j], i, b);\\n                                                                      ^\\n\");\n\t\t}\n\t\treturn v;\n\t}(this._v[j])), i, b) | 0);\n};\n\n/**\n * @param {!number} x\n * @param {!number} i\n * @param {!boolean} b\n * @return {!number}\n */\nBitVector.prototype._rank32$IIB = function (x, i, b) {\n\tif (! b) {\n\t\tx = ~ x;\n\t}\n\tx <<= BitVector.SMALL_BLOCK_SIZE - i;\n\tx = ((x & 0xaaaaaaaa) >>> 1) + (x & 0x55555555);\n\tx = ((x & 0xcccccccc) >>> 2) + (x & 0x33333333);\n\tx = ((x & 0xf0f0f0f0) >>> 4) + (x & 0x0f0f0f0f);\n\tx = ((x & 0xff00ff00) >>> 8) + (x & 0x00ff00ff);\n\tx = ((x & 0xffff0000) >>> 16) + (x & 0x0000ffff);\n\treturn x;\n};\n\n/**\n * @param {!number} x\n * @param {!number} i\n * @param {!boolean} b\n * @return {!number}\n */\nBitVector.prototype._select32$IIB = function (x, i, b) {\n\t/** @type {!number} */\n\tvar x1;\n\t/** @type {!number} */\n\tvar x2;\n\t/** @type {!number} */\n\tvar x3;\n\t/** @type {!number} */\n\tvar x4;\n\t/** @type {!number} */\n\tvar x5;\n\t/** @type {!number} */\n\tvar pos;\n\t/** @type {!number} */\n\tvar v5;\n\t/** @type {!number} */\n\tvar v4;\n\t/** @type {!number} */\n\tvar v3;\n\t/** @type {!number} */\n\tvar v2;\n\t/** @type {!number} */\n\tvar v1;\n\t/** @type {!number} */\n\tvar v0;\n\tif (! b) {\n\t\tx = ~ x;\n\t}\n\tx1 = ((x & 0xaaaaaaaa) >>> 1) + (x & 0x55555555);\n\tx2 = ((x1 & 0xcccccccc) >>> 2) + (x1 & 0x33333333);\n\tx3 = ((x2 & 0xf0f0f0f0) >>> 4) + (x2 & 0x0f0f0f0f);\n\tx4 = ((x3 & 0xff00ff00) >>> 8) + (x3 & 0x00ff00ff);\n\tx5 = ((x4 & 0xffff0000) >>> 16) + (x4 & 0x0000ffff);\n\ti++;\n\tpos = 0;\n\tv5 = x5 & 0xffffffff;\n\tif (i > v5) {\n\t\ti -= (v5 | 0);\n\t\tpos += 32;\n\t}\n\tv4 = x4 >>> pos & 0x0000ffff;\n\tif (i > v4) {\n\t\ti -= (v4 | 0);\n\t\tpos += 16;\n\t}\n\tv3 = x3 >>> pos & 0x000000ff;\n\tif (i > v3) {\n\t\ti -= (v3 | 0);\n\t\tpos += 8;\n\t}\n\tv2 = x2 >>> pos & 0x0000000f;\n\tif (i > v2) {\n\t\ti -= (v2 | 0);\n\t\tpos += 4;\n\t}\n\tv1 = x1 >>> pos & 0x00000003;\n\tif (i > v1) {\n\t\ti -= (v1 | 0);\n\t\tpos += 2;\n\t}\n\tv0 = x >>> pos & 0x00000001;\n\tif (i > v0) {\n\t\ti -= (v0 | 0);\n\t\tpos += 1;\n\t}\n\treturn (pos | 0);\n};\n\n/**\n * @return {!string}\n */\nBitVector.prototype.dump$ = function () {\n\t/** @type {Array.<undefined|!string>} */\n\tvar contents;\n\tcontents = [  ];\n\tcontents.push(Binary$dump32bitNumber$N(this._size));\n\tcontents.push(Binary$dump32bitNumberList$AN(this._v));\n\treturn contents.join('');\n};\n\n/**\n * @param {CompressionReport} report\n * @return {!string}\n */\nBitVector.prototype.dump$LCompressionReport$ = function (report) {\n\t/** @type {Array.<undefined|!string>} */\n\tvar contents;\n\tcontents = [  ];\n\tcontents.push(Binary$dump32bitNumber$N(this._size));\n\treport.add$II(2, 2);\n\tcontents.push(Binary$dump32bitNumberList$ANLCompressionReport$(this._v, report));\n\treturn contents.join('');\n};\n\n/**\n * @param {!string} data\n * @return {!number}\n */\nBitVector.prototype.load$S = function (data) {\n\treturn this.load$SI(data, 0);\n};\n\n/**\n * @param {!string} data\n * @param {!number} offset\n * @return {!number}\n */\nBitVector.prototype.load$SI = function (data, offset) {\n\t/** @type {LoadedNumberListResult} */\n\tvar result;\n\tthis.clear$();\n\tthis._size = (Binary$load32bitNumber$SI(data, offset) | 0);\n\tresult = Binary$load32bitNumberList$SI(data, offset + 2);\n\tthis._v = result.result;\n\tthis.build$();\n\treturn result.offset;\n};\n\n/**\n * class WaveletMatrix extends Object\n * @constructor\n */\nfunction WaveletMatrix() {\n}\n\n/**\n * @constructor\n */\nfunction WaveletMatrix$() {\n\tthis._size = 0;\n\tthis._range = ({  });\n\tthis._bv = [  ];\n\tthis._seps = [  ];\n\tthis._bitsize = 16;\n\tthis.clear$();\n};\n\nWaveletMatrix$.prototype = new WaveletMatrix;\n\n/**\n * @return {!number}\n */\nWaveletMatrix.prototype.bitsize$ = function () {\n\treturn this._bitsize;\n};\n\n/**\n * @param {!number} charCode\n */\nWaveletMatrix.prototype.setMaxCharCode$I = function (charCode) {\n\tthis._bitsize = (Math.ceil(Math.log(charCode) / Math.LN2) | 0);\n};\n\n/**\n */\nWaveletMatrix.prototype.clear$ = function () {\n\tthis._bv.length = 0;\n\tthis._seps.length = 0;\n\tthis._size = 0;\n};\n\n/**\n * @param {!string} v\n */\nWaveletMatrix.prototype.build$S = function (v) {\n\t/** @type {!number} */\n\tvar size;\n\t/** @type {!number} */\n\tvar bitsize;\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {!number} */\n\tvar depth;\n\t/** @type {Object.<string, undefined|!number>} */\n\tvar range_tmp;\n\t/** @type {!number} */\n\tvar code;\n\t/** @type {!boolean} */\n\tvar bit;\n\t/** @type {!number} */\n\tvar key;\n\t/** @type {Object.<string, undefined|!number>} */\n\tvar range_rev;\n\t/** @type {!string} */\n\tvar range_key;\n\t/** @type {!number} */\n\tvar value;\n\t/** @type {!number} */\n\tvar pos0;\n\t/** @type {undefined|!number} */\n\tvar pos1;\n\t/** @type {!string} */\n\tvar range_rev_key;\n\t/** @type {!number} */\n\tvar begin;\n\t/** @type {undefined|!number} */\n\tvar end;\n\t/** @type {!number} */\n\tvar num0;\n\t/** @type {!number} */\n\tvar num1;\n\tthis.clear$();\n\tsize = v.length;\n\tbitsize = this.bitsize$();\n\tfor (i = 0; i < bitsize; i++) {\n\t\tthis._bv.push(new BitVector$());\n\t\tthis._seps.push(0);\n\t}\n\tthis._size = (size | 0);\n\tfor (i = 0; i < size; i++) {\n\t\tthis._bv[0].set$IB(i, this._uint2bit$II(v.charCodeAt(i), 0));\n\t}\n\tthis._bv[0].build$();\n\tthis._seps[0] = this._bv[0].size$B(false);\n\tthis._range[0 + \"\"] = 0;\n\tthis._range[1 + \"\"] = this._seps[0];\n\tdepth = 1;\n\twhile (depth < bitsize) {\n\t\trange_tmp = WaveletMatrix$_shallow_copy$HI(this._range);\n\t\tfor (i = 0; i < size; i++) {\n\t\t\tcode = v.charCodeAt(i);\n\t\t\tbit = this._uint2bit$II(code, depth);\n\t\t\tkey = code >>> bitsize - depth;\n\t\t\tthis._bv[depth].set$IB((function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/wavelet-matrix.jsx:76:45] null access\\n                this._bv[depth].set(range_tmp[key as string], bit);\\n                                             ^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(range_tmp[key + \"\"])), bit);\n\t\t\trange_tmp[key + \"\"]++;\n\t\t}\n\t\tthis._bv[depth].build$();\n\t\tthis._seps[depth] = this._bv[depth].size$B(false);\n\t\trange_rev = ({  });\n\t\tfor (range_key in this._range) {\n\t\t\tvalue = (function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/wavelet-matrix.jsx:85:45] null access\\n                var value : int = this._range[range_key];\\n                                             ^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(this._range[range_key]));\n\t\t\tif (value != range_tmp[range_key]) {\n\t\t\t\trange_rev[value + \"\"] = range_key | 0;\n\t\t\t}\n\t\t}\n\t\tthis._range = ({  });\n\t\tpos0 = 0;\n\t\tpos1 = this._seps[depth];\n\t\tfor (range_rev_key in range_rev) {\n\t\t\tbegin = range_rev_key | 0;\n\t\t\tvalue = (function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/wavelet-matrix.jsx:97:37] null access\\n                var value = range_rev[range_rev_key];\\n                                     ^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(range_rev[range_rev_key]));\n\t\t\tend = range_tmp[value + \"\"];\n\t\t\tnum0 = this._bv[depth].rank$IB((function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/wavelet-matrix.jsx:99:49] null access\\n                var num0  = this._bv[depth].rank(end  , false) -\\n                                                 ^^^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(end)), false) - this._bv[depth].rank$IB(begin, false);\n\t\t\tnum1 = (function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/wavelet-matrix.jsx:101:28] null access\\n                var num1  = end - begin - num0;\\n                            ^^^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(end)) - begin - num0;\n\t\t\tif (num0 > 0) {\n\t\t\t\tthis._range[(value << 1) + \"\"] = (pos0 | 0);\n\t\t\t\tpos0 += num0;\n\t\t\t}\n\t\t\tif (num1 > 0) {\n\t\t\t\tthis._range[(value << 1) + 1 + \"\"] = pos1;\n\t\t\t\tpos1 += (num1 | 0);\n\t\t\t}\n\t\t}\n\t\tdepth++;\n\t}\n};\n\n/**\n * @return {!number}\n */\nWaveletMatrix.prototype.size$ = function () {\n\treturn this._size;\n};\n\n/**\n * @param {!number} c\n * @return {!number}\n */\nWaveletMatrix.prototype.size$I = function (c) {\n\treturn this.rank$II(this.size$(), c);\n};\n\n/**\n * @param {!number} i\n * @return {!number}\n */\nWaveletMatrix.prototype.get$I = function (i) {\n\t/** @type {!number} */\n\tvar value;\n\t/** @type {!number} */\n\tvar depth;\n\t/** @type {!boolean} */\n\tvar bit;\n\tif (i >= this.size$()) {\n\t\tthrow new Error(\"WaveletMatrix.get() : range error\");\n\t}\n\tvalue = 0;\n\tdepth = 0;\n\twhile (depth < this.bitsize$()) {\n\t\tbit = this._bv[depth].get$I(i);\n\t\ti = this._bv[depth].rank$IB(i, bit);\n\t\tvalue <<= 1;\n\t\tif (bit) {\n\t\t\ti += (function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/wavelet-matrix.jsx:142:31] null access\\n                i += this._seps[depth];\\n                               ^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(this._seps[depth]));\n\t\t\tvalue += 1;\n\t\t}\n\t\tdepth++;\n\t}\n\treturn (value | 0);\n};\n\n/**\n * @param {!number} i\n * @param {!number} c\n * @return {!number}\n */\nWaveletMatrix.prototype.rank$II = function (i, c) {\n\t/** @type {undefined|!number} */\n\tvar begin;\n\t/** @type {!number} */\n\tvar end;\n\t/** @type {!number} */\n\tvar depth;\n\t/** @type {!boolean} */\n\tvar bit;\n\tif (i > this.size$()) {\n\t\tthrow new Error(\"WaveletMatrix.rank(): range error\");\n\t}\n\tif (i === 0) {\n\t\treturn 0;\n\t}\n\tbegin = this._range[c + \"\"];\n\tif (begin == null) {\n\t\treturn 0;\n\t}\n\tend = i;\n\tdepth = 0;\n\twhile (depth < this.bitsize$()) {\n\t\tbit = this._uint2bit$II(c, depth);\n\t\tend = this._bv[depth].rank$IB(end, bit);\n\t\tif (bit) {\n\t\t\tend += (function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/wavelet-matrix.jsx:174:33] null access\\n                end += this._seps[depth];\\n                                 ^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(this._seps[depth]));\n\t\t}\n\t\tdepth++;\n\t}\n\treturn (end - (function (v) {\n\t\tif (! (v != null)) {\n\t\t\tdebugger;\n\t\t\tthrow new Error(\"[src/wavelet-matrix.jsx:178:21] null access\\n        return end - begin;\\n                     ^^^^^\\n\");\n\t\t}\n\t\treturn v;\n\t}(begin)) | 0);\n};\n\n/**\n * @param {!number} i\n * @param {!number} c\n * @return {!number}\n */\nWaveletMatrix.prototype.rank_less_than$II = function (i, c) {\n\t/** @type {!number} */\n\tvar begin;\n\t/** @type {!number} */\n\tvar end;\n\t/** @type {!number} */\n\tvar depth;\n\t/** @type {!number} */\n\tvar rlt;\n\t/** @type {!number} */\n\tvar rank0_begin;\n\t/** @type {!number} */\n\tvar rank0_end;\n\tif (i > this.size$()) {\n\t\tthrow new Error(\"WaveletMatrix.rank_less_than(): range error\");\n\t}\n\tif (i === 0) {\n\t\treturn 0;\n\t}\n\tbegin = 0;\n\tend = i;\n\tdepth = 0;\n\trlt = 0;\n\twhile (depth < this.bitsize$()) {\n\t\trank0_begin = this._bv[depth].rank$IB(begin, false);\n\t\trank0_end = this._bv[depth].rank$IB(end, false);\n\t\tif (this._uint2bit$II(c, depth)) {\n\t\t\trlt += rank0_end - rank0_begin;\n\t\t\tbegin += (function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/wavelet-matrix.jsx:203:36] null access\\n                begin += (this._seps[depth] - rank0_begin);\\n                                    ^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(this._seps[depth])) - rank0_begin;\n\t\t\tend += (function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/wavelet-matrix.jsx:204:36] null access\\n                end   += (this._seps[depth] - rank0_end);\\n                                    ^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(this._seps[depth])) - rank0_end;\n\t\t} else {\n\t\t\tbegin = rank0_begin;\n\t\t\tend = rank0_end;\n\t\t}\n\t\tdepth++;\n\t}\n\treturn (rlt | 0);\n};\n\n/**\n * @return {!string}\n */\nWaveletMatrix.prototype.dump$ = function () {\n\t/** @type {Array.<undefined|!string>} */\n\tvar contents;\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {Array.<undefined|!string>} */\n\tvar range_contents;\n\t/** @type {!number} */\n\tvar counter;\n\t/** @type {!string} */\n\tvar key;\n\tcontents = [ Binary$dump16bitNumber$I(this._bitsize), Binary$dump32bitNumber$N(this._size) ];\n\tfor (i = 0; i < this.bitsize$(); i++) {\n\t\tcontents.push(this._bv[i].dump$());\n\t}\n\tfor (i = 0; i < this.bitsize$(); i++) {\n\t\tcontents.push(Binary$dump32bitNumber$N((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/wavelet-matrix.jsx:228:59] null access\\n            contents.push(Binary.dump32bitNumber(this._seps[i]));\\n                                                           ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(this._seps[i]))));\n\t}\n\trange_contents = [  ];\n\tcounter = 0;\n\tfor (key in this._range) {\n\t\trange_contents.push(Binary$dump32bitNumber$N(key | 0));\n\t\trange_contents.push(Binary$dump32bitNumber$N((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/wavelet-matrix.jsx:235:66] null access\\n            range_contents.push(Binary.dump32bitNumber(this._range[key]));\\n                                                                  ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(this._range[key]))));\n\t\tcounter++;\n\t}\n\tcontents.push(Binary$dump32bitNumber$N(counter));\n\treturn contents.join('') + range_contents.join('');\n};\n\n/**\n * @param {CompressionReport} report\n * @return {!string}\n */\nWaveletMatrix.prototype.dump$LCompressionReport$ = function (report) {\n\t/** @type {Array.<undefined|!string>} */\n\tvar contents;\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {Array.<undefined|!string>} */\n\tvar range_contents;\n\t/** @type {!number} */\n\tvar counter;\n\t/** @type {!string} */\n\tvar key;\n\tcontents = [ Binary$dump16bitNumber$I(this._bitsize), Binary$dump32bitNumber$N(this._size) ];\n\treport.add$II(3, 3);\n\tfor (i = 0; i < this.bitsize$(); i++) {\n\t\tcontents.push(this._bv[i].dump$LCompressionReport$(report));\n\t}\n\tfor (i = 0; i < this.bitsize$(); i++) {\n\t\tcontents.push(Binary$dump32bitNumber$N((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/wavelet-matrix.jsx:255:59] null access\\n            contents.push(Binary.dump32bitNumber(this._seps[i]));\\n                                                           ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(this._seps[i]))));\n\t\treport.add$II(2, 2);\n\t}\n\trange_contents = [  ];\n\tcounter = 0;\n\tfor (key in this._range) {\n\t\trange_contents.push(Binary$dump32bitNumber$N(key | 0));\n\t\trange_contents.push(Binary$dump32bitNumber$N((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/wavelet-matrix.jsx:263:66] null access\\n            range_contents.push(Binary.dump32bitNumber(this._range[key]));\\n                                                                  ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(this._range[key]))));\n\t\treport.add$II(4, 4);\n\t\tcounter++;\n\t}\n\treport.add$II(2, 2);\n\tcontents.push(Binary$dump32bitNumber$N(counter));\n\treturn contents.join('') + range_contents.join('');\n};\n\n/**\n * @param {!string} data\n * @return {!number}\n */\nWaveletMatrix.prototype.load$S = function (data) {\n\treturn this.load$SI(data, 0);\n};\n\n/**\n * @param {!string} data\n * @param {!number} offset\n * @return {!number}\n */\nWaveletMatrix.prototype.load$SI = function (data, offset) {\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {BitVector} */\n\tvar bit_vector;\n\t/** @type {!number} */\n\tvar sep;\n\t/** @type {!number} */\n\tvar range_size;\n\t/** @type {!number} */\n\tvar key;\n\t/** @type {!number} */\n\tvar value;\n\tthis.clear$();\n\tthis._bitsize = Binary$load16bitNumber$SI(data, offset++);\n\tthis._size = (Binary$load32bitNumber$SI(data, offset) | 0);\n\toffset += 2;\n\tfor (i = 0; i < this.bitsize$(); i++) {\n\t\tbit_vector = new BitVector$();\n\t\toffset = bit_vector.load$SI(data, offset);\n\t\tthis._bv.push(bit_vector);\n\t}\n\tsep = 0;\n\tfor (i = 0; i < this.bitsize$(); (i++, offset += 2)) {\n\t\tthis._seps.push(Binary$load32bitNumber$SI(data, offset));\n\t}\n\trange_size = Binary$load32bitNumber$SI(data, offset);\n\toffset += 2;\n\tfor (i = 0; i < range_size; (i++, offset += 4)) {\n\t\tkey = Binary$load32bitNumber$SI(data, offset);\n\t\tvalue = Binary$load32bitNumber$SI(data, offset + 2);\n\t\tthis._range[key + \"\"] = (value | 0);\n\t}\n\treturn offset;\n};\n\n/**\n * @param {Object.<string, undefined|!number>} input\n * @return {Object.<string, undefined|!number>}\n */\nWaveletMatrix._shallow_copy$HI = function (input) {\n\t/** @type {Object.<string, undefined|!number>} */\n\tvar result;\n\t/** @type {!string} */\n\tvar key;\n\tresult = ({  });\n\tfor (key in input) {\n\t\tresult[key] = input[key];\n\t}\n\treturn result;\n};\n\nvar WaveletMatrix$_shallow_copy$HI = WaveletMatrix._shallow_copy$HI;\n\n/**\n * @param {!number} c\n * @param {!number} i\n * @return {!boolean}\n */\nWaveletMatrix.prototype._uint2bit$II = function (c, i) {\n\treturn (c >>> this._bitsize - 1 - i & 0x1) === 0x1;\n};\n\n/**\n * class BurrowsWheelerTransform extends Object\n * @constructor\n */\nfunction BurrowsWheelerTransform() {\n}\n\n/**\n * @constructor\n */\nfunction BurrowsWheelerTransform$() {\n\tthis._str = \"\";\n\tthis._size = 0;\n\tthis._head = 0;\n\tthis._suffixarray = [  ];\n};\n\nBurrowsWheelerTransform$.prototype = new BurrowsWheelerTransform;\n\n/**\n * @return {!number}\n */\nBurrowsWheelerTransform.prototype.size$ = function () {\n\treturn this._size;\n};\n\n/**\n * @return {!number}\n */\nBurrowsWheelerTransform.prototype.head$ = function () {\n\treturn this._head;\n};\n\n/**\n */\nBurrowsWheelerTransform.prototype.clear$ = function () {\n\tthis._str = \"\";\n\tthis._size = 0;\n\tthis._head = 0;\n\tthis._suffixarray.length = 0;\n};\n\n/**\n * @param {!string} str\n */\nBurrowsWheelerTransform.prototype.build$S = function (str) {\n\tthis._str = str;\n\tthis._size = this._str.length;\n\tthis._suffixarray = SAIS$make$S(str);\n\tthis._head = (this._suffixarray.indexOf(0) | 0);\n};\n\n/**\n * @param {!number} i\n * @return {!string}\n */\nBurrowsWheelerTransform.prototype.get$I = function (i) {\n\t/** @type {!number} */\n\tvar size;\n\t/** @type {!number} */\n\tvar index;\n\tsize = this.size$();\n\tif (i >= size) {\n\t\tthrow new Error(\"BurrowsWheelerTransform.get() : range error\");\n\t}\n\tindex = ((function (v) {\n\t\tif (! (v != null)) {\n\t\t\tdebugger;\n\t\t\tthrow new Error(\"[src/burrows-wheeler-transform.jsx:52:38] null access\\n        var index = (this._suffixarray[i] + size - 1) % size;\\n                                      ^\\n\");\n\t\t}\n\t\treturn v;\n\t}(this._suffixarray[i])) + size - 1) % size;\n\treturn this._str.charAt(index);\n};\n\n/**\n * @return {!string}\n */\nBurrowsWheelerTransform.prototype.get$ = function () {\n\t/** @type {Array.<undefined|!string>} */\n\tvar str;\n\t/** @type {!number} */\n\tvar size;\n\t/** @type {!number} */\n\tvar i;\n\tstr = [  ];\n\tsize = this.size$();\n\tfor (i = 0; i < size; i++) {\n\t\tstr.push(this.get$I(i));\n\t}\n\treturn str.join(\"\");\n};\n\n/**\n * @param {!string} replace\n * @return {!string}\n */\nBurrowsWheelerTransform.prototype.get$S = function (replace) {\n\t/** @type {!string} */\n\tvar result;\n\tresult = this.get$();\n\treturn result.replace(BurrowsWheelerTransform.END_MARKER, replace);\n};\n\n/**\n * class OArray extends Object\n * @constructor\n */\nfunction OArray() {\n}\n\n/**\n * @constructor\n * @param {Array.<undefined|!number>} array\n */\nfunction OArray$AI(array) {\n\tthis.array = array;\n\tthis.offset = 0;\n};\n\nOArray$AI.prototype = new OArray;\n\n/**\n * @constructor\n * @param {Array.<undefined|!number>} array\n * @param {!number} offset\n */\nfunction OArray$AII(array, offset) {\n\tthis.array = array;\n\tthis.offset = offset;\n};\n\nOArray$AII.prototype = new OArray;\n\n/**\n * @param {!number} index\n * @return {!number}\n */\nOArray.prototype.get$I = function (index) {\n\treturn (function (v) {\n\t\tif (! (v != null)) {\n\t\t\tdebugger;\n\t\t\tthrow new Error(\"[src/sais.jsx:27:25] null access\\n        return this.array[index + this.offset];\\n                         ^\\n\");\n\t\t}\n\t\treturn v;\n\t}(this.array[index + this.offset]));\n};\n\n/**\n * @param {!number} index\n * @param {!number} value\n */\nOArray.prototype.set$II = function (index, value) {\n\tthis.array[index + this.offset] = value;\n};\n\n/**\n * @param {!number} index\n * @return {!boolean}\n */\nOArray.prototype.isS$I = function (index) {\n\treturn (function (v) {\n\t\tif (! (v != null)) {\n\t\t\tdebugger;\n\t\t\tthrow new Error(\"[src/sais.jsx:37:25] null access\\n        return this.array[index + this.offset] < this.array[index + this.offset + 1];\\n                         ^\\n\");\n\t\t}\n\t\treturn v;\n\t}(this.array[index + this.offset])) < (function (v) {\n\t\tif (! (v != null)) {\n\t\t\tdebugger;\n\t\t\tthrow new Error(\"[src/sais.jsx:37:59] null access\\n        return this.array[index + this.offset] < this.array[index + this.offset + 1];\\n                                                           ^\\n\");\n\t\t}\n\t\treturn v;\n\t}(this.array[index + this.offset + 1]));\n};\n\n/**\n * @param {!number} index1\n * @param {!number} index2\n * @return {!boolean}\n */\nOArray.prototype.compare$II = function (index1, index2) {\n\treturn this.array[index1 + this.offset] == this.array[index2 + this.offset];\n};\n\n/**\n * class SAIS extends Object\n * @constructor\n */\nfunction SAIS() {\n}\n\n/**\n * @constructor\n */\nfunction SAIS$() {\n};\n\nSAIS$.prototype = new SAIS;\n\n/**\n * @param {BitVector} t\n * @param {!number} i\n * @return {!boolean}\n */\nSAIS._isLMS$LBitVector$I = function (t, i) {\n\treturn i > 0 && t.get$I(i) && ! t.get$I(i - 1);\n};\n\nvar SAIS$_isLMS$LBitVector$I = SAIS._isLMS$LBitVector$I;\n\n/**\n * @param {OArray} s\n * @param {Array.<undefined|!number>} bkt\n * @param {!number} n\n * @param {!number} K\n * @param {!boolean} end\n */\nSAIS._getBuckets$LOArray$AIIIB = function (s, bkt, n, K, end) {\n\t/** @type {!number} */\n\tvar sum;\n\t/** @type {!number} */\n\tvar i;\n\tsum = 0;\n\tfor (i = 0; i <= K; i++) {\n\t\tbkt[i] = 0;\n\t}\n\tfor (i = 0; i < n; i++) {\n\t\tbkt[s.get$I(i)]++;\n\t}\n\tfor (i = 0; i <= K; i++) {\n\t\tsum += (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/sais.jsx:68:22] null access\\n            sum += bkt[i];\\n                      ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(bkt[i]));\n\t\tbkt[i] = ((end ? sum : sum - (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/sais.jsx:69:42] null access\\n            bkt[i] = end ? sum : sum - bkt[i];\\n                                          ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(bkt[i]))) | 0);\n\t}\n};\n\nvar SAIS$_getBuckets$LOArray$AIIIB = SAIS._getBuckets$LOArray$AIIIB;\n\n/**\n * @param {BitVector} t\n * @param {Array.<undefined|!number>} SA\n * @param {OArray} s\n * @param {Array.<undefined|!number>} bkt\n * @param {!number} n\n * @param {!number} K\n * @param {!boolean} end\n */\nSAIS._induceSAl$LBitVector$AILOArray$AIIIB = function (t, SA, s, bkt, n, K, end) {\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {!number} */\n\tvar j;\n\tSAIS$_getBuckets$LOArray$AIIIB(s, bkt, n, K, end);\n\tfor (i = 0; i < n; i++) {\n\t\tj = (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/sais.jsx:79:22] null access\\n            var j = SA[i] - 1;\\n                      ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(SA[i])) - 1;\n\t\tif (j >= 0 && ! t.get$I(j)) {\n\t\t\tSA[bkt[s.get$I(j)]++] = (j | 0);\n\t\t}\n\t}\n};\n\nvar SAIS$_induceSAl$LBitVector$AILOArray$AIIIB = SAIS._induceSAl$LBitVector$AILOArray$AIIIB;\n\n/**\n * @param {BitVector} t\n * @param {Array.<undefined|!number>} SA\n * @param {OArray} s\n * @param {Array.<undefined|!number>} bkt\n * @param {!number} n\n * @param {!number} K\n * @param {!boolean} end\n */\nSAIS._induceSAs$LBitVector$AILOArray$AIIIB = function (t, SA, s, bkt, n, K, end) {\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {!number} */\n\tvar j;\n\tSAIS$_getBuckets$LOArray$AIIIB(s, bkt, n, K, end);\n\tfor (i = n - 1; i >= 0; i--) {\n\t\tj = (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/sais.jsx:93:22] null access\\n            var j = SA[i] - 1;\\n                      ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(SA[i])) - 1;\n\t\tif (j >= 0 && t.get$I(j)) {\n\t\t\tSA[-- bkt[s.get$I(j)]] = (j | 0);\n\t\t}\n\t}\n};\n\nvar SAIS$_induceSAs$LBitVector$AILOArray$AIIIB = SAIS._induceSAs$LBitVector$AILOArray$AIIIB;\n\n/**\n * @param {!string} source\n * @return {Array.<undefined|!number>}\n */\nSAIS.make$S = function (source) {\n\t/** @type {Array.<undefined|!number>} */\n\tvar charCodes;\n\t/** @type {!number} */\n\tvar maxCode;\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {!number} */\n\tvar code;\n\t/** @type {Array.<undefined|!number>} */\n\tvar SA;\n\t/** @type {OArray} */\n\tvar s;\n\tcharCodes = [  ];\n\tcharCodes.length = source.length;\n\tmaxCode = 0;\n\tfor (i = 0; i < source.length; i++) {\n\t\tcode = source.charCodeAt(i);\n\t\tcharCodes[i] = (code | 0);\n\t\tmaxCode = (code > maxCode ? code : maxCode);\n\t}\n\tSA = [  ];\n\tSA.length = source.length;\n\ts = new OArray$AI(charCodes);\n\tSAIS$_make$LOArray$AIII(s, SA, source.length, maxCode);\n\treturn SA;\n};\n\nvar SAIS$make$S = SAIS.make$S;\n\n/**\n * @param {OArray} s\n * @param {Array.<undefined|!number>} SA\n * @param {!number} n\n * @param {!number} K\n */\nSAIS._make$LOArray$AIII = function (s, SA, n, K) {\n\t/** @type {BitVector} */\n\tvar t;\n\t/** @type {!number} */\n\tvar i;\n\t/** @type {Array.<undefined|!number>} */\n\tvar bkt;\n\t/** @type {!number} */\n\tvar n1;\n\t/** @type {!number} */\n\tvar name;\n\t/** @type {!number} */\n\tvar prev;\n\t/** @type {undefined|!number} */\n\tvar pos;\n\t/** @type {!boolean} */\n\tvar diff;\n\t/** @type {!number} */\n\tvar d;\n\t/** @type {!number} */\n\tvar j;\n\t/** @type {Array.<undefined|!number>} */\n\tvar SA1;\n\t/** @type {OArray} */\n\tvar s1;\n\tt = new BitVector$();\n\tt.set$IB(n - 2, false);\n\tt.set$IB(n - 1, true);\n\tfor (i = n - 3; i >= 0; i--) {\n\t\tt.set$IB(i, s.isS$I(i) || s.compare$II(i, i + 1) && t.get$I(i + 1));\n\t}\n\tbkt = [  ];\n\tbkt.length = K + 1;\n\tSAIS$_getBuckets$LOArray$AIIIB(s, bkt, n, K, true);\n\tfor (i = 0; i < n; i++) {\n\t\tSA[i] = (- 1 | 0);\n\t}\n\tfor (i = 1; i < n; i++) {\n\t\tif (SAIS$_isLMS$LBitVector$I(t, i)) {\n\t\t\tSA[-- bkt[s.get$I(i)]] = (i | 0);\n\t\t}\n\t}\n\tSAIS$_induceSAl$LBitVector$AILOArray$AIIIB(t, SA, s, bkt, n, K, false);\n\tSAIS$_induceSAs$LBitVector$AILOArray$AIIIB(t, SA, s, bkt, n, K, true);\n\tn1 = 0;\n\tfor (i = 0; i < n; i++) {\n\t\tif (SAIS$_isLMS$LBitVector$I(t, (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/sais.jsx:157:33] null access\\n            if (SAIS._isLMS(t, SA[i]))\\n                                 ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(SA[i])))) {\n\t\t\tSA[n1++] = SA[i];\n\t\t}\n\t}\n\tfor (i = n1; i < n; i++) {\n\t\tSA[i] = (- 1 | 0);\n\t}\n\tname = 0;\n\tprev = - 1;\n\tfor (i = 0; i < n1; i++) {\n\t\tpos = SA[i];\n\t\tdiff = false;\n\t\tfor (d = 0; d < n; d++) {\n\t\t\tif (prev === - 1 || ! s.compare$II((function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/sais.jsx:176:45] null access\\n                if (prev == -1 || !s.compare(pos + d, prev + d) || t.get(pos + d) != t.get(prev + d))\\n                                             ^^^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(pos)) + d, prev + d) || t.get$I((function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/sais.jsx:176:73] null access\\n                if (prev == -1 || !s.compare(pos + d, prev + d) || t.get(pos + d) != t.get(prev + d))\\n                                                                         ^^^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(pos)) + d) !== t.get$I(prev + d)) {\n\t\t\t\tdiff = true;\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\tif (d > 0 && (SAIS$_isLMS$LBitVector$I(t, (function (v) {\n\t\t\t\t\tif (! (v != null)) {\n\t\t\t\t\t\tdebugger;\n\t\t\t\t\t\tthrow new Error(\"[src/sais.jsx:181:50] null access\\n                else if (d > 0 && (SAIS._isLMS(t, pos+d) || SAIS._isLMS(t, prev + d)))\\n                                                  ^^^\\n\");\n\t\t\t\t\t}\n\t\t\t\t\treturn v;\n\t\t\t\t}(pos)) + d) || SAIS$_isLMS$LBitVector$I(t, prev + d))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (diff) {\n\t\t\tname++;\n\t\t\tprev = (function (v) {\n\t\t\t\tif (! (v != null)) {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new Error(\"[src/sais.jsx:189:23] null access\\n                prev = pos;\\n                       ^^^\\n\");\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}(pos));\n\t\t}\n\t\tpos = (((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/sais.jsx:191:19] null access\\n            pos = (pos % 2 == 0) ? pos / 2 : (pos - 1) / 2;\\n                   ^^^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(pos)) % 2 === 0 ? (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/sais.jsx:191:35] null access\\n            pos = (pos % 2 == 0) ? pos / 2 : (pos - 1) / 2;\\n                                   ^^^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(pos)) / 2 : ((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/sais.jsx:191:46] null access\\n            pos = (pos % 2 == 0) ? pos / 2 : (pos - 1) / 2;\\n                                              ^^^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(pos)) - 1) / 2) | 0);\n\t\tSA[n1 + (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/sais.jsx:192:20] null access\\n            SA[n1 + pos] = name - 1;\\n                    ^^^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(pos))] = (name - 1 | 0);\n\t}\n\tfor ((i = n - 1, j = n - 1); i >= n1; i--) {\n\t\tif ((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/sais.jsx:196:18] null access\\n            if (SA[i] >= 0)\\n                  ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(SA[i])) >= 0) {\n\t\t\tSA[j--] = SA[i];\n\t\t}\n\t}\n\tSA1 = SA;\n\ts1 = new OArray$AII(SA, n - n1);\n\tif (name < n1) {\n\t\tSAIS$_make$LOArray$AIII(s1, SA1, n1, name - 1);\n\t} else {\n\t\tfor (i = 0; i < n1; i++) {\n\t\t\tSA1[s1.get$I(i)] = (i | 0);\n\t\t}\n\t}\n\tbkt = [  ];\n\tbkt.length = K + 1;\n\tSAIS$_getBuckets$LOArray$AIIIB(s, bkt, n, K, true);\n\tfor ((i = 1, j = 0); i < n; i++) {\n\t\tif (SAIS$_isLMS$LBitVector$I(t, i)) {\n\t\t\ts1.set$II(j++, i);\n\t\t}\n\t}\n\tfor (i = 0; i < n1; i++) {\n\t\tSA1[i] = s1.get$I((function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/sais.jsx:235:31] null access\\n            SA1[i] = s1.get(SA1[i]); // get index in s\\n                               ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(SA1[i])));\n\t}\n\tfor (i = n1; i < n; i++) {\n\t\tSA[i] = (- 1 | 0);\n\t}\n\tfor (i = n1 - 1; i >= 0; i--) {\n\t\tj = (function (v) {\n\t\t\tif (! (v != null)) {\n\t\t\t\tdebugger;\n\t\t\t\tthrow new Error(\"[src/sais.jsx:243:18] null access\\n            j = SA[i];\\n                  ^\\n\");\n\t\t\t}\n\t\t\treturn v;\n\t\t}(SA[i]));\n\t\tSA[i] = (- 1 | 0);\n\t\tSA[-- bkt[s.get$I(j)]] = (j | 0);\n\t}\n\tSAIS$_induceSAl$LBitVector$AILOArray$AIIIB(t, SA, s, bkt, n, K, false);\n\tSAIS$_induceSAs$LBitVector$AILOArray$AIIIB(t, SA, s, bkt, n, K, true);\n};\n\nvar SAIS$_make$LOArray$AIII = SAIS._make$LOArray$AIII;\n\nOktaviaSearch._stemmer = null;\nOktaviaSearch._instance = null;\n$__jsx_lazy_init(Oktavia, \"eof\", function () {\n\treturn String.fromCharCode(0);\n});\n$__jsx_lazy_init(Oktavia, \"eob\", function () {\n\treturn String.fromCharCode(1);\n});\n$__jsx_lazy_init(Oktavia, \"unknown\", function () {\n\treturn String.fromCharCode(3);\n});\nBinary._base64EncodeChars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n$__jsx_lazy_init(Binary, \"_base64DecodeChars\", function () {\n\treturn [ - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, 62, - 1, - 1, - 1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, - 1, - 1, - 1, - 1, - 1, - 1, - 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, - 1, - 1, - 1, - 1, - 1, - 1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, - 1, - 1, - 1, - 1, - 1 ];\n});\n$__jsx_lazy_init(Style, \"console\", function () {\n\treturn ({ 'title': [ '\\x1B[32m\\x1b[4m', '\\x1B[39m\\x1b[0m' ], 'url': [ '\\x1B[34m', '\\x1B[39m' ], 'hit': [ '\\x1B[4m', '\\x1B[0m' ], 'del': [ '\\x1B[9m', '\\x1B[0m' ], 'summary': [ '\\x1B[90m', '\\x1B[39m' ] });\n});\n$__jsx_lazy_init(Style, \"html\", function () {\n\treturn ({ 'title': [ '<span class=\"title\">', '</span>' ], 'url': [ '<span class=\"url\">', '</span>' ], 'hit': [ '<span class=\"hit\">', '</span>' ], 'del': [ '<del>', '</del>' ], 'summary': [ '<span class=\"reuslt\">', '</span>' ] });\n});\n$__jsx_lazy_init(Style, \"ignore\", function () {\n\treturn ({ 'tilte': [ '', '' ], 'url': [ '', '' ], 'hit': [ '', '' ], 'del': [ '', '' ], 'summary': [ '', '' ] });\n});\nEnglishStemmer.serialVersionUID = 1;\n$__jsx_lazy_init(EnglishStemmer, \"methodObject\", function () {\n\treturn new EnglishStemmer$();\n});\n$__jsx_lazy_init(EnglishStemmer, \"a_0\", function () {\n\treturn [ new Among$SII(\"arsen\", - 1, - 1), new Among$SII(\"commun\", - 1, - 1), new Among$SII(\"gener\", - 1, - 1) ];\n});\n$__jsx_lazy_init(EnglishStemmer, \"a_1\", function () {\n\treturn [ new Among$SII(\"'\", - 1, 1), new Among$SII(\"'s'\", 0, 1), new Among$SII(\"'s\", - 1, 1) ];\n});\n$__jsx_lazy_init(EnglishStemmer, \"a_2\", function () {\n\treturn [ new Among$SII(\"ied\", - 1, 2), new Among$SII(\"s\", - 1, 3), new Among$SII(\"ies\", 1, 2), new Among$SII(\"sses\", 1, 1), new Among$SII(\"ss\", 1, - 1), new Among$SII(\"us\", 1, - 1) ];\n});\n$__jsx_lazy_init(EnglishStemmer, \"a_3\", function () {\n\treturn [ new Among$SII(\"\", - 1, 3), new Among$SII(\"bb\", 0, 2), new Among$SII(\"dd\", 0, 2), new Among$SII(\"ff\", 0, 2), new Among$SII(\"gg\", 0, 2), new Among$SII(\"bl\", 0, 1), new Among$SII(\"mm\", 0, 2), new Among$SII(\"nn\", 0, 2), new Among$SII(\"pp\", 0, 2), new Among$SII(\"rr\", 0, 2), new Among$SII(\"at\", 0, 1), new Among$SII(\"tt\", 0, 2), new Among$SII(\"iz\", 0, 1) ];\n});\n$__jsx_lazy_init(EnglishStemmer, \"a_4\", function () {\n\treturn [ new Among$SII(\"ed\", - 1, 2), new Among$SII(\"eed\", 0, 1), new Among$SII(\"ing\", - 1, 2), new Among$SII(\"edly\", - 1, 2), new Among$SII(\"eedly\", 3, 1), new Among$SII(\"ingly\", - 1, 2) ];\n});\n$__jsx_lazy_init(EnglishStemmer, \"a_5\", function () {\n\treturn [ new Among$SII(\"anci\", - 1, 3), new Among$SII(\"enci\", - 1, 2), new Among$SII(\"ogi\", - 1, 13), new Among$SII(\"li\", - 1, 16), new Among$SII(\"bli\", 3, 12), new Among$SII(\"abli\", 4, 4), new Among$SII(\"alli\", 3, 8), new Among$SII(\"fulli\", 3, 14), new Among$SII(\"lessli\", 3, 15), new Among$SII(\"ousli\", 3, 10), new Among$SII(\"entli\", 3, 5), new Among$SII(\"aliti\", - 1, 8), new Among$SII(\"biliti\", - 1, 12), new Among$SII(\"iviti\", - 1, 11), new Among$SII(\"tional\", - 1, 1), new Among$SII(\"ational\", 14, 7), new Among$SII(\"alism\", - 1, 8), new Among$SII(\"ation\", - 1, 7), new Among$SII(\"ization\", 17, 6), new Among$SII(\"izer\", - 1, 6), new Among$SII(\"ator\", - 1, 7), new Among$SII(\"iveness\", - 1, 11), new Among$SII(\"fulness\", - 1, 9), new Among$SII(\"ousness\", - 1, 10) ];\n});\n$__jsx_lazy_init(EnglishStemmer, \"a_6\", function () {\n\treturn [ new Among$SII(\"icate\", - 1, 4), new Among$SII(\"ative\", - 1, 6), new Among$SII(\"alize\", - 1, 3), new Among$SII(\"iciti\", - 1, 4), new Among$SII(\"ical\", - 1, 4), new Among$SII(\"tional\", - 1, 1), new Among$SII(\"ational\", 5, 2), new Among$SII(\"ful\", - 1, 5), new Among$SII(\"ness\", - 1, 5) ];\n});\n$__jsx_lazy_init(EnglishStemmer, \"a_7\", function () {\n\treturn [ new Among$SII(\"ic\", - 1, 1), new Among$SII(\"ance\", - 1, 1), new Among$SII(\"ence\", - 1, 1), new Among$SII(\"able\", - 1, 1), new Among$SII(\"ible\", - 1, 1), new Among$SII(\"ate\", - 1, 1), new Among$SII(\"ive\", - 1, 1), new Among$SII(\"ize\", - 1, 1), new Among$SII(\"iti\", - 1, 1), new Among$SII(\"al\", - 1, 1), new Among$SII(\"ism\", - 1, 1), new Among$SII(\"ion\", - 1, 2), new Among$SII(\"er\", - 1, 1), new Among$SII(\"ous\", - 1, 1), new Among$SII(\"ant\", - 1, 1), new Among$SII(\"ent\", - 1, 1), new Among$SII(\"ment\", 15, 1), new Among$SII(\"ement\", 16, 1) ];\n});\n$__jsx_lazy_init(EnglishStemmer, \"a_8\", function () {\n\treturn [ new Among$SII(\"e\", - 1, 1), new Among$SII(\"l\", - 1, 2) ];\n});\n$__jsx_lazy_init(EnglishStemmer, \"a_9\", function () {\n\treturn [ new Among$SII(\"succeed\", - 1, - 1), new Among$SII(\"proceed\", - 1, - 1), new Among$SII(\"exceed\", - 1, - 1), new Among$SII(\"canning\", - 1, - 1), new Among$SII(\"inning\", - 1, - 1), new Among$SII(\"earring\", - 1, - 1), new Among$SII(\"herring\", - 1, - 1), new Among$SII(\"outing\", - 1, - 1) ];\n});\n$__jsx_lazy_init(EnglishStemmer, \"a_10\", function () {\n\treturn [ new Among$SII(\"andes\", - 1, - 1), new Among$SII(\"atlas\", - 1, - 1), new Among$SII(\"bias\", - 1, - 1), new Among$SII(\"cosmos\", - 1, - 1), new Among$SII(\"dying\", - 1, 3), new Among$SII(\"early\", - 1, 9), new Among$SII(\"gently\", - 1, 7), new Among$SII(\"howe\", - 1, - 1), new Among$SII(\"idly\", - 1, 6), new Among$SII(\"lying\", - 1, 4), new Among$SII(\"news\", - 1, - 1), new Among$SII(\"only\", - 1, 10), new Among$SII(\"singly\", - 1, 11), new Among$SII(\"skies\", - 1, 2), new Among$SII(\"skis\", - 1, 1), new Among$SII(\"sky\", - 1, - 1), new Among$SII(\"tying\", - 1, 5), new Among$SII(\"ugly\", - 1, 8) ];\n});\n$__jsx_lazy_init(EnglishStemmer, \"g_v\", function () {\n\treturn [ 17, 65, 16, 1 ];\n});\n$__jsx_lazy_init(EnglishStemmer, \"g_v_WXY\", function () {\n\treturn [ 1, 17, 65, 208, 1 ];\n});\n$__jsx_lazy_init(EnglishStemmer, \"g_valid_LI\", function () {\n\treturn [ 55, 141, 2 ];\n});\n$__jsx_lazy_init(_Common, \"buffers\", function () {\n\treturn [ \"comment\", \"sgmlDecl\", \"textNode\", \"tagName\", \"doctype\", \"procInstName\", \"procInstBody\", \"entity\", \"attribName\", \"attribValue\", \"cdata\", \"script\" ];\n});\n$__jsx_lazy_init(_Common, \"EVENTS\", function () {\n\treturn [ \"text\", \"processinginstruction\", \"sgmldeclaration\", \"doctype\", \"comment\", \"attribute\", \"opentag\", \"closetag\", \"opencdata\", \"cdata\", \"clo_State.CDATA\", \"error\", \"end\", \"ready\", \"script\", \"opennamespace\", \"closenamespace\" ];\n});\n$__jsx_lazy_init(_Common, \"MAX_BUFFER_LENGTH\", function () {\n\treturn 64 * 1024;\n});\n_State.BEGIN = 1;\n_State.TEXT = 2;\n_State.TEXT_ENTITY = 3;\n_State.OPEN_WAKA = 4;\n_State.SGML_DECL = 5;\n_State.SGML_DECL_QUOTED = 6;\n_State.DOCTYPE = 7;\n_State.DOCTYPE_QUOTED = 8;\n_State.DOCTYPE_DTD = 9;\n_State.DOCTYPE_DTD_QUOTED = 10;\n_State.COMMENT_STARTING = 11;\n_State.COMMENT = 12;\n_State.COMMENT_ENDING = 13;\n_State.COMMENT_ENDED = 14;\n_State.CDATA = 15;\n_State.CDATA_ENDING = 16;\n_State.CDATA_ENDING_2 = 17;\n_State.PROC_INST = 18;\n_State.PROC_INST_BODY = 19;\n_State.PROC_INST_ENDING = 20;\n_State.OPEN_TAG = 21;\n_State.OPEN_TAG_SLASH = 22;\n_State.ATTRIB = 23;\n_State.ATTRIB_NAME = 24;\n_State.ATTRIB_NAME_SAW_WHITE = 25;\n_State.ATTRIB_VALUE = 26;\n_State.ATTRIB_VALUE_QUOTED = 27;\n_State.ATTRIB_VALUE_UNQUOTED = 28;\n_State.ATTRIB_VALUE_ENTITY_Q = 29;\n_State.ATTRIB_VALUE_ENTITY_U = 30;\n_State.CLOSE_TAG = 31;\n_State.CLOSE_TAG_SAW_WHITE = 32;\n_State.SCRIPT = 33;\n_State.SCRIPT_ENDING = 34;\n$__jsx_lazy_init(_Entities, \"_entities\", function () {\n\treturn ({ \"amp\": \"&\", \"gt\": \">\", \"lt\": \"<\", \"quot\": \"\\\"\", \"apos\": \"'\", \"AElig\": 198, \"Aacute\": 193, \"Acirc\": 194, \"Agrave\": 192, \"Aring\": 197, \"Atilde\": 195, \"Auml\": 196, \"Ccedil\": 199, \"ETH\": 208, \"Eacute\": 201, \"Ecirc\": 202, \"Egrave\": 200, \"Euml\": 203, \"Iacute\": 205, \"Icirc\": 206, \"Igrave\": 204, \"Iuml\": 207, \"Ntilde\": 209, \"Oacute\": 211, \"Ocirc\": 212, \"Ograve\": 210, \"Oslash\": 216, \"Otilde\": 213, \"Ouml\": 214, \"THORN\": 222, \"Uacute\": 218, \"Ucirc\": 219, \"Ugrave\": 217, \"Uuml\": 220, \"Yacute\": 221, \"aacute\": 225, \"acirc\": 226, \"aelig\": 230, \"agrave\": 224, \"aring\": 229, \"atilde\": 227, \"auml\": 228, \"ccedil\": 231, \"eacute\": 233, \"ecirc\": 234, \"egrave\": 232, \"eth\": 240, \"euml\": 235, \"iacute\": 237, \"icirc\": 238, \"igrave\": 236, \"iuml\": 239, \"ntilde\": 241, \"oacute\": 243, \"ocirc\": 244, \"ograve\": 242, \"oslash\": 248, \"otilde\": 245, \"ouml\": 246, \"szlig\": 223, \"thorn\": 254, \"uacute\": 250, \"ucirc\": 251, \"ugrave\": 249, \"uuml\": 252, \"yacute\": 253, \"yuml\": 255, \"copy\": 169, \"reg\": 174, \"nbsp\": 160, \"iexcl\": 161, \"cent\": 162, \"pound\": 163, \"curren\": 164, \"yen\": 165, \"brvbar\": 166, \"sect\": 167, \"uml\": 168, \"ordf\": 170, \"laquo\": 171, \"not\": 172, \"shy\": 173, \"macr\": 175, \"deg\": 176, \"plusmn\": 177, \"sup1\": 185, \"sup2\": 178, \"sup3\": 179, \"acute\": 180, \"micro\": 181, \"para\": 182, \"middot\": 183, \"cedil\": 184, \"ordm\": 186, \"raquo\": 187, \"frac14\": 188, \"frac12\": 189, \"frac34\": 190, \"iquest\": 191, \"times\": 215, \"divide\": 247, \"OElig\": 338, \"oelig\": 339, \"Scaron\": 352, \"scaron\": 353, \"Yuml\": 376, \"fnof\": 402, \"circ\": 710, \"tilde\": 732, \"Alpha\": 913, \"Beta\": 914, \"Gamma\": 915, \"Delta\": 916, \"Epsilon\": 917, \"Zeta\": 918, \"Eta\": 919, \"Theta\": 920, \"Iota\": 921, \"Kappa\": 922, \"Lambda\": 923, \"Mu\": 924, \"Nu\": 925, \"Xi\": 926, \"Omicron\": 927, \"Pi\": 928, \"Rho\": 929, \"Sigma\": 931, \"Tau\": 932, \"Upsilon\": 933, \"Phi\": 934, \"Chi\": 935, \"Psi\": 936, \"Omega\": 937, \"alpha\": 945, \"beta\": 946, \"gamma\": 947, \"delta\": 948, \"epsilon\": 949, \"zeta\": 950, \"eta\": 951, \"theta\": 952, \"iota\": 953, \"kappa\": 954, \"lambda\": 955, \"mu\": 956, \"nu\": 957, \"xi\": 958, \"omicron\": 959, \"pi\": 960, \"rho\": 961, \"sigmaf\": 962, \"sigma\": 963, \"tau\": 964, \"upsilon\": 965, \"phi\": 966, \"chi\": 967, \"psi\": 968, \"omega\": 969, \"thetasym\": 977, \"upsih\": 978, \"piv\": 982, \"ensp\": 8194, \"emsp\": 8195, \"thinsp\": 8201, \"zwnj\": 8204, \"zwj\": 8205, \"lrm\": 8206, \"rlm\": 8207, \"ndash\": 8211, \"mdash\": 8212, \"lsquo\": 8216, \"rsquo\": 8217, \"sbquo\": 8218, \"ldquo\": 8220, \"rdquo\": 8221, \"bdquo\": 8222, \"dagger\": 8224, \"Dagger\": 8225, \"bull\": 8226, \"hellip\": 8230, \"permil\": 8240, \"prime\": 8242, \"Prime\": 8243, \"lsaquo\": 8249, \"rsaquo\": 8250, \"oline\": 8254, \"frasl\": 8260, \"euro\": 8364, \"image\": 8465, \"weierp\": 8472, \"real\": 8476, \"trade\": 8482, \"alefsym\": 8501, \"larr\": 8592, \"uarr\": 8593, \"rarr\": 8594, \"darr\": 8595, \"harr\": 8596, \"crarr\": 8629, \"lArr\": 8656, \"uArr\": 8657, \"rArr\": 8658, \"dArr\": 8659, \"hArr\": 8660, \"forall\": 8704, \"part\": 8706, \"exist\": 8707, \"empty\": 8709, \"nabla\": 8711, \"isin\": 8712, \"notin\": 8713, \"ni\": 8715, \"prod\": 8719, \"sum\": 8721, \"minus\": 8722, \"lowast\": 8727, \"radic\": 8730, \"prop\": 8733, \"infin\": 8734, \"ang\": 8736, \"and\": 8743, \"or\": 8744, \"cap\": 8745, \"cup\": 8746, \"int\": 8747, \"there4\": 8756, \"sim\": 8764, \"cong\": 8773, \"asymp\": 8776, \"ne\": 8800, \"equiv\": 8801, \"le\": 8804, \"ge\": 8805, \"sub\": 8834, \"sup\": 8835, \"nsub\": 8836, \"sube\": 8838, \"supe\": 8839, \"oplus\": 8853, \"otimes\": 8855, \"perp\": 8869, \"sdot\": 8901, \"lceil\": 8968, \"rceil\": 8969, \"lfloor\": 8970, \"rfloor\": 8971, \"lang\": 9001, \"rang\": 9002, \"loz\": 9674, \"spades\": 9824, \"clubs\": 9827, \"hearts\": 9829, \"diams\": 9830 });\n});\nBitVector.SMALL_BLOCK_SIZE = 32;\nBitVector.LARGE_BLOCK_SIZE = 256;\nBitVector.BLOCK_RATE = 8;\n$__jsx_lazy_init(BurrowsWheelerTransform, \"END_MARKER\", function () {\n\treturn String.fromCharCode(0);\n});\nvar $__jsx_classMap = {\n\t\"tool/web/oktavia-english-search.jsx\": {\n\t\t_Main: _Main,\n\t\t_Main$: _Main$\n\t},\n\t\"tool/web/oktavia-search.jsx\": {\n\t\t_Result: _Result,\n\t\t_Result$SSSI: _Result$SSSI,\n\t\t_Proposal: _Proposal,\n\t\t_Proposal$SSI: _Proposal$SSI,\n\t\tOktaviaSearch: OktaviaSearch,\n\t\tOktaviaSearch$I: OktaviaSearch$I,\n\t\t_Main: _Main$0,\n\t\t_Main$: _Main$0$\n\t},\n\t\"src/oktavia.jsx\": {\n\t\tOktavia: Oktavia,\n\t\tOktavia$: Oktavia$\n\t},\n\t\"src/binary-util.jsx\": {\n\t\tBinary: Binary,\n\t\tBinary$: Binary$,\n\t\tLoadedStringResult: LoadedStringResult,\n\t\tLoadedStringResult$SI: LoadedStringResult$SI,\n\t\tLoadedStringListResult: LoadedStringListResult,\n\t\tLoadedStringListResult$SI: LoadedStringListResult$SI,\n\t\tLoadedStringListMapResult: LoadedStringListMapResult,\n\t\tLoadedStringListMapResult$SI: LoadedStringListMapResult$SI,\n\t\tLoadedNumberListResult: LoadedNumberListResult,\n\t\tLoadedNumberListResult$SI: LoadedNumberListResult$SI,\n\t\tCompressionReport: CompressionReport,\n\t\tCompressionReport$: CompressionReport$\n\t},\n\t\"src/query.jsx\": {\n\t\tQuery: Query,\n\t\tQuery$: Query$\n\t},\n\t\"src/query-string-parser.jsx\": {\n\t\tQueryStringParser: QueryStringParser,\n\t\tQueryStringParser$: QueryStringParser$\n\t},\n\t\"src/search-result.jsx\": {\n\t\tProposal: Proposal,\n\t\tProposal$II: Proposal$II,\n\t\tPosition: Position,\n\t\tPosition$SIB: Position$SIB,\n\t\tSearchUnit: SearchUnit,\n\t\tSearchUnit$I: SearchUnit$I,\n\t\tSingleResult: SingleResult,\n\t\tSingleResult$: SingleResult$,\n\t\tSingleResult$SBB: SingleResult$SBB,\n\t\tSearchSummary: SearchSummary,\n\t\tSearchSummary$: SearchSummary$,\n\t\tSearchSummary$LOktavia$: SearchSummary$LOktavia$\n\t},\n\t\"src/style.jsx\": {\n\t\tStyle: Style,\n\t\tStyle$S: Style$S,\n\t\t_HTMLHandler: _HTMLHandler,\n\t\t_HTMLHandler$HASB: _HTMLHandler$HASB\n\t},\n\t\"src/stemmer/stemmer.jsx\": {\n\t\tStemmer: Stemmer,\n\t\tStemmer$: Stemmer$\n\t},\n\t\"src/stemmer/base-stemmer.jsx\": {\n\t\tBaseStemmer: BaseStemmer,\n\t\tBaseStemmer$: BaseStemmer$\n\t},\n\t\"src/stemmer/english-stemmer.jsx\": {\n\t\tEnglishStemmer: EnglishStemmer,\n\t\tEnglishStemmer$: EnglishStemmer$\n\t},\n\t\"src/stemmer/among.jsx\": {\n\t\tAmong: Among,\n\t\tAmong$SII: Among$SII,\n\t\tAmong$SIIF$LBaseStemmer$B$LBaseStemmer$: Among$SIIF$LBaseStemmer$B$LBaseStemmer$\n\t},\n\t\"src/metadata.jsx\": {\n\t\tMetadata: Metadata,\n\t\tMetadata$LOktavia$: Metadata$LOktavia$,\n\t\tSection: Section,\n\t\tSection$LOktavia$: Section$LOktavia$,\n\t\tSplitter: Splitter,\n\t\tSplitter$LOktavia$: Splitter$LOktavia$,\n\t\tSplitter$LOktavia$S: Splitter$LOktavia$S,\n\t\tTable: Table,\n\t\tTable$LOktavia$AS: Table$LOktavia$AS,\n\t\tBlock: Block,\n\t\tBlock$LOktavia$: Block$LOktavia$\n\t},\n\t\"src/fm-index.jsx\": {\n\t\tFMIndex: FMIndex,\n\t\tFMIndex$: FMIndex$\n\t},\n\t\"src/sax.jsx\": {\n\t\tTag: Tag,\n\t\tTag$S: Tag$S,\n\t\t_Common: _Common,\n\t\t_Common$: _Common$,\n\t\t_State: _State,\n\t\t_State$: _State$,\n\t\tSAXHandler: SAXHandler,\n\t\tSAXHandler$: SAXHandler$,\n\t\tSAXParser: SAXParser,\n\t\tSAXParser$LSAXHandler$: SAXParser$LSAXHandler$,\n\t\tSAXParser$LSAXHandler$B: SAXParser$LSAXHandler$B,\n\t\tChar: Char,\n\t\tChar$: Char$,\n\t\t_Entities: _Entities,\n\t\t_Entities$: _Entities$\n\t},\n\t\"src/bit-vector.jsx\": {\n\t\tBitVector: BitVector,\n\t\tBitVector$: BitVector$\n\t},\n\t\"src/wavelet-matrix.jsx\": {\n\t\tWaveletMatrix: WaveletMatrix,\n\t\tWaveletMatrix$: WaveletMatrix$\n\t},\n\t\"src/burrows-wheeler-transform.jsx\": {\n\t\tBurrowsWheelerTransform: BurrowsWheelerTransform,\n\t\tBurrowsWheelerTransform$: BurrowsWheelerTransform$\n\t},\n\t\"src/sais.jsx\": {\n\t\tOArray: OArray,\n\t\tOArray$AI: OArray$AI,\n\t\tOArray$AII: OArray$AII,\n\t\tSAIS: SAIS,\n\t\tSAIS$: SAIS$\n\t}\n};\n\n\n/**\n * launches _Main.main(:string[]):void invoked by jsx --run|--executable\n */\nJSX.runMain = function (sourceFile, args) {\n\tvar module = JSX.require(sourceFile);\n\tif (! module) {\n\t\tthrow new ReferenceError(\"entry point module not found in \" + sourceFile);\n\t}\n\tif (! module._Main) {\n\t\tthrow new ReferenceError(\"entry point _Main not found in \" + sourceFile);\n\t}\n\tif (! module._Main.main$AS) {\n\t\tthrow new ReferenceError(\"entry point _Main.main(:string[]):void not found in \" + sourceFile);\n\t}\n\tmodule._Main.main$AS(args);\n};\n\n/**\n * launches _Test#test*():void invoked by jsx --test\n */\nJSX.runTests = function (sourceFile, tests) {\n\tvar module = JSX.require(sourceFile);\n\tvar testClass = module._Test$;\n\n\tif (!testClass) return; // skip if there's no test class\n\n\tif(tests.length === 0) {\n\t\tvar p = testClass.prototype;\n\t\tfor (var m in p) {\n\t\t\tif (p[m] instanceof Function\n\t\t\t\t&& /^test.*[$]$/.test(m)) {\n\t\t\t\ttests.push(m);\n\t\t\t}\n\t\t}\n\t}\n\telse { // set as process arguments\n\t\ttests = tests.map(function (name) {\n\t\t\treturn name + \"$\"; // mangle for function test*():void\n\t\t});\n\t}\n\n\tvar testCase = new testClass();\n\n\tif (testCase.beforeClass$AS != null)\n\t\ttestCase.beforeClass$AS(tests);\n\n\tfor (var i = 0; i < tests.length; ++i) {\n\t\t(function (method) {\n\t\t\tif (method in testCase) {\n\t\t\t\ttestCase.run$SF$V$(method, function() { testCase[method](); });\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new ReferenceError(\"No such test method: \" + method);\n\t\t\t}\n\t\t}(tests[i]));\n\t}\n\n\tif (testCase.afterClass$ != null)\n\t\ttestCase.afterClass$();\n};\n/**\n * call a function on load/DOMContentLoaded\n */\nfunction $__jsx_onload (event) {\n\twindow.removeEventListener(\"load\", $__jsx_onload);\n\tdocument.removeEventListener(\"DOMContentLoaded\", $__jsx_onload);\n\tJSX.runMain(\"tool/web/oktavia-english-search.jsx\", [])\n}\n\nwindow.addEventListener(\"load\", $__jsx_onload);\ndocument.addEventListener(\"DOMContentLoaded\", $__jsx_onload);\n\n})(JSX);\n"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 216686
        },
        "cache": {},
        "timings": {
          "blocked": 3.30599999870174,
          "dns": -1,
          "connect": -1,
          "send": 0.5039999959990302,
          "wait": 168.6850000114642,
          "receive": 645.0079999922312,
          "ssl": -1
        },
        "serverIPAddress": "133.242.206.244",
        "connection": "693217",
        "pageref": "page_1"
      },
      {
        "startedDateTime": "2017-06-28T09:37:40.744Z",
        "time": 175.20100000547245,
        "request": {
          "method": "GET",
          "url": "https://h2o.examp1e.net/assets/style.css",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": ":path",
              "value": "/assets/style.css"
            },
            {
              "name": "pragma",
              "value": "no-cache"
            },
            {
              "name": "accept-encoding",
              "value": "gzip, deflate, sdch, br"
            },
            {
              "name": "accept-language",
              "value": "en-CA,en;q=0.8,en-US;q=0.6,de;q=0.4,en-GB;q=0.2,ko;q=0.2"
            },
            {
              "name": "user-agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36"
            },
            {
              "name": "accept",
              "value": "text/css,*/*;q=0.1"
            },
            {
              "name": "cache-control",
              "value": "no-cache"
            },
            {
              "name": ":authority",
              "value": "h2o.examp1e.net"
            },
            {
              "name": "cookie",
              "value": "h2o_casper=AmgAAAAAAAAAAAAY1oiCMAAAApA"
            },
            {
              "name": ":scheme",
              "value": "https"
            },
            {
              "name": "referer",
              "value": "https://h2o.examp1e.net/"
            },
            {
              "name": ":method",
              "value": "GET"
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "h2o_casper",
              "value": "AmgAAAAAAAAAAAAY1oiCMAAAApA",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "date",
              "value": "Wed, 28 Jun 2017 09:37:40 GMT"
            },
            {
              "name": "last-modified",
              "value": "Tue, 20 Sep 2016 05:27:06 GMT"
            },
            {
              "name": "server",
              "value": "h2o/2.2.0-beta2"
            },
            {
              "name": "etag",
              "value": "\"57e0c8aa-1586\""
            },
            {
              "name": "content-type",
              "value": "text/css"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "set-cookie",
              "value": "h2o_casper=AmgAAAAAAAAAAAAY1oiCMAAAApA; Path=/; Expires=Tue, 01 Jan 2030 00:00:00 GMT; Secure"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "content-length",
              "value": "5510"
            }
          ],
          "cookies": [
            {
              "name": "h2o_casper",
              "value": "AmgAAAAAAAAAAAAY1oiCMAAAApA",
              "path": "/",
              "expires": "2030-01-01T00:00:00.000Z",
              "httpOnly": false,
              "secure": true
            }
          ],
          "content": {
            "size": 5510,
            "mimeType": "text/css",
            "text": "body {\n    background: #f2f2f2;\n    margin: 0;\n    padding: 0;\n    color: black;\n    font-family: Arial, sans-serif;\n    line-height: 1.3em;\n}\n\na {\n    color: #009;\n}\n\n#body {\n    background: #fff;\n    margin: 0 auto;\n    padding: 0;\n    width: 100%;\n    max-width: 800px;\n    text-align: justify;\n}\n\n#top {\n    background: #336;\n    color: #eee;\n    width: 100%;\n    padding: 0 0;\n    margin: 0 0;\n    position: relative;\n}\n\n#top h1 {\n    font-size: 60px;\n    padding: 35px 10px 0 50px;\n    margin: 0 0;\n    line-height: 1em;\n}\n\n#top h1 a {\n    color: #fff;\n    text-decoration: none;\n}\n\n#top .description {\n  padding: 0 10px 20px 50px;\n  margin: 0 0;\n}\n\n@media screen and (max-width: 800px) {\n    #top .description {\n        padding-bottom: 45px;\n    }\n}\n\n#top ul {\n    float: right;\n    margin: 20px 0 0 0;\n    padding: 0 50px 0 0;\n}\n\n#top ul li {\n    display: inline;\n    font-weight: bold;\n    margin: 0;\n    padding: 0 0 0 1em;\n}\n\n#top ul li a {\n    color: #600;\n}\n\n#menu {\n    width: 100%;\n    background: #fff;\n    padding: 0;\n    border-collapse: collapse;\n    table-layout: fixed;\n}\n\n#menu td {\n    text-align: center;\n    border: 1px solid #aaa;\n    background: #ddd;\n}\n\n@media screen and (max-width: 800px) {\n    #menu td {\n      word-break: break-word;\n    }\n\n    #menu td:first-child,\n    #menu td:last-child {\n        border-left: none;\n        border-right: none;\n    }\n}\n\n#menu td a {\n    display: block;\n    padding: 0.4em;\n    color: #333;\n    font-weight: bold;\n    text-decoration: none;\n}\n\n@media screen and (max-width: 800px) {\n    #menu td a {\n        padding-left: 0;\n        padding-right: 0;\n    }\n}\n\n#menu .selected {\n    background: white;\n    font-weight: bold;\n}\n\n#menu .selected a {\n    color: black;\n}\n\n#breadcrumb {\n    margin: 0;\n    padding: 2em 50px 0 50px;\n    font-weight: bold;\n}\n\n#main {\n    margin: 0;\n    width: 698px;\n    padding: 0 50px 1em 50px;\n    display: inline-block;\n    border: 1px solid #aaa;\n    border-top: none;\n}\n\n@media screen and (max-width: 800px) {\n    #main {\n        width: 100%;\n        padding-left: 0;\n        padding-right: 0;\n        border-left: none;\n        border-right: none;\n    }\n}\n\n#main h2 {\n    font-size: 120%;\n    margin: 2em 0 1em 0;\n}\n\n#main h2 a {\n    color: black;\n    text-decoration: none;\n}\n\n#main h3 {\n    font-size: 100%;\n    margin: 2em 0 1em 0;\n}\n\n#main div {\n    margin: 1em 0;\n}\n\n#main dt {\n    margin-top: 0.5em;\n    font-weight: bold;\n}\n\n#main ul li {\n    margin-top: 0.2em;\n    margin-bottom: 0.2em;\n}\n\n#main ul li ul li {\n    margin-top: 0.1em;\n    margin-bottom: 0.1em;\n}\n\n#main pre {\n    border: 1px solid gray;\n    margin: 0.2em 0;\n    padding: 0.5em;\n    background: #f6f6f6;\n    overflow-x: auto;\n}\n\n#main .example .caption {\n    text-align: center;\n    margin-bottom: 0.2em;\n}\n\n#main table {\n    margin: 1em auto;\n    border: 1px solid #ccc;\n    border-collapse: collapse;\n}\n\n#main table td,th {\n    border: 1px solid #ccc;\n    padding: 0.3em 0.5em;\n}\n\n#main table th {\n    background-color: #eee;\n    text-align: center;\n}\n\n#main table caption {\n    caption-side: top;\n    font-size: 100%;\n    font-weight: normal;\n    padding: 0.3em;\n}\n\n#main .notes {\n    margin: 3em 0 1em 0;\n    font-size: 70%;\n}\n\n#main .notes h3 {\n    margin: 1em 0 0.2em 0;\n    font-weight: bold;\n}\n\n#main .notes ol {\n    margin: 0;\n    padding-left: 0.5em;\n    list-style: inside decimal;\n}\n\n#main .doc-image {\n    display: block;\n    margin:  1em auto;\n    border:  0;\n}\n\n#main sup a {\n    text-decoration: none;\n}\n\n#main img {\n    height: auto;\n    max-width: 100%;\n}\n\n#main .section-head {\n    border-bottom: 1px solid gray;\n}\n\n#main .directive-head {\n    margin: 2em 0 1em 0;\n    border-bottom: 1px solid #999;\n}\n\n#main .directive-head h3 {\n    margin: 0;\n    font-size: 120%;\n}\n\n#main .directive-head h3 a {\n    color: black;\n    text-decoration: none;\n}\n\n#main .directive-since {\n    margin: 0;\n    font-size: 80%;\n    float: right;\n}\n\n#main .directive-desc dt {\n    margin: 0.5em 0 0.3em 0;\n}\n\n#main .directive-desc dd {\n    margin: 0.5em 0 1em 0;\n}\n\n#main .directive-desc dd :first-child {\n    margin-top: 0.3em;\n}\n\n#main .mruby-method-head {\n    margin: 2em 0 1em 0;\n    border-bottom: 1px solid #999;\n}\n\n#main .mruby-method-head h3 {\n    margin: 0;\n    font-size: 120%;\n}\n\n#main .mruby-method-head h3 a {\n    color: black;\n    text-decoration: none;\n}\n\n#main .mruby-method-since {\n    margin: 0;\n    font-size: 80%;\n    float: right;\n}\n\n#main .mruby-method-desc dt {\n    margin: 0.5em 0 0.3em 0;\n}\n\n#main .mruby-method-desc dd {\n    margin: 0.5em 0 1em 0;\n}\n\n#main .mruby-method-desc dd :first-child {\n    margin-top: 0.3em;\n}\n\n#main .mruby-method-parameters {\n    margin-left: 1.5em;\n}\n\n@media screen and (max-width: 800px) {\n    #main h2,\n    #main h3,\n    #main h4,\n    #main div,\n    #main p,\n    #main dt,\n    #main ul,\n    #main pre,\n    #main table,\n    #main .notes,\n    #main .directive-head,\n    #main .directive-desc {\n        margin-left: 25px;\n        margin-right: 25px\n    }\n    #main .mruby-method-head,\n    #main .mruby-method-desc {\n        margin-left: 25px;\n        margin-right: 25px\n    }\n\n    #main * div,\n    #main * p,\n    #main * table,\n    #main * ul,\n    #main * pre {\n        margin-left: 0;\n        margin-right: 0;\n    }\n}\n\n#footer {\n    border-width: 0 1px 1px 1px;\n    border-style: solid;\n    border-color: #aaa;\n    padding: 1em 50px 1em 50px;\n    text-align: center;\n}\n\n@media screen and (max-width: 800px) {\n    #footer {\n        border-right: none;\n        border-left: none;\n    }\n}\n"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 5552
        },
        "cache": {},
        "timings": {
          "blocked": 3.40300000971183,
          "dns": -1,
          "connect": -1,
          "send": 0.5250000103842498,
          "wait": 168.96399998222492,
          "receive": 2.3090000031514535,
          "ssl": -1
        },
        "serverIPAddress": "133.242.206.244",
        "connection": "693217",
        "pageref": "page_1"
      },
      {
        "startedDateTime": "2017-06-28T09:37:40.744Z",
        "time": 1009.1630000097211,
        "request": {
          "method": "GET",
          "url": "https://h2o.examp1e.net/assets/8mbps100msec-nginx195-h2o150.png",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": ":path",
              "value": "/assets/8mbps100msec-nginx195-h2o150.png"
            },
            {
              "name": "pragma",
              "value": "no-cache"
            },
            {
              "name": "accept-encoding",
              "value": "gzip, deflate, sdch, br"
            },
            {
              "name": "accept-language",
              "value": "en-CA,en;q=0.8,en-US;q=0.6,de;q=0.4,en-GB;q=0.2,ko;q=0.2"
            },
            {
              "name": "user-agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36"
            },
            {
              "name": "accept",
              "value": "image/webp,image/*,*/*;q=0.8"
            },
            {
              "name": "cache-control",
              "value": "no-cache"
            },
            {
              "name": ":authority",
              "value": "h2o.examp1e.net"
            },
            {
              "name": "cookie",
              "value": "h2o_casper=AmgAAAAAAAAAAAAY1oiCMAAAApA"
            },
            {
              "name": ":scheme",
              "value": "https"
            },
            {
              "name": "referer",
              "value": "https://h2o.examp1e.net/"
            },
            {
              "name": ":method",
              "value": "GET"
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "h2o_casper",
              "value": "AmgAAAAAAAAAAAAY1oiCMAAAApA",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "date",
              "value": "Wed, 28 Jun 2017 09:37:40 GMT"
            },
            {
              "name": "last-modified",
              "value": "Tue, 22 Mar 2016 07:29:46 GMT"
            },
            {
              "name": "server",
              "value": "h2o/2.2.0-beta2"
            },
            {
              "name": "etag",
              "value": "\"56f0f46a-502f2\""
            },
            {
              "name": "content-type",
              "value": "image/png"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "set-cookie",
              "value": "h2o_casper=AmgAAAAAAAAAAAAY1oiCMAAAApA; Path=/; Expires=Tue, 01 Jan 2030 00:00:00 GMT; Secure"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "content-length",
              "value": "328434"
            }
          ],
          "cookies": [
            {
              "name": "h2o_casper",
              "value": "AmgAAAAAAAAAAAAY1oiCMAAAApA",
              "path": "/",
              "expires": "2030-01-01T00:00:00.000Z",
              "httpOnly": false,
              "secure": true
            }
          ],
          "content": {
            "size": 328434,
            "mimeType": "image/png",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 328649
        },
        "cache": {},
        "timings": {
          "blocked": 4.42199999815784,
          "dns": -1,
          "connect": -1,
          "send": 0.5560000136028993,
          "wait": 168.51200000382926,
          "receive": 835.6729999941311,
          "ssl": -1
        },
        "serverIPAddress": "133.242.206.244",
        "connection": "693217",
        "pageref": "page_1"
      },
      {
        "startedDateTime": "2017-06-28T09:37:40.744Z",
        "time": 1081.9239999982528,
        "request": {
          "method": "GET",
          "url": "https://h2o.examp1e.net/assets/staticfile612-nginx1910-h2o170.png",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": ":path",
              "value": "/assets/staticfile612-nginx1910-h2o170.png"
            },
            {
              "name": "pragma",
              "value": "no-cache"
            },
            {
              "name": "accept-encoding",
              "value": "gzip, deflate, sdch, br"
            },
            {
              "name": "accept-language",
              "value": "en-CA,en;q=0.8,en-US;q=0.6,de;q=0.4,en-GB;q=0.2,ko;q=0.2"
            },
            {
              "name": "user-agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36"
            },
            {
              "name": "accept",
              "value": "image/webp,image/*,*/*;q=0.8"
            },
            {
              "name": "cache-control",
              "value": "no-cache"
            },
            {
              "name": ":authority",
              "value": "h2o.examp1e.net"
            },
            {
              "name": "cookie",
              "value": "h2o_casper=AmgAAAAAAAAAAAAY1oiCMAAAApA"
            },
            {
              "name": ":scheme",
              "value": "https"
            },
            {
              "name": "referer",
              "value": "https://h2o.examp1e.net/"
            },
            {
              "name": ":method",
              "value": "GET"
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "h2o_casper",
              "value": "AmgAAAAAAAAAAAAY1oiCMAAAApA",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "date",
              "value": "Wed, 28 Jun 2017 09:37:40 GMT"
            },
            {
              "name": "last-modified",
              "value": "Tue, 22 Mar 2016 07:29:46 GMT"
            },
            {
              "name": "server",
              "value": "h2o/2.2.0-beta2"
            },
            {
              "name": "etag",
              "value": "\"56f0f46a-19f98\""
            },
            {
              "name": "content-type",
              "value": "image/png"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "set-cookie",
              "value": "h2o_casper=AmgAAAAAAAAAAAAY1oiCMAAAApA; Path=/; Expires=Tue, 01 Jan 2030 00:00:00 GMT; Secure"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "content-length",
              "value": "106392"
            }
          ],
          "cookies": [
            {
              "name": "h2o_casper",
              "value": "AmgAAAAAAAAAAAAY1oiCMAAAApA",
              "path": "/",
              "expires": "2030-01-01T00:00:00.000Z",
              "httpOnly": false,
              "secure": true
            }
          ],
          "content": {
            "size": 106392,
            "mimeType": "image/png",
            "text": "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pc98LpQhAAEIQAACEIBA0wjwe3e84vHBsaAYWQliidx11103fPrTn+6I5VXM70c/+lHbieLjH/94OOecc2xrNgnlL37xi/W9o10mlDzutm6IBcXoKnWLdVb9cH3Vrv7edzjbfJzh7EqfOiZBAAIQgAAEIACBphJAHGdXXlu6vfa1rw0//vGPLRRA26jphRnDpX322cear7nmmtpMD94p+cpu3RALHgrR7WE82Q3XV+EUWtn2vsPZ5uMMZ1f6zOdKGQIQgAAEIAABCDSNAOK4yxX3t+SpSbtKDJdeeOEFa3YBqoO1117b6q644grL86+rr77aVod7xeFK+Cpso1df+dpss83MZb/jDOIznytlCEAAAhCAAAQg0DQCjRfHd911V8c1f/LJJ8OVV15pD7/5dmq++0JpfPrpp1vVNttsUzftscceVlab72yhCr0MRA//7bnnnhY77B0uueSS4POQMN91113DHXfcEfRGuzydeOKJNqe9997bqvsdZxCf+XiUIQABCEAAAhCAQNMIzIz75f593Nlg2Y022qhp527nq9VX7dP77LPPhvhCkHDRRReFgw8+2MTpJz7xibDzzjub3de//nV7u53sFIqgMArV6SN2J598cvAH37RThGKXzz333BBfhmGCVq+dPvDAA4OE6kknnVSHT2gbNG35Fl/4ETxEY5VVVgkS1meffXbQbhBavf7yl79sdYceeqiJa01qkHH69WknOw5fjz/+eLjxxhttr+Zuu2SMwxC4gAAEIAABCEAAAuNCQJsdSNvFncnO1ANljX5DXhS1Q3F3CnvzXKRr+atf/eqh4447bmjevHn1K1liOMTQVlttNRS3RattX/GKVwx96EMfGtKb78oUwy2G9t1336Gll17a7KMoHnrTm940FF+I0WYaL4S1v/e9722r//Wvf23zihfJ2lddddWhI488ss1GB/2OI9t+fcp2rIk35I2VIP0hAAEIQAACEJgsAvkb8mZIHMfV09naj7bJSavBeohtpZVWqneD6Mbj6aeftpdwRNEbtBrb60Ug3jde1BBfoRyiuG0LpfD2z3/+8+Fzn/uchVtsueWWXl3nCvHQmL5NXN1QFEYaJzfv12feZ9Cy73McRT/7HA8KD3sIQAACEIAABCaVwAMPPGDb80Zd9372Oa7Qa3s03yJtuKvxyle+Mvib6oaz8zaJ57XWWssP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glYSZe6OsPG+M11PqoOj52SYa2JMyYCAyLG+CUJACAgBISAEhIAQmE0EQDDRepFbElXKfDoju569FmTXO5gtd4znrDhTwpzqJL7DrS9di/l3matt5sY853i4GzNlyhR37733DueiPiEgBISAEBACQkAIzHEEQDDxScmtEVxsWcBsYKxkrZQ1q2BXN3eL5cdBhrjDPyeZxJfrwxrM1mUC+tcsrXWmxpPjiy++2E2aNMltsMEG7sc//nHrbqAuWAgIASEgBISAEJj3CFTIrWewZots1gitP8RTW7DZ+lw6yWtBdn3F2myoXMfqdSHrYnKy2V1AXcwxamv8toonn3yyuDWPPfZYoUsRAkJACAgBISAEhMBoQYBEliQX6yKhtjWC4HZuCg6kFza0vJ8266w5MFa38Xl/TYi2mhpPjnfeeWd3//33u9dee83entfWG6nrFgJCQAgIASEgBOYhAr3IZk5u+/HH5bAqnOv5+Dz+PISi6VM3nhyvvPLK7t/+7d+afh+0fiEgBISAEBACQqCJCICkomXkFBVi/ijOuv0BntzdAFtHY5wo6Ruj2zjabFw/82ENnCSLn683q2NzVCtl48lxK++aLloICAEhIASEgBAYVQgYGfYr4rYJkFLabKEkqiSpMKa6OZUHe8oExrByTJ1jctkjXhk5aFwb15v3t/l8VJLj4447zv37v//7wPflG9/4hjv00EMHHqcBQkAICAEhIASEgBCYHQSGq+zOBwKbkNuiWusnYhWY4/O5MdZ8IgmmTn8j334QK8O5RDzaoNv4KHGej4dNLSAwKskxHs32+OOPD3yPZmfMwJNogBAQAkJACAgBISAEIgIkoDn5LKrCeYU3nnPLRVEZrkGUsdFFnTKfD3baakLJNAACo5Ic//3f/717/fXXOy7jwQcfdLfffrtbeOGF3U477VT8M8Pvfvc7hydWHHjgge6rX/1qxxidCAEhIASEgBAQAkJgbiBA0kpJogqJZmQ4Spxbv68qs9/INPcR098TaZJn2wYB/y7kOp9v0HhYk1pAYFSS41122cXhw/bqq6+6TTbZxL4gl1xyidthhx3Y5R599FG3xRZbuHPOOccddthhhV2KEBACQkAICAEhIARGGgGS1XyevDLci9x6khNCRFkhz763INL5ZP6cpJxylo8DHbJodTrnGy54EaAdSiNeAnLVVVe5qVOn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sRgRWIx6duWVV4YPfvCDYdWqVQsC2c033xze//73h9/97ncL0r4anVsE1oSOS0fndo7mQtr6cyFEMoTApCNwzTXX+Oe2H/KQh3QO9fLLLw9bbLFF2GmnncLy5csDPs89LGy33XbhxhtvHEYWdtxxx3Cve93L6X75y1+Gu+++29Prrbde2H777cPmm28+VMZpp53mfI9+9KNbtL/97W/DVVddFVC3wQYbtOqHFcyWf5j8aaqXnvWf7Znq2Stf+crwi1/8IrzkJS8J1113nR/H/VsJYaONNvIviK5YsSJceumlYddddw1bbrnlIBaX+8Mf/tCPsYc97GGNL5DiOH31q1/tx/qb3vSmgXKmoXISdXzZsmXhggsu8AugnXfeOeA8MY4tnamOQl+G4Umdgu5LR4nGCPE73vGOX3zyk5/sKQgBIdAfgcc//vE9O5w6CWxFyuue9KQnef2nPvUpz4N+0N9zn/vcgfXkfdvb3uZyL7nkkk76ffbZp/ed73yns28ovPXWW3sbb7xx71nPelaDBv1+3/ve17vnPe/pcs0RaNQPy8yWf5j8aayXnrVnfTZ6Zs6A6/Yb3/hGF/zQhz608xjisYZ4ww03dNqvf/3rTmsObbtTqcQuhHsvfOELe+uuu25D7hOf+MTeypUrK76nP/3pvfvd73691atXV2XTmpg0HX/LW97SswWKxvzf//7371144YUjTfFsdBQNDMIT9dJRoDBauP7663s437797W9/nlaOzRoqCIFhCNihNYykqjdjFcxBrvI/+MEPgh1s4S//8i/DM57xjKocK1KHHHJIle9Ht9deeznNH/7wB4+f//znB/wtXbrUVyve8573hCc84QnBjHGwk38lj4lzzz3XaY888kgWhR//+MfBTurhoosuCve9733DHXfcUdWNkpgt/yhtTCON9Kw567PVs4997GMu8PDDD/f4Ax/4QLjhhhuqRk488cTwm9/8Jpx99tlV2aabburpUebipJNOCh/96EfD0UcfHV7xileEddZZJ+C2+ymnnBLuuuuu6o4P2v/c5z4XvvKVr4QDDzywamsaE6PgSlwWuy3FlhncDTjqqKPCwQcfHKA7H/7wh8PHP/7xYIsRAdsl7GKLw+mMZ6OjEDgMT+loJ+zDC7VybKqlIASGILD//vv7ykAXWblyXNL813/9l/O++93vLqsa+WF0X/va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pz4sVa3h6Cc/+Un44he/GJ773OeGbbbZZg231i3+t7/9bbjqqqvCox/96LDBBnZlMGK44447wg9/+MNwww03hAc84AFhjz32GJGzJuvZRFxwwQVh2223DbvssktdUaRuv/12p9t4443DnnvuGTbZZJOCYs1ne5deGnpX/SQ11NSZZs40abvtQnjmIa1OrVixIlxqcnbdddew5ZZbtur/8Ic/hJ///Ofh4Q9/eGsufvnLX4bLL788bGSO90Mf+tBwn/sMd75vvvlmb2/lypXhIQ95SLjvfe/banOUgnF1BH2Fc9ovoB+bb755v+pG+U9/+tOAP/R/yZIljbpBmQ996EPh1a9+dfjWt74V9t1330GkC1p35513hiuuuCLc8573nNExtKCdV+NCYAER0CXvAoKvpicDgbuWrgh3LF3mf7fdVcdI33bXUvtjvDTctWzEJeY5gOaf//mfw3HHHecO8hyIG0vE6tWrw6mnnuora/vtt1/48Y9/PBI/+N7+9reHrbbaKuyzzz7h4IMPDg960IPC05/+9IAT/ajhZz/7WTjggAPcKT/hhBM62eDUHXXUUWGLLbYIBx54YHjsYx8bNttss3DKKad00q/JwpVL7wrLb78j/d2WxbeFpbcjH2Okl/XB4Tvf+U744z/+Y8e9q6/vfe97vf7CCy+sqjEvj3vc48LOO+8cnvGMZ4SDDjoo7Ljjju744eKiK8Ah3H333f2C64lPfKLz7LDDDu5cfvWrX+1i6SybqY7AkYVO9Pv7u7/7u8728sLvfve74d73vreP48/+7M98/LgouO6663Kyvmliw7gv4ZgV0FtcxMxVeOpTnxr+5E/+xLH63e9+N1diJUcITDwCco4nfoo1wDWNwIrVq8KyFfFv+co6Rnq5OWB1vDKsWLV6TXenkn/ssce6oweHZz4DHC6spsEp3Xrrrcdq+l/+5V/C3/zN34RnPvOZvuL1i1/8IrziFa8I//3f/x1e+cpXDpUFh+ud73ynr37++te/Hkj/4he/OJx55pnhNa95ja+aXnTRRVW/P/axjw3knevK1aY/q5YvS3/Ls9jSdkG1anmKLd1buaKz+WGOWlf9+9///nCTbekA7v/7v/8b/vVf/9XnDI400mX48Ic/HB7/+MeH2267LZx88snOA4f4bW97mzt1uMg4/fTTS7ZWfjY68u///u/hjDPOaP09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",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 106490
        },
        "cache": {},
        "timings": {
          "blocked": 4.59799999953248,
          "dns": -1,
          "connect": -1,
          "send": 0.21299999207258047,
          "wait": 168.98200000286994,
          "receive": 908.1310000037779,
          "ssl": -1
        },
        "serverIPAddress": "133.242.206.244",
        "connection": "693217",
        "pageref": "page_1"
      },
      {
        "startedDateTime": "2017-06-28T09:37:41.581Z",
        "time": 351.1869999929331,
        "request": {
          "method": "GET",
          "url": "https://h2o.examp1e.net/search/searchindex.js",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": ":path",
              "value": "/search/searchindex.js"
            },
            {
              "name": "pragma",
              "value": "no-cache"
            },
            {
              "name": "accept-encoding",
              "value": "gzip, deflate, sdch, br"
            },
            {
              "name": "accept-language",
              "value": "en-CA,en;q=0.8,en-US;q=0.6,de;q=0.4,en-GB;q=0.2,ko;q=0.2"
            },
            {
              "name": "user-agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36"
            },
            {
              "name": "accept",
              "value": "*/*"
            },
            {
              "name": "cache-control",
              "value": "no-cache"
            },
            {
              "name": ":authority",
              "value": "h2o.examp1e.net"
            },
            {
              "name": "cookie",
              "value": "h2o_casper=AmgAAAAAAAAAAAAY1oiCMAAAApA"
            },
            {
              "name": ":scheme",
              "value": "https"
            },
            {
              "name": "referer",
              "value": "https://h2o.examp1e.net/"
            },
            {
              "name": ":method",
              "value": "GET"
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "h2o_casper",
              "value": "AmgAAAAAAAAAAAAY1oiCMAAAApA",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "date",
              "value": "Wed, 28 Jun 2017 09:37:41 GMT"
            },
            {
              "name": "last-modified",
              "value": "Sun, 23 Apr 2017 01:40:18 GMT"
            },
            {
              "name": "server",
              "value": "h2o/2.2.0-beta2"
            },
            {
              "name": "etag",
              "value": "\"58fc0602-38d0e\""
            },
            {
              "name": "content-type",
              "value": "application/javascript"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "set-cookie",
              "value": "h2o_casper=AmgAAAAAAAAAAAAY1oiCMAAAApA; Path=/; Expires=Tue, 01 Jan 2030 00:00:00 GMT; Secure"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "content-length",
              "value": "232718"
            }
          ],
          "cookies": [
            {
              "name": "h2o_casper",
              "value": "AmgAAAAAAAAAAAAY1oiCMAAAApA",
              "path": "/",
              "expires": "2030-01-01T00:00:00.000Z",
              "httpOnly": false,
              "secure": true
            }
          ],
          "content": {
            "size": 232718,
            "mimeType": "application/javascript",
            "text": "// Oktavia Search Index\nvar searchIndex = \"\";\n"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 232939
        },
        "cache": {},
        "timings": {
          "blocked": 2.01699999161065,
          "dns": -1,
          "connect": -1,
          "send": 0.16999998479150014,
          "wait": 249.43799999891786,
          "receive": 99.56200001761312,
          "ssl": -1
        },
        "serverIPAddress": "133.242.206.244",
        "connection": "693217",
        "pageref": "page_1"
      },
      {
        "startedDateTime": "2017-06-28T09:37:41.569Z",
        "time": 15.532000019447878,
        "request": {
          "method": "GET",
          "url": "https://ghbtns.com/github-btn.html?user=h2o&repo=h2o&type=star&count=true",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Upgrade-Insecure-Requests",
              "value": "1"
            },
            {
              "name": "Referer",
              "value": "https://h2o.examp1e.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36"
            }
          ],
          "queryString": [
            {
              "name": "user",
              "value": "h2o"
            },
            {
              "name": "repo",
              "value": "h2o"
            },
            {
              "name": "type",
              "value": "star"
            },
            {
              "name": "count",
              "value": "true"
            }
          ],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 307,
          "statusText": "Internal Redirect",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Location",
              "value": "about:blank"
            },
            {
              "name": "Non-Authoritative-Reason",
              "value": "Delegate"
            }
          ],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "x-unknown"
          },
          "redirectURL": "about:blank",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 0
        },
        "cache": {},
        "timings": {
          "blocked": 0.633999996352941,
          "dns": -1,
          "connect": -1,
          "send": 0,
          "wait": 0,
          "receive": 14.898000023094937,
          "ssl": -1
        },
        "serverIPAddress": "",
        "pageref": "page_1"
      },
      {
        "startedDateTime": "2017-06-28T09:37:41.575Z",
        "time": 9.788000024855137,
        "request": {
          "method": "GET",
          "url": "https://www.google-analytics.com/analytics.js",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://h2o.examp1e.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 307,
          "statusText": "Internal Redirect",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Location",
              "value": "data:application/javascript;base64,dmFyIHVyY2hpblRyYWNrZXI9ZnVuY3Rpb24oKXt9LF9nYXE9e3B1c2g6ZnVuY3Rpb24oKXt0cnkge2lmKGFyZ3VtZW50c1swXVswXT09J19saW5rJyl3aW5kb3cubG9jYXRpb24uaHJlZj1hcmd1bWVudHNbMF1bMV19Y2F0Y2goZXIpe319fSxfZ2F0PXtfY3JlYXRlVHJhY2tlcjpmdW5jdGlvbigpe30sIF9nZXRUcmFja2VyOmZ1bmN0aW9uKCl7cmV0dXJue19fbm9TdWNoTWV0aG9kX186ZnVuY3Rpb24oKXt9LF9saW5rOmZ1bmN0aW9uKG8pe2lmKG8pbG9jYXRpb24uaHJlZj1vO30sX2xpbmtCeVBvc3Q6ZnVuY3Rpb24oKXtyZXR1cm4gdHJ1ZTt9LF9nZXRMaW5rZXJVcmw6ZnVuY3Rpb24obyl7cmV0dXJuIG87fSxfdHJhY2tFdmVudDpmdW5jdGlvbigpe319fX07"
            },
            {
              "name": "Non-Authoritative-Reason",
              "value": "Delegate"
            }
          ],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "x-unknown"
          },
          "redirectURL": "data:application/javascript;base64,dmFyIHVyY2hpblRyYWNrZXI9ZnVuY3Rpb24oKXt9LF9nYXE9e3B1c2g6ZnVuY3Rpb24oKXt0cnkge2lmKGFyZ3VtZW50c1swXVswXT09J19saW5rJyl3aW5kb3cubG9jYXRpb24uaHJlZj1hcmd1bWVudHNbMF1bMV19Y2F0Y2goZXIpe319fSxfZ2F0PXtfY3JlYXRlVHJhY2tlcjpmdW5jdGlvbigpe30sIF9nZXRUcmFja2VyOmZ1bmN0aW9uKCl7cmV0dXJue19fbm9TdWNoTWV0aG9kX186ZnVuY3Rpb24oKXt9LF9saW5rOmZ1bmN0aW9uKG8pe2lmKG8pbG9jYXRpb24uaHJlZj1vO30sX2xpbmtCeVBvc3Q6ZnVuY3Rpb24oKXtyZXR1cm4gdHJ1ZTt9LF9nZXRMaW5rZXJVcmw6ZnVuY3Rpb24obyl7cmV0dXJuIG87fSxfdHJhY2tFdmVudDpmdW5jdGlvbigpe319fX07",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 0
        },
        "cache": {},
        "timings": {
          "blocked": 0.808000011602417,
          "dns": -1,
          "connect": -1,
          "send": 0,
          "wait": 0,
          "receive": 8.98000001325272,
          "ssl": -1
        },
        "serverIPAddress": "",
        "pageref": "page_1"
      }
    ]
  }
}